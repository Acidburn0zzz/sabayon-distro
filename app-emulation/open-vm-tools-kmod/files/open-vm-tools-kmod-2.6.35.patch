--- open-vm-tools-2010.06.16-268169.orig/modules/linux/vmxnet/vmxnet.c
+++ open-vm-tools-2010.06.16-268169/modules/linux/vmxnet/vmxnet.c
@@ -2951,7 +2951,7 @@ vmxnet_load_multicast (struct net_device
 {
    struct Vmxnet_Private *lp = netdev_priv(dev);
     volatile u16 *mcast_table = (u16 *)lp->dd->LADRF;
-    struct dev_mc_list *dmi = dev->mc_list;
+    struct netdev_hw_addr *ha;  // struct dev_mc_list *dmi = dev->mc_list;
     u8 *addrs;
     int i, j, bit, byte;
     u32 crc, poly = CRC_POLYNOMIAL_LE;
@@ -2960,10 +2960,11 @@ vmxnet_load_multicast (struct net_device
     lp->dd->LADRF[0] = 0;
     lp->dd->LADRF[1] = 0;
 
+    i = 0;
     /* Add addresses */
-    for (i = 0; i < dev->mc_count; i++){
-	addrs = dmi->dmi_addr;
-	dmi   = dmi->next;
+    netdev_for_each_mc_addr(ha, dev) { // for (i = 0; i < dev->mc_count; i++){
+        addrs = ha->addr; //dmi->dmi_addr;
+	++i; // dmi   = dmi->next;
 
 	/* multicast address? */
 	if (!(*addrs & 1))
--- open-vm-tools-2010.06.16-268169.orig/modules/linux/vsock/linux/af_vsock.c
+++ open-vm-tools-2010.06.16-268169/modules/linux/vsock/linux/af_vsock.c
@@ -3566,7 +3566,7 @@ VSockVmciAccept(struct socket *sock,
     * upon connection establishment.
     */
    timeout = sock_sndtimeo(listener, flags & O_NONBLOCK);
-   compat_init_prepare_to_wait(sk_sleep(listener), &wait, TASK_INTERRUPTIBLE);
+   compat_init_prepare_to_wait(compat_sk_sleep(listener), &wait, TASK_INTERRUPTIBLE);
 
    while ((connected = VSockVmciDequeueAccept(listener)) == NULL &&
           listener->compat_sk_err == 0) {
@@ -3616,7 +3616,7 @@ VSockVmciAccept(struct socket *sock,
    }
 
 outWait:
-   compat_finish_wait(sk_sleep(listener), &wait, TASK_RUNNING);
+   compat_finish_wait(compat_sk_sleep(listener), &wait, TASK_RUNNING);
 out:
    release_sock(listener);
    return err;
@@ -3714,7 +3714,7 @@ VSockVmciPoll(struct file *file,    // I
    sk = sock->sk;
    vsk = vsock_sk(sk);
 
-   poll_wait(file, sk_sleep(sk), wait);
+   poll_wait(file, compat_sk_sleep(sk), wait);
    mask = 0;
 
    if (sk->compat_sk_err) {
@@ -4313,7 +4313,7 @@ VSockVmciStreamSendmsg(struct kiocb *kio
       goto out;
    }
 
-   compat_init_prepare_to_wait(sk_sleep(sk), &wait, TASK_INTERRUPTIBLE);
+   compat_init_prepare_to_wait(compat_sk_sleep(sk), &wait, TASK_INTERRUPTIBLE);
 
    while (totalWritten < len) {
       Bool sentWrote;
@@ -4351,7 +4351,7 @@ VSockVmciStreamSendmsg(struct kiocb *kio
             goto outWait;
          }
 
-         compat_cont_prepare_to_wait(sk_sleep(sk),
+         compat_cont_prepare_to_wait(compat_sk_sleep(sk),
                                      &wait, TASK_INTERRUPTIBLE);
       }
 
@@ -4403,7 +4403,7 @@ outWait:
    if (totalWritten > 0) {
       err = totalWritten;
    }
-   compat_finish_wait(sk_sleep(sk), &wait, TASK_RUNNING);
+   compat_finish_wait(compat_sk_sleep(sk), &wait, TASK_RUNNING);
 out:
    release_sock(sk);
    return err;
@@ -4589,7 +4589,7 @@ VSockVmciStreamRecvmsg(struct kiocb *kio
       goto out;
    }
 
-   compat_init_prepare_to_wait(sk_sleep(sk), &wait, TASK_INTERRUPTIBLE);
+   compat_init_prepare_to_wait(compat_sk_sleep(sk), &wait, TASK_INTERRUPTIBLE);
 
    while ((ready = VSockVmciStreamHasData(vsk)) < target &&
           sk->compat_sk_err == 0 &&
@@ -4629,7 +4629,7 @@ VSockVmciStreamRecvmsg(struct kiocb *kio
          goto outWait;
       }
 
-      compat_cont_prepare_to_wait(sk_sleep(sk), &wait, TASK_INTERRUPTIBLE);
+      compat_cont_prepare_to_wait(compat_sk_sleep(sk), &wait, TASK_INTERRUPTIBLE);
    }
 
    if (sk->compat_sk_err) {
@@ -4693,7 +4693,7 @@ VSockVmciStreamRecvmsg(struct kiocb *kio
    err = copied;
 
 outWait:
-   compat_finish_wait(sk_sleep(sk), &wait, TASK_RUNNING);
+   compat_finish_wait(compat_sk_sleep(sk), &wait, TASK_RUNNING);
 out:
    release_sock(sk);
    return err;
