diff -Nurp virt-manager-0.3.1.orig/src/virtManager/create.py virt-manager-0.3.1/src/virtManager/create.py
--- virt-manager-0.3.1.orig/src/virtManager/create.py
+++ virt-manager-0.3.1/src/virtManager/create.py
@@ -159,18 +159,18 @@ class vmmCreate(gobject.GObject):
         cd_list.pack_start(text, True)
         cd_list.add_attribute(text, 'text', 1)
         cd_list.add_attribute(text, 'sensitive', 2)
-        try:
+        #try:
             # Get a connection to the SYSTEM bus
-            self.bus = dbus.SystemBus()
+        self.bus = dbus.SystemBus()
             # Get a handle to the HAL service
-            hal_object = self.bus.get_object('org.freedesktop.Hal', '/org/freedesktop/Hal/Manager')
-            self.hal_iface = dbus.Interface(hal_object, 'org.freedesktop.Hal.Manager')
-            self.populate_opt_media(cd_model)
-        except Exception, e:
-            logging.error("Unable to connect to HAL to list cdrom volumes: '%s'", e)
-            self.window.get_widget("media-physical").set_sensitive(False)
-            self.bus = None
-            self.hal_iface = None
+        hal_object = self.bus.get_object('org.freedesktop.Hal', '/org/freedesktop/Hal/Manager')
+        self.hal_iface = dbus.Interface(hal_object, 'org.freedesktop.Hal.Manager')
+        self.populate_opt_media(cd_model)
+        #except Exception, e:
+        #    logging.error("Unable to connect to HAL to list cdrom volumes: '%s'", e)
+        #    self.window.get_widget("media-physical").set_sensitive(False)
+        #    self.bus = None
+        #    self.hal_iface = None
 
         # set up the lists for the url widgets
         media_url_list = self.window.get_widget("pv-media-url")
@@ -754,13 +754,14 @@ class vmmCreate(gobject.GObject):
         self.hal_iface.connect_to_signal("DeviceAdded", self._device_added)
         self.hal_iface.connect_to_signal("DeviceRemoved", self._device_removed)
 
+        import commands
+
         # Find info about all current present media
         for d in self.hal_iface.FindDeviceByCapability("volume"):
-            vol = self.bus.get_object("org.freedesktop.Hal", d)
-            if vol.GetPropertyBoolean("volume.is_disc") and \
-                   vol.GetPropertyBoolean("volume.disc.has_data"):
-                devnode = vol.GetProperty("block.device")
-                label = vol.GetProperty("volume.label")
+            rc = commands.getoutput("hal-get-property --udi "+d+" --key volume.is_disc")
+            if (rc == "true"):
+                devnode = commands.getoutput("hal-get-property --udi "+d+" --key block.device")
+                label = commands.getoutput("hal-get-property --udi "+d+" --key volume.label")
                 if label == None or len(label) == 0:
                     label = devnode
                 vollabel[devnode] = label
@@ -768,8 +769,7 @@ class vmmCreate(gobject.GObject):
 
 
         for d in self.hal_iface.FindDeviceByCapability("storage.cdrom"):
-            dev = self.bus.get_object("org.freedesktop.Hal", d)
-            devnode = dev.GetProperty("block.device")
+            devnode = commands.getoutput("hal-get-property --udi "+d+" --key block.device")
             if vollabel.has_key(devnode):
                 model.append([devnode, vollabel[devnode], True, volpath[devnode]])
             else:
