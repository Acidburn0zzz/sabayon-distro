#!/bin/bash

configure_opengl() {

if [ -n "$cmdline_opengl_exists" ]; then
   for word in `cat /proc/cmdline` ; do
      case $word in
         opengl=*)
            opengl_toset=$(echo $word | cut -d "=" -f 2)
            nice -20 opengl-activator $opengl_toset
            ;;
      esac
   done
else
   get_video_cards &> /dev/null
   get_current_gl=$(opengl-activator show)

   if [ "$get_current_gl" != "$GLTYPE" ]; then
      if [ -z "$cmdline_noproprietary_exist" ]; then
         source /etc/profile
         nice -20 opengl-activator $GLTYPE
         source /etc/profile
      else
         if [ -z "$cmdline_cdroot_exist" ]; then
            source /etc/profile
            nice -20 opengl-activator xorg-x11
            source /etc/profile
        fi
      fi
   fi
fi

}

runtime_linking_proprietary_drivers() {

    if [ -d "/lib/nvidia" ] || [ -d "/lib/fglrx" ]; then
        current_arch=$(uname -m)
        if [ "$current_arch" == "x86_64" ]; then
            ld_arch="elf_x86_64"
        elif [ "$current_arch" == "i686" ]; then
            ld_arch="elf_i386"
        fi
        lspci_vga=$(lspci | grep ' VGA ')
        mount -t tmpfs none /lib/modules/$(uname -r)/video
        if [ -n "`echo $lspci_vga | grep -i nvidia`" ]; then
            ld -m $ld_arch -r -o /lib/modules/$(uname -r)/video/nvidia.ko /lib/nvidia/nvidia.o /lib/nvidia/nvidia.mod.o
            depmod -a &> /dev/null
        elif [ -n "`echo $lspci_vga | grep -i ati`" ]; then
            ld -m $ld_arch -r -o /lib/modules/$(uname -r)/video/fglrx.ko /lib/fglrx/fglrx.o /lib/fglrx/fglrx.mod.o
            depmod -a &> /dev/null
        elif [ -n "`echo $lspci_vga | grep -i unknown`" ]; then
            ld -m $ld_arch -r -o /lib/modules/$(uname -r)/video/nvidia.ko /lib/nvidia/nvidia.o /lib/nvidia/nvidia.mod.o
            ld -m $ld_arch -r -o /lib/modules/$(uname -r)/video/fglrx.ko /lib/fglrx/fglrx.o /lib/fglrx/fglrx.mod.o
            depmod -a &> /dev/null
        elif [ -z "$lspci_vga" ]; then
            ld -m $ld_arch -r -o /lib/modules/$(uname -r)/video/nvidia.ko /lib/nvidia/nvidia.o /lib/nvidia/nvidia.mod.o
            ld -m $ld_arch -r -o /lib/modules/$(uname -r)/video/fglrx.ko /lib/fglrx/fglrx.o /lib/fglrx/fglrx.mod.o
            depmod -a &> /dev/null
        fi
    fi

}

configure_video_settings() {

   # X.Org must be started and now I'm checking if user wants to start the server at 640x480
   if [ -n "$cmdline_legacy_exist" ]; then
      mv -f /etc/X11/xorg.conf.legacy /etc/X11/xorg.conf
      /sbin/gpu-configuration &> /dev/null
      #echo -e "\E[33;36m * \E[0m \E[01;32m Starting up X.Org in (- Legacy -) mode ::\E[0m"
      #echo -e "\t Display Configuration: 800x600 at 60Hz"
   else

      # Probe for Hsync, Vsync, Modes and in case the user has specified
      # something else on the command line, it will be overwritten

      if [ -e "/usr/sbin/ddcxinfo-knoppix" ] && [ -z "$cmdline_noddc_exist" ] && [ -n "$cmdline_cdroot_exist" ]; then

          # hsync
          hsync=$(/usr/sbin/ddcxinfo-knoppix -hsync)
          if [ "$hsync" != "0-0" ]; then
              # ok, we got it
              sed -i '/HorizSync/ s/#//' /etc/X11/xorg.conf
              sed -i '/HorizSync/ s/.*/    HorizSync '$hsync'/' /etc/X11/xorg.conf
          fi

          # vsync
          vsync=$(/usr/sbin/ddcxinfo-knoppix -vsync)
          if [ "$vsync" != "0-0" ]; then
              # ok, we got it
              sed -i '/VertRefresh/ s/#//' /etc/X11/xorg.conf
              sed -i '/VertRefresh/ s/.*/    VertRefresh '$vsync'/' /etc/X11/xorg.conf
          fi

          # Modes?
          if [ "$vsync" != "0-0" ] && [ "$hsync" != "0-0" ]; then
              modes=$(/usr/sbin/ddcxinfo-knoppix -modes)
              if [ -n "$modes" ]; then
                  sed -i '/Modes/ s/#//' /etc/X11/xorg.conf
                  sed -i "/Modes/ s/.*/        $modes/" /etc/X11/xorg.conf
              fi
          fi

      fi

      if [ -n "$cmdline_resolution_forced" ] || [ -n "$cmdline_vga_forced" ];then
	   # change resolution in X.Org

	   if [ -z "$cmdline_vga_forced" ]; then

		for word in `cat /proc/cmdline` ; do
		case $word in
		res=*)
			resolution_toset=$(echo $word | cut -d "=" -f 2)
			if [ "$resolution_toset" == "800x600" ]; then
				sed -i '/Modes.*".*"/ s/"1024x768"/"'$resolution_toset'"/' /etc/X11/xorg.conf
			elif [ "$resolution_toset" == "640x480" ]; then
				sed -i '/Modes.*".*"/ s/"1024x768"/"'$resolution_toset'"/' /etc/X11/xorg.conf
			else
				sed -i '/Modes.*".*"/ s/.*/        Modes           "'$resolution_toset'" "1024x768" "800x600"/' /etc/X11/xorg.conf
			fi
			sed -i '/Modes/ s/#//' /etc/X11/xorg.conf
		;;
		esac
		done

	   else

		resolution_toset=$(echo $cmdline_vga_forced | cut -d" " -f 1) # FIXME: skip depth for now
		if [ "$resolution_toset" == "800x600" ]; then
			sed -i '/Modes.*".*"/ s/"1024x768"/"'$resolution_toset'"/' /etc/X11/xorg.conf
		elif [ "$resolution_toset" == "640x480" ] || [ "$resolution_toset" == "640x400" ]; then
			sed -i '/Modes.*".*"/ s/"1024x768"/"'$resolution_toset'"/' /etc/X11/xorg.conf
		else
			sed -i '/Modes.*".*"/ s/.*/        Modes           "'$resolution_toset'" "1024x768" "800x600"/' /etc/X11/xorg.conf
		fi
		sed -i '/Modes/ s/#//' /etc/X11/xorg.conf

	   fi

      fi

      # Check if refresh= is forced by cmdline
      if [ -n "$cmdline_refresh_exist" ];then
	 # change VertRefresh in X.Org
         for word in `cat /proc/cmdline` ; do
            case $word in
               refresh=*)
		  sed -i '/VertRefresh/ s/#//' /etc/X11/xorg.conf
                  refresh_toset=$(echo $word | cut -d "=" -f 2)
                  sed -i '/VertRefresh/ s/.*/    VertRefresh '$refresh_toset'/' /etc/X11/xorg.conf
		  #echo -e "\E[33;36m * \E[0m\E[01;32m Setting VertRefresh to $refresh_toset Hz \E[0m"
               ;;
            esac
         done
      fi

      # Check if refresh= is forced by cmdline
      if [ -n "$cmdline_hsync_exist" ];then
         # change HorizSync in X.Org
         for word in `cat /proc/cmdline` ; do
            case $word in
               hsync=*)
                  sed -i '/HorizSync/ s/#//' /etc/X11/xorg.conf
                  hsync_toset=$(echo $word | cut -d "=" -f 2)
                  sed -i '/HorizSync/ s/.*/    HorizSync '$hsync_toset'/' /etc/X11/xorg.conf
                  #echo -e "\E[33;36m * \E[0m\E[01;32m Setting HorizSync to $hsync_toset Hz \E[0m"
               ;;
            esac
         done
      fi


      if [ -z "$cmdline_onlyvesa_exist" ]; then
            #echo -e "\E[33;36m * \E[0m\E[01;32m  Video Card:`lspci | grep VGA | cut -d: -f3` \E[0m"
            /sbin/gpu-configuration &> /dev/null
      fi

   fi

}

configure_input_devices() {

    # It's all managed by HAL, w00t!


   # Detect Macintosh - Enabling Apple Key
   #if [ -n "$is_mactel" ]; then
   #     
   #fi

   # Detect VMware
   #if [ -n "$is_vmware" ]; then
   #   sed -i '/Driver.*mouse/ s/mouse/vmmouse/' /etc/X11/xorg.conf
   #fi

}

      # create seed
      rm -f /etc/x-setup-configuration-running
      touch /etc/x-setup-configuration-running

      if [ ! -f "/etc/X11/xorg.conf" ] && [ -f "/etc/X11/xorg.conf.sabayon" ]; then
           cp /etc/X11/xorg.conf.sabayon /etc/X11/xorg.conf -p
      fi

      # get livecd functions
      source /sbin/livecd-functions.sh

      # Variables
      cmdline_onlyvesa_exist=$(cat /proc/cmdline | grep onlyvesa)
      cmdline_opengl_exists=$(cat /proc/cmdline | grep "opengl=")
      cmdline_legacy_exist=$(cat /proc/cmdline | grep legacy)
      cmdline_resolution_forced=$(cat /proc/cmdline | grep "res=")
      cmdline_vga_forced=$(vga-cmd-parser)
      cmdline_refresh_exist=$(cat /proc/cmdline | grep refresh=)
      cmdline_hsync_exist=$(cat /proc/cmdline | grep hsync=)
      cmdline_noddc_exist=$(cat /proc/cmdline | grep "noddc")
      cmdline_cdroot_exist=$(cat /proc/cmdline | grep " cdroot")
      is_mactel=$(dmidecode | grep "Vendor" | grep "Apple Computer")
      is_macbook=$(dmidecode | grep "Product Name" | grep -i "MacBook")
      is_vmware=$(dmidecode | grep "Product Name" | grep -i "vmware")
      alps_touchpad_exist=$(cat /proc/bus/input/devices | grep -i alps)
      synaptics_touchpad_exist=$(cat /proc/bus/input/devices | grep -i synaptics)

      # Prepare Video Cards Proprietary Drivers
      if [ -n "$cmdline_cdroot_exist" ]; then
          runtime_linking_proprietary_drivers
      fi

      # Prepare OpenGL
      if [ -z "$cmdline_onlyvesa_exist" ]; then
         configure_opengl
      fi

      if [ -n "$cmdline_cdroot_exist" ]; then
         # Configure Video Card Driver
         configure_video_settings
      else
         /sbin/gpu-configuration &> /dev/null
      fi

      # Now we can configure X Input drivers
      configure_input_devices

      # delete seed
      rm -f /etc/x-setup-configuration-running
