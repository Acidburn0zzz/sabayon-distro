#!/sbin/runscript
# Copyright 2004-2007 Fabio Erculiani
# Distributed under the terms of the GNU General Public License v2 

depend() {
	after x-setup
	before hald
	before xdm
}

start_acceleration_manager() {

   source /etc/profile
   cmdline_xgl_exist=$(cat /proc/cmdline | grep " xgl")
   cmdline_aiglx_exist=$(cat /proc/cmdline | grep " aiglx")
   cmdline_noaccelmanager_exist=$(cat /proc/cmdline | grep " noaccelmanager")

   # Configure XGL ?
   if [ -n "$cmdline_xgl_exist" ]; then
      #echo -en "\E[33;36m * \E[0m \E[01;32m Configuring the system for XGL... \E[0m"
      /sbin/xgl-setup enable &> /dev/null
      #echo -e "Done"
      killall ogg123 &> /dev/null
      rm -rf /var/tmp/music.ogg &> /dev/null
   fi

   # Configure AIGLX ?
   if [ -n "$cmdline_aiglx_exist" ] && [ -z "$cmdline_xgl_exist" ]; then
      #echo -en "\E[33;36m * \E[0m \E[01;32m Configuring the system for AIGLX... \E[0m"
      /sbin/aiglx-setup enable &> /dev/null
      #echo -e "Done"
      killall ogg123 &> /dev/null
      rm -rf /var/tmp/music.ogg &> /dev/null
   fi

   # Start-up accel-manager - this must be always after gpu-configuration
   if [ -z "$cmdline_noaccelmanager_exist" ] && [ -z "$cmdline_xgl_exist" ] && [ -z "$cmdline_aiglx_exist" ]; then
      # ok, no xgl,aiglx and noaccelmanager parameters at boot. start the app
      cmdline_nox_exist=$(cat /proc/cmdline | grep " nox")
      cmdline_installer_gui_exist=$(cat /proc/cmdline | grep " installer-gui")
      cmdline_installer_text_exist=$(cat /proc/cmdline | grep " installer-text")
      cmdline_mediacenter_exist=$(cat /proc/cmdline | grep "mediacenter")
      cmdline_game_exist=$(cat /proc/cmdline | grep " sabayon-game=")
      cmdline_coldwar_exist=$(cat /proc/cmdline | grep " coldwar")
      cmdline_vesaonly_exist=$(cat /proc/cmdline | grep "vesaonly")
      if [ -z "$cmdline_nox_exist" ] && [ -z "$cmdline_installer_gui_exist" ] && [ -z "$cmdline_installer_text_exist" ] && [ -z "$cmdline_mediacenter_exist" ] && [ -z "$cmdline_game_exist" ] && [ -z "$cmdline_vesaonly_exist" ]; then
	  # Start KDM restarter check
	  start-stop-daemon --start --background --pidfile /var/run/accel-server.pid --make-pidfile --exec /usr/share/accel-manager/accel-server-handler
          /usr/share/accel-manager/desktop-accel-selector &> /dev/null
      else
          killall ogg123 &> /dev/null
	  rm -rf /var/tmp/music.ogg &> /dev/null
      fi
   else
      /sbin/ldconfig &> /dev/null
   fi

   if [ -n "$cmdline_noaccelmanager_exist" ]; then
	killall ogg123 &> /dev/null
	rm -rf /var/tmp/music.ogg &> /dev/null
   fi

}

prepare_fluxbox_locked_autologin() {

	# change default wm to fluxbox
	echo "[Desktop]" > /home/sabayonuser/.dmrc
	echo "Session=fluxbox" >> /home/sabayonuser/.dmrc
	chown sabayonuser /home/sabayonuser/.dmrc
	# Set KDM Autologin and scramble root/sabayonuser passwords
	#AutoLoginEnable=true
	sed -i 's/AutoLoginEnable=.*/AutoLoginEnable=true/' /usr/kde/3.5/share/config/kdm/kdmrc
	#AutoLoginUser=sabayonuser
	sed -i 's/AutoLoginUser=.*/AutoLoginUser=sabayonuser/' /usr/kde/3.5/share/config/kdm/kdmrc
	sed -i 's/AutoLoginDelay=.*/AutoLoginDelay=0/' /usr/kde/3.5/share/config/kdm/kdmrc
	# Change passwords for security
	echo root:\`pwgen -s 16\` | chpasswd  > /dev/null 2>&1
	echo sabayonuser:\`pwgen -s 16\` | chpasswd  > /dev/null 2>&1

}

start() {

	# Kept for compatibility and for SLI
	if [ ! -e "/mnt/gentoo" ];then
		mkdir /mnt/gentoo > /dev/null
	fi

	# Copy sabayonuser directory
	rm -rf /home/sabayonuser
	cp /etc/skel /home/sabayonuser -Rp
	chown sabayonuser:users /home/sabayonuser -R

	# Disable memory eating services
	rm -f /usr/share/autostart/skim.desktop
	rm -f /usr/share/autostart/kerry.autostart.desktop
	rm -f /usr/share/autostart/kbluetooth.autostart.desktop
	rm -f /usr/share/autostart/beagled.desktop
	rm -f /usr/share/autostart/etp-applet.desktop
        rm -f /etc/xdg/autostart/etp-applet.desktop
        rm -f /etc/xdg/autostart/beagled-autostart.desktop

        # Remove broken entries in /etc/mtab
        sed -i '/.*newroot.*/d' /etc/mtab


	# Try to fix 8139cp and 8139too problems
	is_8139_loaded=$(lsmod | grep 8139cp || lsmod | grep 8139too)
        if [ -n "$is_8139_loaded" ]; then
                # Yes it is
                are_there_problems_with_8139cp=$(dmesg | grep -i 'Try the "8139too" driver instead')
                are_there_problems_with_8139too=$(dmesg | grep -i 'Try the "8139cp" driver instead')
                if [ -n "$are_there_problems_with_8139cp" ]; then
                        rmmod 8139cp
                        echo "blacklist 8139cp" >> /etc/modules.d/blacklist
                        modprobe 8139too
                fi
                if [ -n "$are_there_problems_with_8139too" ]; then
                        rmmod 8139too
                        echo "blacklist 8139too" >> /etc/modules.d/blacklist
                        modprobe 8139cp
                fi
        fi

	# collect network devices
	dev_list=$(cat /proc/net/dev | awk '{ print  $1 }' | egrep '^(eth|ath|wlan|ppp|ra)' | cut -d: -f1 | sed -e :a -e '$!N;s/\n/ /')	

        cmdline_nodhcp_exist=$(cat /proc/cmdline | grep nodhcp)

        if [ -n "$cmdline_nodhcp_exist" ]; then
		# write config for network devices
		for word in $dev_list; do
           	    echo "config_$word=( \"dhcp\" )" >> /etc/conf.d/net
           	    echo "dhclient_$word=\"-t 10\"" >> /etc/conf.d/net
		done
	fi

#===============================================================)
# insmod and rmmod:						)
#===============================================================)

	cmdline_rmmod_exist=$(cat /proc/cmdline | grep rmmod=)
	if [ -n "$cmdline_rmmod_exist" ];then

		for word in `cat /proc/cmdline` ; do
		case $word in
			rmmod=*)
				rmmod_toset=$(echo $word | cut -d "=" -f 2)
				rmmod_comma_separated=$(echo $rmmod_toset | grep ",")
				if [ -n "$rmmod_comma_separated" ]; then
				   while [ "`echo $rmmod_toset | grep ','`" != "" ]; do 
				      rmmod_toset=$(echo $rmmod_toset | sed 's/,/ /')
				   done
				   for word2 in $rmmod_toset; do
				     rmmod $word2 &> /dev/null
				     echo -e "\E[33;36m * \E[0m\E[01;32m Removing kernel module: "$word2 "\E[0m"
				   done
				else
				   rmmod $rmmod_toset &> /dev/null
				   echo -e "\E[33;36m * \E[0m\E[01;32m Removing kernel module: "$insmod_toset "\E[0m"
				fi

			;;
			esac
		done

	fi 

	cmdline_insmod_exist=$(cat /proc/cmdline | grep insmod=)
	if [ -n "$cmdline_insmod_exist" ];then

		for word in `cat /proc/cmdline` ; do
		case $word in
			insmod=*)
				insmod_toset=$(echo $word | cut -d "=" -f 2)
				insmod_comma_separated=$(echo $insmod_toset | grep ",")
				if [ -n "$insmod_comma_separated" ]; then
				   while [ "`echo $insmod_toset | grep ','`" != "" ]; do 
				      insmod_toset=$(echo $insmod_toset | sed 's/,/ /')
				   done
				   for word2 in $insmod_toset; do
				     modprobe $word2 &> /dev/null
				     echo -e "\E[33;36m * \E[0m\E[01;32m Loading kernel module: "$word2 "\E[0m"
				   done
				else
				   modprobe $insmod_toset &> /dev/null
				   echo -e "\E[33;36m * \E[0m\E[01;32m Loading kernel module: "$insmod_toset "\E[0m"
				fi

			;;
			esac
		done

	fi 

#===============================================================)
# Power Managment:						)
#	for some notebooks is better to set the processor speed )
#	to the lowest frequency					)
#===============================================================)

	cmdline_nofreqscaling_exist=$(cat /proc/cmdline | grep nofreqscaling)
	if [ -z "$cmdline_nofreqscaling_exist" ];then

		# Workaround for VIA Nehemiah
		  cpu_is_nehemiah=$(cat /proc/cpuinfo | grep "VIA Nehemiah" )
		  if [ -z "$cpu_is_nehemiah" ]; then

			echo -e "\E[33;36m * \E[0m\E[01;32m Enabling on-demand CPU Power scaling \E[0m"
			if [ -e /sys/devices/system/cpu/cpu0/cpufreq/scaling_setspeed ]; then	
        	    	 echo "ondemand" > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
			fi

		  else

			echo -e "\E[33;36m * \E[0m\E[01;32m CPU Detected is VIA Nehemiah (Power set to Performance) \E[0m"
			if [ -e /sys/devices/system/cpu/cpu0/cpufreq/scaling_setspeed ]; then	
        	    	 echo "performance" > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
			fi

		  fi


	else

		echo -e "\E[33;36m * \E[0m\E[01;32m CPU Power scaling disabled \E[0m"

	fi

#===============================================================)
# PASSWORD HANDLING:	                                        )
#       Here I decide how use the passwords                     )
#===============================================================)

	cmdline_autoscramble_exist=$(cat /proc/cmdline | grep autoscramble)

	if [ -n "$cmdline_autoscramble_exist" ]; then

		echo
		echo -e "\E[33;36m * \E[0m\E[01;36m Autoscrambling root passwords for   S E C U R I T Y"
		echo root:\`pwgen -s 16\` | chpasswd  > /dev/null 2>&1
		echo sabayonuser:\`pwgen -s 16\` | chpasswd  > /dev/null 2>&1
		echo

	else 	

                echo
      	      	echo -e "\t *\E[01;32m root password\E[0m : \E[01;33m root \E[0m"
              	echo -e "\t *\E[01;32m username\E[0m : \E[01;33m sabayonuser\E[0m |\E[01;32m password\E[0m : \E[01;33m sabayonuser\E[0m"
		echo

	fi

	cmdline_session_exist=$(cat /proc/cmdline | grep session=)
	if [ -n "$cmdline_session_exist" ]; then
		# Session exists, should be: kde,gnome,fluxbox

                for word in `cat /proc/cmdline` ; do
                  case $word in
                    session=kde)

                        # change default DE to KDE
                        echo "[Desktop]" > /home/sabayonuser/.dmrc
                        echo "Session=kde-3.5" >> /home/sabayonuser/.dmrc
                        chown sabayonuser /home/sabayonuser/.dmrc
                        #AutoLoginEnable=true
                        sed -i 's/AutoLoginEnable=false/AutoLoginEnable=true/' /usr/kde/3.5/share/config/kdm/kdmrc
                        #AutoLoginUser=sabayonuser
                        sed -i 's/AutoLoginUser=.*/AutoLoginUser=sabayonuser/' /usr/kde/3.5/share/config/kdm/kdmrc
	
                    ;;
                    session=xfce)

                        # change default DE to XFCE
                        echo "[Desktop]" > /home/sabayonuser/.dmrc
                        echo "Session=xfce" >> /home/sabayonuser/.dmrc
                        chown sabayonuser /home/sabayonuser/.dmrc
                        #AutoLoginEnable=true
                        sed -i 's/AutoLoginEnable=false/AutoLoginEnable=true/' /usr/kde/3.5/share/config/kdm/kdmrc
                        #AutoLoginUser=sabayonuser
                        sed -i 's/AutoLoginUser=.*/AutoLoginUser=sabayonuser/' /usr/kde/3.5/share/config/kdm/kdmrc

                    ;;
                    session=gnome)

                        # change default DE to GNOME
                        echo "[Desktop]" > /home/sabayonuser/.dmrc
                        echo "Session=gnome" >> /home/sabayonuser/.dmrc
                        chown sabayonuser /home/sabayonuser/.dmrc
                        #AutoLoginEnable=true
                        sed -i 's/AutoLoginEnable=false/AutoLoginEnable=true/' /usr/kde/3.5/share/config/kdm/kdmrc
                        #AutoLoginUser=sabayonuser
                        sed -i 's/AutoLoginUser=.*/AutoLoginUser=sabayonuser/' /usr/kde/3.5/share/config/kdm/kdmrc

                    ;;
                    session=metisse-kde)

                        # change default DE to Metisse on KDE
                        echo "[Desktop]" > /home/sabayonuser/.dmrc
                        echo "Session=metisse-kde" >> /home/sabayonuser/.dmrc
                        chown sabayonuser /home/sabayonuser/.dmrc
                        #AutoLoginEnable=true
                        sed -i 's/AutoLoginEnable=false/AutoLoginEnable=true/' /usr/kde/3.5/share/config/kdm/kdmrc
                        #AutoLoginUser=sabayonuser
                        sed -i 's/AutoLoginUser=.*/AutoLoginUser=sabayonuser/' /usr/kde/3.5/share/config/kdm/kdmrc

                    ;;
                    session=metisse-gnome)

                        # change default DE to Metisse on GNOME
                        echo "[Desktop]" > /home/sabayonuser/.dmrc
                        echo "Session=metisse-gnome" >> /home/sabayonuser/.dmrc
                        chown sabayonuser /home/sabayonuser/.dmrc
                        #AutoLoginEnable=true
                        sed -i 's/AutoLoginEnable=false/AutoLoginEnable=true/' /usr/kde/3.5/share/config/kdm/kdmrc
                        #AutoLoginUser=sabayonuser
                        sed -i 's/AutoLoginUser=.*/AutoLoginUser=sabayonuser/' /usr/kde/3.5/share/config/kdm/kdmrc

                    ;;
                    session=fluxbox)

                        # change default DE to Fluxbox
                        echo "[Desktop]" > /home/sabayonuser/.dmrc
                        echo "Session=fluxbox" >> /home/sabayonuser/.dmrc
                        chown sabayonuser /home/sabayonuser/.dmrc
                        #AutoLoginEnable=true
                        sed -i 's/AutoLoginEnable=false/AutoLoginEnable=true/' /usr/kde/3.5/share/config/kdm/kdmrc
                        #AutoLoginUser=sabayonuser
                        sed -i 's/AutoLoginUser=.*/AutoLoginUser=sabayonuser/' /usr/kde/3.5/share/config/kdm/kdmrc
                    ;;
                  esac
                done
		
		  

	fi


	# XsistenCe Mode
 	persistent_exists=$(cat /proc/cmdline | grep "xsistence")
 	if [ -n "$persistent_exists" ]; then
	  	  
         xsistence_mb=$(cat /proc/cmdline | grep "xsistence_mb=")
         if [ -n "$xsistence_mb" ];then

             for word in `cat /proc/cmdline` ; do
               case $word in
                 xsistence_mb=*)
		   xsistence_img_mb=$(echo $word | cut -d "=" -f 2)
                   ;;
                esac
             done

          else
		   xsistence_img_mb=28
          fi

	  xsistence_found="0"
	  # Persistent Mode enabled
	  echo -e "\E[33;36m * \E[0m \E[01;32m Enabling XsistenCe Mode (logfile: /tmp/xsistence.log)... \E[0m"
	  echo -en "\E[33;36m * \E[0m \E[01;32m Please plug-in your USB Memory Stick now (10 seconds)... \E[0m"
	  sleep 10
	  echo -en "Waiting for devices..."
	  sleep 6
	  echo -e "Scanning."
	  sleep 1
	  for file in /sys/block/*/device; do
	    is_floppy=$(echo $file | grep "fd[0-99]")
	    is_sr=$(echo $file | grep "sr[0-99]")
	    
	    if [ -z "$is_floppy" ] || [ -z "$is_sr" ]; then

	     # if it's not a floppy or an external recorder, scrub it
		device=$(echo $file | cut -d/ -f4)
		if [ -e /sys/block/$device/removable ]; then
		   is_removable=$(cat /sys/block/$device/removable)
		else
		   is_removable="0"
		fi
		if [ "$is_removable" = "1" ]; then
		  # I have found a removable drive, seek it !

		  # Counting partitions...
		  partitions_list=$(ls /dev/$device*)
		
		  for word in $partitions_list; do

		    if [ "$xsistence_found" = "0" ]; then

			# Mount them and verify the correct operation
			mkdir /mnt/xsistence &> /dev/null
			mount $word /mnt/xsistence &> /dev/null
			if [ "$?" = "0" ]; then
	
				if [ ! -e /tmp/xsistence.log ]; then
					echo "Mounted "$word "for test" > /tmp/xsistence.log
				else
					echo "Mounted "$word "for test" >> /tmp/xsistence.log
				fi
				
				# Look for "xsistence-mode" file (case insensitive)
				file_found=$(find /mnt/xsistence -maxdepth 1 -nowarn -iname xsistence-mode)
				if [ -n "$file_found" ]; then
					
					# test r/w capabilities
						touch /mnt/xsistence/.touch-test &> /dev/null
					if [ "$?" = "0" ] && [ -e /mnt/xsistence/.touch-test ]; then
	
						rm /mnt/xsistence/.touch-test
						# Look for existing image
						if [ -e /mnt/xsistence/sabayon-xsistence.ext3 ]; then
	
							if [ ! -e /tmp/xsistence.log ]; then
								echo "/mnt/xsistence/sabayon-xsistence.ext3 on "$word "exists" > /tmp/xsistence.log
							else
								echo "/mnt/xsistence/sabayon-xsistence.ext3 on "$word "exists" >> /tmp/xsistence.log
							fi
							
							# found ! mount it
							  mount -o loop /mnt/xsistence/sabayon-xsistence.ext3 /home &> /dev/null
							  if [ "$?" = "0" ]; then
								if [ ! -e /tmp/xsistence.log ]; then
									echo "/mnt/xsistence/sabayon-xsistence.ext3 mounted using "$word > /tmp/xsistence.log
								else
									echo "/mnt/xsistence/sabayon-xsistence.ext3 mounted using "$word >> /tmp/xsistence.log
								fi
							     	xsistence_found="1"
								# print the output
								echo  -e "\t \t Found XsistenCe on "$word". Mounted and fully working."
							  else
								if [ ! -e /tmp/xsistence.log ]; then
									echo "/mnt/xsistence/sabayon-xsistence.ext3 cannot be mounted  using " $word > /tmp/xsistence.log
								else
									echo "/mnt/xsistence/sabayon-xsistence.ext3 cannot be mounted  using " $word >> /tmp/xsistence.log
								fi
								umount /mnt/xsistence -f &> /dev/null
								rmdir /mnt/xsistence /&> /dev/null
								# print the output
								echo  -e "\t \t Found XsistenCe on "$word". But the image does not work."

							  fi
							
							
	
						else
	
							if [ ! -e /tmp/xsistence.log ]; then
								echo "/mnt/xsistence/sabayon-xsistence.ext3 on "$word "does not exist" > /tmp/xsistence.log
							else
								echo "/mnt/xsistence/sabayon-xsistence.ext3 on "$word "does not exist" >> /tmp/xsistence.log
							fi

							# create disk image and test available space
							# need to find another way to get avaiable space
							
							# output
							echo  -en "\t \t Trying to create the image on "$word"..."
							dd if=/dev/zero of=/mnt/xsistence/sabayon-xsistence.ext3 count=$xsistence_img_mb bs=1024000 &> /dev/null
							if [ "$?" = "0" ]; then
							  losetup /dev/loop7 /mnt/xsistence/sabayon-xsistence.ext3
							  loopdevice="7"

							  if [ "$?" != "0" ]; then
							    # trying another loopback device
							    losetup /dev/loop6 /mnt/xsistence/sabayon-xsistence.ext3
							    loopdevice="6"
							  fi
							  if [ "$?" != "0" ]; then
							    # trying another loopback device
							    losetup /dev/loop5 /mnt/xsistence/sabayon-xsistence.ext3
							    loopdevice="5"
							  fi
							  if [ "$?" != "0" ]; then
							    # trying another loopback device
							    losetup /dev/loop4 /mnt/xsistence/sabayon-xsistence.ext3
							    loopdevice="4"
							  fi
							  if [ "$?" != "0" ]; then
							    # trying another loopback device
							    losetup /dev/loop3 /mnt/xsistence/sabayon-xsistence.ext3
							    loopdevice="3"
							  fi
							  if [ "$?" != "0" ]; then
							    # trying another loopback device
							    losetup /dev/loop2 /mnt/xsistence/sabayon-xsistence.ext3
							    loopdevice="2"
							  fi

							  if [ "$?" = "0" ]; then
							    # loopback ok, formatting...
							    mkfs.ext3 /dev/loop$loopdevice &> /dev/null
							    if [ "$?" = "0" ]; then
								if [ ! -e /tmp/xsistence.log ]; then
									echo "Image formatted and ready to get filled " $word "using loopback" $loopdevice  > /tmp/xsistence.log
								else
									echo "Image formatted and ready to get filled " $word "using loopback" $loopdevice >> /tmp/xsistence.log
								fi
								
							      mkdir /mnt/loopbacktemp
							      mount -o loop /mnt/xsistence/sabayon-xsistence.ext3 /mnt/loopbacktemp
							      if [ "$?" = "0" ]; then
								if [ ! -e /tmp/xsistence.log ]; then
									echo "Image formatted and ready to get filled " $word "using loopback" $loopdevice  > /tmp/xsistence.log
								else
									echo "Image formatted and ready to get filled " $word "using loopback" $loopdevice >> /tmp/xsistence.log
								fi
							        cp -Rp /home/* /mnt/loopbacktemp/
								mount --move /mnt/loopbacktemp/ /home/
								if [ "$?" = "0" ]; then
								   echo -e "image created and mounted !"
							           xsistence_found="1"
								   if [ ! -e /tmp/xsistence.log ]; then
									echo "Image created and mounted using" $word "and loopback" $loopdevice  > /tmp/xsistence.log
								   else
									echo "Image created and mounted using" $word "and loopback" $loopdevice >> /tmp/xsistence.log
								   fi
								else
								   echo -e "Sorry, cannot move mount point"
								   if [ ! -e /tmp/xsistence.log ]; then
									echo "Cannot move mount point for" $word "and loopback" $loopdevice  > /tmp/xsistence.log
								   else
									echo "Cannot move mount point for" $word "and loopback" $loopdevice  >> /tmp/xsistence.log
								   fi
								fi
							      else
								echo -e "Sorry, cannot mount the image"
								if [ ! -e /tmp/xsistence.log ]; then
									echo "Image not mounted" $word "using loopback" $loopdevice  > /tmp/xsistence.log
								else
									echo "Image not mounted" $word "using loopback" $loopdevice >> /tmp/xsistence.log
								fi
							      fi

							    else
							      echo -e "Sorry, cannot format the image"
								if [ ! -e /tmp/xsistence.log ]; then
									echo "Cannot format the image on " $word  > /tmp/xsistence.log
								else
									echo "Cannot format the image on " $word  >> /tmp/xsistence.log
								fi
							    fi


							  else
							    echo -e "Sorry, no free loopback device"
								if [ ! -e /tmp/xsistence.log ]; then
									echo "No free loopback device for " $word > /tmp/xsistence.log
								else
									echo "No free loopback device for " $word >> /tmp/xsistence.log
								fi
							  fi




							else
							  echo -e "Sorry, " $xsistence_img_mb " MB required"
							  rm -rf /mnt/xsistence/sabayon-xsistence.ext3 &> /dev/null
							fi


						fi
	
						
	
					else
						if [ ! -e /tmp/xsistence.log ]; then
							echo "No read-write capabilities for " $word > /tmp/xsistence.log
						else
							echo "No read-write capabilities for " $word >> /tmp/xsistence.log
						fi
						umount /mnt/xsistence -f &> /dev/null
						rmdir /mnt/xsistence /&> /dev/null
						
					fi
					
					
				else
					if [ ! -e /tmp/xsistence.log ]; then
						echo "xsistence-mode not found on " $word > /tmp/xsistence.log
					else
						echo "xsistence-mode not found on " $word >> /tmp/xsistence.log
					fi
					umount /mnt/xsistence -f &> /dev/null
					rmdir /mnt/xsistence /&> /dev/null
				fi
	
			else
				if [ ! -e /tmp/xsistence.log ]; then
					echo "Tried to mount " $word "without luck" > /tmp/xsistence.log
				else
					echo "Tried to mount " $word "without luck" >> /tmp/xsistence.log
				fi
			fi


		    fi
		  done

		  

		  # if not create it

		  # mount it

		  # bind the files
		 echo

		fi

	    fi


	  done

	  if [ "$xsistence_found" = "0" ]; then
		echo  -e "\t \t No XsistenCe ready devices found"
	  fi

	else
	  # Persistent Mode disabled
	  echo -e "\E[33;36m * \E[0m \E[01;32m XsistenCe is not enabled. \E[0m"

	fi


	# Create /media for removable devices
	if [ ! -e /media ]; then
	  mkdir /media
	  chmod 755 /media
	fi


	# Check if KEYMAP is forced by cmdline
        cmdline_keymap_exist=$(cat /proc/cmdline | grep -i "KEYMAP=")
        cmdline_keymap_isolinux_exist=$(cat /proc/cmdline | grep -i "console-setup/layoutcode=")

	if [ -n "$cmdline_keymap_isolinux_exist" ]; then
		cmdline_keymap_exist="console-setup"
	fi

        if [ -n "$cmdline_keymap_exist" ];then

		if [ "$cmdline_keymap_exist" == "console-setup" ]; then
			# detect keymap
			for word in `cat /proc/cmdline` ; do
				case $word in
					console-setup/layoutcode=*)
					keymap_toset=$(echo $word | cut -d "=" -f 2)
					;;
				esac
			done
		else

			# detect keymap
			for word in `cat /proc/cmdline` ; do
				case $word in
					KEYMAP=*)
					keymap_toset=$(echo $word | cut -d "=" -f 2)
					;;
					keymap=*)
					keymap_toset=$(echo $word | cut -d "=" -f 2)
					;;
				esac
			done

		fi

                if [ -n "$keymap_toset" ]; then
                        /sbin/keyboard-setup $keymap_toset &> /dev/null
                fi

        fi


	# Setup SAMBA Hostname
	smbhostname="sabayonlinux-"$RANDOM
        execute_cmd="sed -i \"s/netbios name = .*/netbios name = $smbhostname/\" /etc/samba/smb.conf"
	echo $execute_cmd | /bin/bash
	/etc/init.d/samba restart --nodeps &> /dev/null

	tor_exists=$(cat /proc/cmdline | grep " tor")
	if [ -n "$tor_exists" ]; then
		echo -en "\E[33;36m * \E[0m \E[01;32m Starting Safe Browsing extensions...\E[0m"
			/sbin/safe-browsing-setup enable &> /dev/null
		echo -e Done
	fi

	cmdline_mediacenter_exists=$(cat /proc/cmdline | grep mediacenter)
	if [ -n "$cmdline_mediacenter_exists" ]; then
	   # Start Elisa
           echo -en "\E[33;36m * \E[0m \E[01;32m Starting Media Center...\E[0m"

	   # change default wm to fluxbox
	   echo "[Desktop]" > /home/sabayonuser/.dmrc
	   echo "Session=fluxbox" >> /home/sabayonuser/.dmrc
	   chown sabayonuser /home/sabayonuser/.dmrc
	   # Set KDM Autologin and scramble root/sabayonuser passwords
	   #AutoLoginEnable=true
	   sed -i 's/AutoLoginEnable=.*/AutoLoginEnable=true/' /usr/kde/3.5/share/config/kdm/kdmrc
	   #AutoLoginUser=sabayonuser
	   sed -i 's/AutoLoginUser=.*/AutoLoginUser=sabayonuser/' /usr/kde/3.5/share/config/kdm/kdmrc
	   sed -i 's/AutoLoginDelay=.*/AutoLoginDelay=0/' /usr/kde/3.5/share/config/kdm/kdmrc
    	   # Change passwords for security
	   echo root:\`pwgen -s 16\` | chpasswd  > /dev/null 2>&1
	   echo sabayonuser:\`pwgen -s 16\` | chpasswd  > /dev/null 2>&1
	   
	   # Set Elisa to Fluxbox startup
	   echo >> /home/sabayonuser/.fluxbox/init
	   echo "session.screen0.rootCommand: fbsetbg -l & elisa && sudo halt" >> /home/sabayonuser/.fluxbox/init

	   echo -e "\E[01;32mDone \E[0m"
	fi

	# Mount games squashfs if exists
	if [ -e "/mnt/cdrom/games.squashfs" ]; then

		mkdir -p /install-data/games-ro &> /dev/null
		mount -o loop /mnt/cdrom/games.squashfs /install-data/games-ro &> /dev/null
		mkdir -p /install-data/games-changes &> /dev/null
		mount -t tmpfs none /install-data/games-changes &> /dev/null
		mount -t aufs -o br=/install-data/games-changes:/install-data/games-ro none /install-data/games

		# copy warsow
		cp /usr/share/applications/warsow-warsow.desktop /home/sabayonuser/Desktop/ &> /dev/null
		# copy sauerbraten
		cp /usr/share/applications/sauerbraten_client-bin-sauerbraten.desktop /home/sabayonuser/Desktop/ &> /dev/null
		# copy dangerdeep
		cp /usr/share/applications/dangerdeep-dangerdeep.desktop /home/sabayonuser/Desktop/ &> /dev/null
		# copy torcs
		cp /usr/share/applications/torcs-torcs.desktop /home/sabayonuser/Desktop/ &> /dev/null
		# copy nexuiz
		cp /usr/share/applications/nexuiz-glx-nexuiz.desktop /home/sabayonuser/Desktop/ &> /dev/null
		# copy savage
		cp /usr/share/applications/savage-savage-bin.desktop /home/sabayonuser/Desktop/ &> /dev/null
		# copy flightgear
		cp /usr/share/applications/fgfs-flightgear.desktop /home/sabayonuser/Desktop/ &> /dev/null
		# copy secondlife
		cp /usr/share/applications/secondlife-bin-secondlife-bin.desktop /home/sabayonuser/Desktop &> /dev/null

		chown sabayonuser /home/sabayonuser/Desktop/*.desktop
		
		cmdline_warsow_exists=$(cat /proc/cmdline | grep sabayon-game=warsow)
		if [ -n "$cmdline_warsow_exists" ]; then
			# Start Coldwar
			echo -en "\E[33;36m * \E[0m \E[01;32m Starting Warsow...\E[0m"
			
			prepare_fluxbox_locked_autologin
			
			# Set Freevo to Fluxbox startup
			echo >> /home/sabayonuser/.fluxbox/init
			echo "session.screen0.rootCommand: fbsetbg -l & /scripts/rungame.sh /usr/games/bin/warsow && sudo halt -fp" >> /home/sabayonuser/.fluxbox/init
			
			echo -e "\E[01;32mDone \E[0m"
		fi

		cmdline_sauerbraten_exists=$(cat /proc/cmdline | grep sabayon-game=sauerbraten)
		if [ -n "$cmdline_sauerbraten_exists" ]; then
			# Start Coldwar
			echo -en "\E[33;36m * \E[0m \E[01;32m Starting Sauerbraten...\E[0m"
			
			prepare_fluxbox_locked_autologin
			
			# Set Freevo to Fluxbox startup
			echo >> /home/sabayonuser/.fluxbox/init
			echo "session.screen0.rootCommand: fbsetbg -l & /scripts/rungame.sh /usr/games/bin/sauerbraten_client-bin && sudo halt -fp" >> /home/sabayonuser/.fluxbox/init
			
			echo -e "\E[01;32mDone \E[0m"
		fi

		cmdline_dangerdeep_exists=$(cat /proc/cmdline | grep sabayon-game=dangerdeep)
		if [ -n "$cmdline_dangerdeep_exists" ]; then
			# Start Coldwar
			echo -en "\E[33;36m * \E[0m \E[01;32m Starting Dangerdeep...\E[0m"
			
			prepare_fluxbox_locked_autologin
			
			# Set Freevo to Fluxbox startup
			echo >> /home/sabayonuser/.fluxbox/init
			echo "session.screen0.rootCommand: fbsetbg -l & /scripts/rungame.sh /usr/games/bin/dangerdeep && sudo halt -fp" >> /home/sabayonuser/.fluxbox/init
			
			echo -e "\E[01;32mDone \E[0m"
		fi

		cmdline_torcs_exists=$(cat /proc/cmdline | grep sabayon-game=torcs)
		if [ -n "$cmdline_torcs_exists" ]; then
			# Start Coldwar
			echo -en "\E[33;36m * \E[0m \E[01;32m Starting Torcs...\E[0m"
			
			prepare_fluxbox_locked_autologin
			
			# Set Freevo to Fluxbox startup
			echo >> /home/sabayonuser/.fluxbox/init
			echo "session.screen0.rootCommand: fbsetbg -l & /scripts/rungame.sh /usr/games/bin/torcs && sudo halt -fp" >> /home/sabayonuser/.fluxbox/init
			
			echo -e "\E[01;32mDone \E[0m"
		fi

		cmdline_nexuiz_exists=$(cat /proc/cmdline | grep sabayon-game=nexuiz)
		if [ -n "$cmdline_nexuiz_exists" ]; then
			# Start Coldwar
			echo -en "\E[33;36m * \E[0m \E[01;32m Starting Nexuiz...\E[0m"
			
			prepare_fluxbox_locked_autologin
			
			# Set Freevo to Fluxbox startup
			echo >> /home/sabayonuser/.fluxbox/init
			echo "session.screen0.rootCommand: fbsetbg -l & /scripts/rungame.sh /usr/games/bin/nexuiz && sudo halt -fp" >> /home/sabayonuser/.fluxbox/init
			
			echo -e "\E[01;32mDone \E[0m"
		fi

		cmdline_savage_exists=$(cat /proc/cmdline | grep sabayon-game=savage)
		if [ -n "$cmdline_savage_exists" ]; then
			# Start Coldwar
			echo -en "\E[33;36m * \E[0m \E[01;32m Starting Savage...\E[0m"
			
			prepare_fluxbox_locked_autologin
			
			# Set Freevo to Fluxbox startup
			echo >> /home/sabayonuser/.fluxbox/init
			echo "session.screen0.rootCommand: fbsetbg -l & /scripts/rungame.sh /usr/games/bin/savage && sudo halt -fp" >> /home/sabayonuser/.fluxbox/init
			
			echo -e "\E[01;32mDone \E[0m"
		fi

		cmdline_flightgear_exists=$(cat /proc/cmdline | grep sabayon-game=flightgear)
		if [ -n "$cmdline_flightgear_exists" ]; then
			# Start Coldwar
			echo -en "\E[33;36m * \E[0m \E[01;32m Starting FlightGear...\E[0m"
			
			prepare_fluxbox_locked_autologin
			
			# Set Freevo to Fluxbox startup
			echo >> /home/sabayonuser/.fluxbox/init
			echo "session.screen0.rootCommand: fbsetbg -l & /scripts/rungame.sh /usr/games/bin/fgfs && sudo halt -fp" >> /home/sabayonuser/.fluxbox/init
			
			echo -e "\E[01;32mDone \E[0m"
		fi

		cmdline_secondlife_exists=$(cat /proc/cmdline | grep sabayon-game=secondlife)
		if [ -n "$cmdline_secondlife_exists" ]; then
			# Start Coldwar
			echo -en "\E[33;36m * \E[0m \E[01;32m Starting Second Life...\E[0m"
			
			prepare_fluxbox_locked_autologin
			
			# Set Freevo to Fluxbox startup
			echo >> /home/sabayonuser/.fluxbox/init
			echo "session.screen0.rootCommand: fbsetbg -l & /scripts/rungame.sh /usr/games/bin/secondlife-bin && sudo halt -fp" >> /home/sabayonuser/.fluxbox/init
			
			echo -e "\E[01;32mDone \E[0m"
		fi

		
	fi

	# At this point
	echo -en "\E[33;36m * \E[0m \E[01;32m Waiting for OpenGL Configurator to finish... \E[0m"
	while [ -e "/etc/x-setup-configuration-running" ]
           do
	      # waiting...
	      sleep 1
	   done
	echo -e "Done"


	# Strict HARDWARE detection and configuration

	# XXX disabled because:
	# - can hang
	# - hal is not started anymore at this point
	#pc_is_macbook=$(lshal | grep -i macbook)
	#if [ -n "$pc_is_macbook" ]; then
	#	# launch pommed
	#	if [ -e "/etc/init.d/pommed" ]; then
	#		/etc/init.d/pommed start &> /dev/null
	#		rc-update add pommed default &> /dev/null
	#	fi
	#fi

	# Setup automatic DVD ejecting
	python -c '
import os
import commands
sh_file = "/etc/init.d/shutdown.sh"
mydev = commands.getoutput("mount | grep \" /mnt/cdrom \" | cut -d\" \" -f 1")
if mydev.startswith("/dev") and os.path.isfile(sh_file):
	f = open(sh_file,"r")
	sh_content = f.readlines()
	f = open(sh_file,"w")
	for line in sh_content:
		if line.startswith("/sbin/halt"):
			# change
			line = "eject -mp "+mydev+" && " + line
		f.write(line)
	f.flush()
	f.close()
	'


	# MOVED HERE TO AVOID RACE CONDITIONS ON WRITING /etc/profile.env variables
	# Check if LANG is forced by cmdline
        cmdline_lang_exist=$(cat /proc/cmdline | grep -i "lang=")
        cmdline_locale_exist=$(cat /proc/cmdline | grep -i "locale=")

	if [ -n "$cmdline_locale_exist" ]; then
		cmdline_lang_exist="locale-setup"
	fi

        if [ -n "$cmdline_lang_exist" ];then

		if [ "$cmdline_lang_exist" == "locale-setup" ]; then
			# detect keymap
			for word in `cat /proc/cmdline` ; do
				case $word in
					locale=*)
					lang_toset=$(echo $word | cut -d "=" -f 2)
					;;
				esac
			done

		else

			for word in `cat /proc/cmdline` ; do
				case $word in
					LANG=*)
					lang_toset=$(echo $word | cut -d "=" -f 2)
					;;
					lang=*)
					lang_toset=$(echo $word | cut -d "=" -f 2)
					;;
				esac
			done

		fi
		
		# Setup Language
		    /sbin/language-setup $lang_toset &> /dev/null

        fi

	# Dirty workaround for kde4 apps in !=kde4 DEs
	python -c '
import os
kde4_de_dir = "/usr/kde/4.0/share/applications/kde4"
kde4_de_files = os.listdir(kde4_de_dir)
for kde4file in kde4_de_files:
	kde4file = kde4_de_dir+"/"+kde4file
	f = open(kde4file,"r")
	k4content = f.readlines()
	f.close()
	f = open(kde4file,"w")
	for line in k4content:
		if line.startswith("Exec="):
			line = line.replace("Exec=","Exec=/usr/kde/3.9/bin/")
		if line.startswith("Name="):
			line = line.strip()
			line += " KDE 4\n"
		f.write(line)
	f.flush()
	f.close()
'
	# Add sudo to gparted exec=
	sed -i 's/Exec=/Exec=sudo /' /home/sabayonuser/Desktop/gparted.desktop

	# Start Accel Manager or Configure XGL/AIGLX
	start_acceleration_manager

}

stop() {

	persistent_exists=$(cat /proc/cmdline | grep "xsistence")
	if [ -n "$persistent_exists" ]; then
	  sleep 5
	  sync
	  # umount every possible mounted filesystem (/home and /mnt/xsistence)
	  mnt_xsistence_img_mounted=$(cat /etc/mtab | grep "/mnt/xsistence/sabayon-xsistence.ext3")
	  if [ -n "$mnt_xsistence_img_mounted" ]; then
		mozilla_cache=$(find /home/*/.mozilla -nowarn -name Cache)
		for word in $mozilla_cache; do
		  rm -rf $word
		done
		sync
		sleep 1
		umount -l -r -d /mnt/xsistence/sabayon-xsistence.ext3
	  fi
	  mnt_xsistence_mounted=$(cat /etc/mtab | grep "/mnt/xsistence")
	  if [ -n "$mnt_xsistence_mounted" ]; then
		umount -l -r /mnt/xsistence
	  fi
	  # redundant...
	  home_mounted=$(cat /etc/mtab | grep "/home ")
	  if [ -n "$home_mounted" ]; then
		umount -l -r -d /home
	  fi

	fi


}

