#!/usr/bin/python2
# -*- coding: utf-8 -*-
# 2009 - SabayonLinux - Fabio Erculiani

# ERROR CODES:
# 1 - invalid parameters
# 2 - root access required
# 3 - keymap does not exist
# 4 - sys.argv[1] must be valid

# We edit /etc/conf.d/keymaps

import sys
import os
import shutil
import commands

# System functions

def print_error(msg):
    print "* erro *  : "+msg

def print_info(msg):
    print "* info *  : "+msg

def print_help():
    print "* IIIII * : Sabayon Linux keymap configurator - written by Fabio Erculiani (C - 2007)"
    print "* usage * : keyboard-setup <valid keymap> (optional: <system,xorg,gnome,kde,xfce>)"

def print_warning(msg):
    print "* warn *  : "+msg

options = sys.argv[1:]
# parameters test
if not options or "--help" in options or '-h' in options:
    print_help()
    if len(options) < 1:
        print_error("not enough parameters")
    raise SystemExit(1)

# Parse --with-root="/path/to/root"
# Parse --do-not-restart
ROOT = ""
DO_NOT_RESTART = False
_options = []
for param in options:
    if param.startswith("--do-not-restart"):
        DO_NOT_RESTART = True
    elif param.startswith("--with-root="):
        ROOT = param.split("=")[1]
        if param.startswith('"') and param.endswith('"'):
            ROOT = ROOT.split('"')[1]
        if param.startswith("'") and param.endswith("'"):
            ROOT = ROOT.split("'")[1]
    else:
        _options.append(param)
options = _options

# am I root ?
if os.getuid() != 0:
    print_error("you need to run this as root")
    raise SystemExit(2)

# Variables and constants
keyLocale = sys.argv[1]
xorgConf = ROOT+"/etc/X11/xorg.conf"
confdKeymaps = ROOT+"/etc/conf.d/keymaps"
validComponents = [ "system" , "xorg" , "gnome" , "kde", "xfce" ]

shellKeymap = False
# shell keymap test
for root, dirs, files in os.walk(ROOT+"/usr/share/keymaps"):
    if keyLocale+".map.gz" in files:
        shellKeymap = True

# X.Org keymap test
xorgKeymap = False
xorgKeyVariant = None
xorgKeyLocale = keyLocale
if keyLocale.find("_") != -1:
    xorgKeyLocale = keyLocale.split("_", 1)[1].lower()
    xorgKeyVariant = keyLocale.split("_")[0].lower()

obj = xorgKeyVariant
if xorgKeyVariant is None:
    obj = xorgKeyLocale
for root, dirs, files in os.walk(ROOT+"/usr/share/X11/xkb/symbols"):
    if obj in files:
        xorgKeymap = True
        break

if (not shellKeymap):
    print_warning("shell keymap not available")
if (not xorgKeymap):
    print_warning("X.Org keymap not available")
if (not shellKeymap) and (not xorgKeymap):
    print_error("keymap does not exist")
    raise SystemExit(3)


if os.getenv("DESKTOP_SESSION") is not None:
    DO_NOT_RESTART = True

if len(options) == 2:
    component = sys.argv[2]
    validComponent = False
    if component in validComponents:
        validComponent = True

    if (not validComponent):
        print_error("supplied parameters are invalid")
        raise SystemExit(4)


# Engine functions

vt_keymaps_fixes = {
    'be': 'be-latin1', # also fixed in config
    'bg': 'bg-cp855',
    'jp-jp106': 'jp106',
    'la': 'la-latin1',
    'no_smi': 'no',
    'sk': 'sk-qwerty',
    'se': 'se-lat6',
    'se_smi': 'se-lat6',
    'ch_fr': 'fr_CH',
    'is': 'is-latin1',
    'tj': 'tj_alt-UTF8',
    'tr': 'trq',
    'tr_f': 'trf',
}

vt_keymaps_fixes_us = ['ad', 'af', 'al', 'am', 'ara', 'az', 'ba', 'bd',
    'bt', 'ca', 'cd', 'cs',  'ee', 'epo', 'fi_smi', 'fo', 'fr_oss', 'gb',
    'ge', 'gh', 'hr', 'ie', 'in', 'in_guj', 'in_guru', 'in_kan', 'in_mal',
    'in_tam', 'in_tel', 'iq', 'ir', 'kg', 'kh', 'kr', 'kz', 'lk', 'lv', 'mao',
    'mm', 'mn', 'mt', 'mv', 'ng', 'pk', 'si', 'sy', 'th', 'uz', 'vn', 'za']
for k in vt_keymaps_fixes_us:
    vt_keymaps_fixes[k] = "us"

# VT Shell keymap config
def configureSystemKeymap():
    print_info("Setting up VT terminals keyboard mapping...")
    f = open(confdKeymaps,"r")
    confdKeymapsFile = f.readlines()
    f.close()
    output = []
    sys_key = vt_keymaps_fixes.get(keyLocale, keyLocale)
    for line in confdKeymapsFile:
        if line.startswith("KEYMAP="):
            line = 'KEYMAP="'+sys_key+'"\n'
        if line.startswith("keymap="):
            line = 'keymap="'+sys_key+'"\n'
        output.append(line)
    f = open(confdKeymaps,"w")
    f.writelines(output)
    f.flush()
    f.close()
    if (ROOT == "") and (DO_NOT_RESTART == False):
        os.system("/etc/init.d/keymaps restart --nodeps &> /dev/null")

# xorg.conf keymap config
def configureXorgKeymap():
    print_info("Setting up X.Org keyboard mapping...")

    hal_keymap_file = "10-keymap.fdi"
    hal_keymap_file_dest = "10-keymap.fdi"
    hal_share_dir = ROOT+"/usr/share/hal/fdi/policy/10osvendor"
    hal_etc_dir = ROOT+"/etc/hal/fdi/policy"
    hal_keymap_default_path = os.path.join(hal_share_dir, hal_keymap_file)
    hal_keymap_etc_path = os.path.join(hal_etc_dir, hal_keymap_file_dest)
    # new way
    avail = True
    if not os.access(hal_keymap_etc_path, os.R_OK):
        avail = False
        if os.path.isfile(hal_keymap_etc_path):
            os.remove(hal_keymap_etc_path)
        if os.path.isfile(hal_keymap_default_path) and os.access(hal_keymap_default_path, os.R_OK):
            if not os.path.isdir(hal_etc_dir):
                os.makedirs(hal_etc_dir)
            shutil.copy2(hal_keymap_default_path,hal_keymap_etc_path)
            avail = True

    if avail and os.path.isfile(hal_keymap_etc_path):
        # can't use xml since Hal shit is broken LIKE A SHITTY SHIT
        # it goes nuts due to scrambled element attributes
        #updateHalKeyboardXml(hal_keymap_etc_path, xorgKeyLocale)
        # do it the old way
        f = open(hal_keymap_etc_path,"r")
        content = [x.rstrip() for x in f.readlines()]
        f.close()
        newcontent = []
        for line in content:
            if line.find('<merge key="input.xkb.layout" type="string">') != -1:
                line = '      <merge key="input.xkb.layout" type="string">%s</merge>' % (xorgKeyLocale,)
            if xorgKeyVariant is not None:
                if line.find('<merge key="input.xkb.variant" type="string" />') != -1:
                    line = '      <merge key="input.xkb.variant" type="string">%s</merge>' % (xorgKeyVariant,)

            newcontent.append(line)
        f = open(hal_keymap_etc_path,"w")
        for line in newcontent:
            f.write(line+"\n")
        f.flush()
        f.close()


def updateHalKeyboardXml(hal_keymap_etc_path, mysetting):
    from xml.dom import minidom
    xmldoc = minidom.parse(hal_keymap_etc_path)

    deviceinfo = xmldoc.getElementsByTagName("deviceinfo")
    if deviceinfo: deviceinfo = deviceinfo[0]
    else: return

    device = deviceinfo.getElementsByTagName("device")
    if device: device = device[0]
    else: return

    do_write = False
    matches = device.getElementsByTagName("match")
    for match in matches:
        if not (match.hasAttribute("key") and match.hasAttribute("contains")):
            continue
        if match.getAttribute("contains") != "input.keys":
            continue
        # found it
        merges = match.getElementsByTagName("merge")
        for merge in merges:
            if not (merge.hasAttribute("key") and merge.hasAttribute("type")):
                continue
            if merge.getAttribute("key") != "input.xkb.layout":
                continue
            if merge.getAttribute("type") != "string":
                continue
            merge.firstChild.data = mysetting
            do_write = True
            break
    if do_write:
        f = open(hal_keymap_etc_path,"w")
        xmldoc.writexml(f)
        f.flush()
        f.close()


# KDE keymap config
def configureKDEKeymap():

    def KDEKeymapHandler(xdir, keyLocale):

        data = commands.getoutput("find "+ROOT+"/"+xdir+" -name kxkbrc")
        kxkbrcFiles = data.split("\n")
        if not kxkbrcFiles:
            return
        if kxkbrcFiles[0].find("find:") != -1:
            print_warning("no kxkbrc file(s) in "+xdir)
            return

        for file in kxkbrcFiles:
            file = file.strip()
            if not os.path.isfile(file):
                continue
            print_info("configuring KDE file "+file)
            # Open file and edit
            fstat = os.stat(file)
            uid, gid = fstat.st_uid, fstat.st_gid
            f = open(file,"r")
            kxkbFile = f.readlines()
            f.close()
            f = open(file+".sltmp","w")
            layout_exists = False
            display_names_exists = False
            layout_list_exists = False
            for line in kxkbFile:
                if line.startswith("Layout="):
                    layout_exists = True
                    line = "Layout=%s\n" % (keyLocale,)
                elif line.startswith("DisplayNames="):
                    display_names_exists = True
                    line = "DisplayNames=%s\n" % (keyLocale,)
                elif line.startswith("LayoutList="):
                    layout_list_exists = True
                    line = "LayoutList=%s\n" % (keyLocale,)
                f.write(line)

            if not layout_exists:
                f.write("Layout=%s\n" % (keyLocale,))
            if not display_names_exists:
                f.write("DisplayNames=%s\n" % (keyLocale,))
            if not layout_list_exists:
                f.write("LayoutList=%s\n" % (keyLocale,))

            f.flush()
            f.close()
            os.rename(file+".sltmp",file)
            os.chown(file, uid, gid)

    print_info("Setting up KDE keyboard mapping...")

    # Fix for UK keymap
    if (keyLocale == "uk"):
        kdeKeyLocale = "gb"
    else:
        kdeKeyLocale = keyLocale

    # Change keymap for /home
    KDEKeymapHandler("/home/*/.kde*",kdeKeyLocale)

    # Change keymap for /root
    KDEKeymapHandler("/root/",kdeKeyLocale)

    # Change keymap for /home
    if os.path.isdir(ROOT+"/etc/skel"):
        KDEKeymapHandler("/etc/skel/.kde*",kdeKeyLocale)

# GNOME keymap config
def configureGNOMEKeymap():

    def GNOMEKeymapHandler(dir,keyLocale):
        data = commands.getoutput("find "+ROOT+dir+"/.gconf/desktop/gnome/peripherals/keyboard/kbd/ -name %gconf.xml")
        gconfXmls = data.split("\n")
        findError = False
        if gconfXmls[0].find("find:") != -1:
            findError = True
        if gconfXmls and not findError:
            for file in gconfXmls:
                file = file.strip()
                print_info("configuring GNOME file "+file)
                f = open(file,"r")
                XmlFile = f.readlines()
                f.close()
                newXmlFile = []
                trigger = False
                for line in XmlFile:
                    if (trigger):
                        if line.find("<stringvalue>") != -1:
                            newLine = ""
                            for char in line:
                                if char == ">":
                                    char = ">"+keyLocale+"</stringvalue>"
                                    newLine += char+"\n"
                                    break
                                newLine += char
                            trigger = False
                            line = newLine
                    if line.find("entry name=\"layouts\"") != -1:
                        # found !
                        trigger = True
                    newXmlFile.append(line)

                # write newXmlFile
                f = open(file,"w")
                f.writelines(newXmlFile)
                f.flush()
                f.close()
        else:
            print_warning("no GNOME keyboard configuration file(s) in "+dir)

    print_info("Setting up GNOME keyboard mapping...")
    # Change keymap for /home
    GNOMEKeymapHandler("/home/*",keyLocale)

    # Change keymap for /root
    GNOMEKeymapHandler("/root",keyLocale)

    # Change keymap for /home
    if os.path.isdir(ROOT+"/etc/skel"):
        GNOMEKeymapHandler("/etc/skel", keyLocale)

def configureXFCEKeymap():

    def XFCEKeymapHandler(dir,keyLocale):
        data = commands.getoutput("find "+ROOT+dir+"/.config/xfce4/xfkc/ -name xfkcrc")
        xfce_confs = data.split("\n")
        findError = False
        if xfce_confs[0].find("find:") != -1:
            findError = True
        if xfce_confs and not findError:
            for file in xfce_confs:
                file = file.strip()
                print_info("configuring XFCE file "+file)
                f = open(file,"r")
                xfce_file = f.readlines()
                f.close()
                f = open(file,"w")
                for line in xfce_file:
                        if line.startswith("layouts"):
                                line = "layouts=%s\n" % (keyLocale,)
                        f.write(line)
                f.flush()
                f.close()
        else:
            print_warning("no XFCE keyboard configuration file(s) in "+dir)

    print_info("Setting up XFCE keyboard mapping...")
    # Change keymap for /home
    XFCEKeymapHandler("/home/*",keyLocale)

    # Change keymap for /root
    XFCEKeymapHandler("/root",keyLocale)

    # Change keymap for /home
    if os.path.isdir(ROOT+"/etc/skel"):
        XFCEKeymapHandler("/etc/skel",keyLocale)

if len(options) == 2:
    component = sys.argv[2]
    if component == "system":
        configureSystemKeymap()
    if component == "xorg":
        configureXorgKeymap()
    if component == "gnome":
        configureGNOMEKeymap()
    if component == "kde":
        configureKDEKeymap()
    if component == "xfce":
        configureXFCEKeymap()
elif len(options) == 1:
    # Configure everything
    configureSystemKeymap()
    configureXorgKeymap()
    configureKDEKeymap()
    configureGNOMEKeymap()
    configureXFCEKeymap()

#end
