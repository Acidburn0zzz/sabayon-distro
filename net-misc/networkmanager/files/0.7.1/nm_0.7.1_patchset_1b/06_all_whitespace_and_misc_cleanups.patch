From 553a72c43786c91295c534000da370cabadbda6c Mon Sep 17 00:00:00 2001
From: Dan Williams <dcbw@redhat.com>
Date: Wed, 29 Apr 2009 21:08:02 +0000
Subject: wifi: whitespace and other misc cleanups

---
diff --git a/src/nm-device-wifi.c b/src/nm-device-wifi.c
index 6503dbf..72128f9 100644
--- a/src/nm-device-wifi.c
+++ b/src/nm-device-wifi.c
@@ -96,8 +96,7 @@ enum {
 
 static guint signals[LAST_SIGNAL] = { 0 };
 
-typedef enum
-{
+typedef enum {
 	NM_WIFI_ERROR_CONNECTION_NOT_WIRELESS = 0,
 	NM_WIFI_ERROR_CONNECTION_INVALID,
 	NM_WIFI_ERROR_CONNECTION_INCOMPATIBLE,
@@ -134,46 +133,44 @@ typedef struct Supplicant {
 	GSList *iface_tasks;
 } Supplicant;
 
-struct _NMDeviceWifiPrivate
-{
-	gboolean	dispose_has_run;
+struct _NMDeviceWifiPrivate {
+	gboolean          dispose_has_run;
 
-	struct ether_addr	hw_addr;
+	struct ether_addr hw_addr;
 
-	GByteArray *	ssid;
-	gint8			invalid_strength_counter;
-	iwqual			max_qual;
-	iwqual			avg_qual;
+	GByteArray *      ssid;
+	gint8             invalid_strength_counter;
+	iwqual            max_qual;
 
-	gint8			num_freqs;
-	guint32			freqs[IW_MAX_FREQUENCIES];
+	gint8             num_freqs;
+	guint32           freqs[IW_MAX_FREQUENCIES];
 
-	GSList *        ap_list;
-	NMAccessPoint * current_ap;
-	guint32			rate;
-	gboolean		enabled; /* rfkilled or not */
-	guint			state_to_disconnected_id;
+	GSList *          ap_list;
+	NMAccessPoint *   current_ap;
+	guint32           rate;
+	gboolean          enabled; /* rfkilled or not */
+	guint             state_to_disconnected_id;
 	
-	gboolean			scanning;
-	glong			scheduled_scan_time;
-	guint8			scan_interval; /* seconds */
-	guint               pending_scan_id;
+	gboolean          scanning;
+	glong             scheduled_scan_time;
+	guint8            scan_interval; /* seconds */
+	guint             pending_scan_id;
 
-	Supplicant      supplicant;
+	Supplicant        supplicant;
 
-	guint32         failed_link_count;
-	guint           periodic_source_id;
-	guint           link_timeout_id;
+	guint32           failed_link_count;
+	guint             periodic_source_id;
+	guint             link_timeout_id;
 
 	/* Static options from driver */
-	guint8			we_version;
-	guint32			capabilities;
-	gboolean		has_scan_capa_ssid;
+	guint8            we_version;
+	guint32           capabilities;
+	gboolean          has_scan_capa_ssid;
 };
 
 static guint32 nm_device_wifi_get_frequency (NMDeviceWifi *self);
 
-static void nm_device_wifi_set_ssid (NMDeviceWifi *self, const GByteArray * ssid);
+static void nm_device_wifi_set_ssid (NMDeviceWifi *self, const GByteArray *ssid);
 
 #if DEBUG
 static void nm_device_wifi_ap_list_print (NMDeviceWifi *self);
@@ -181,13 +178,12 @@ static void nm_device_wifi_ap_list_print (NMDeviceWifi *self);
 
 static gboolean request_wireless_scan (gpointer user_data);
 
-static void	schedule_scan (NMDeviceWifi *self, gboolean backoff);
+static void schedule_scan (NMDeviceWifi *self, gboolean backoff);
 
-static void	cancel_pending_scan (NMDeviceWifi *self);
+static void cancel_pending_scan (NMDeviceWifi *self);
 
 static int wireless_qual_to_percent (const struct iw_quality *qual,
-                                     const struct iw_quality *max_qual,
-                                     const struct iw_quality *avg_qual);
+                                     const struct iw_quality *max_qual);
 
 static void cleanup_association_attempt (NMDeviceWifi * self,
                                          gboolean disconnect);
@@ -284,13 +280,11 @@ nm_device_wifi_update_signal_strength (NMDeviceWifi *self,
 
 		wrq.u.data.pointer = &stats;
 		wrq.u.data.length = sizeof (stats);
-		wrq.u.data.flags = 1;		/* Clear updated flag */
+		wrq.u.data.flags = 1;  /* Clear updated flag */
 		strncpy (wrq.ifr_name, iface, IFNAMSIZ);
 
-		if (ioctl (fd, SIOCGIWSTATS, &wrq) == 0) {
-			percent = wireless_qual_to_percent (&stats.qual, (const iwqual *)(&priv->max_qual),
-					(const iwqual *)(&priv->avg_qual));
-		}
+		if (ioctl (fd, SIOCGIWSTATS, &wrq) == 0)
+			percent = wireless_qual_to_percent (&stats.qual, &priv->max_qual);
 		close (fd);
 	}
 
@@ -407,8 +401,8 @@ get_wireless_capabilities (NMDeviceWifi *self,
                            iwrange * range,
                            guint32 data_len)
 {
-	guint32	minlen;
-	guint32	caps = NM_WIFI_DEVICE_CAP_NONE;
+	guint32 minlen;
+	guint32 caps = NM_WIFI_DEVICE_CAP_NONE;
 	const char * iface;
 
 	g_return_val_if_fail (self != NULL, NM_WIFI_DEVICE_CAP_NONE);
@@ -490,26 +484,26 @@ static guint32 iw_freq_to_uint32 (struct iw_freq *freq)
  * need to copy them here.
  */
 /* Scan capability flags - in (struct iw_range *)->scan_capa */
-#define NM_IW_SCAN_CAPA_NONE		0x00
-#define NM_IW_SCAN_CAPA_ESSID		0x01
+#define NM_IW_SCAN_CAPA_NONE    0x00
+#define NM_IW_SCAN_CAPA_ESSID   0x01
 
 struct iw_range_with_scan_capa
 {
-	guint32		throughput;
-	guint32		min_nwid;
-	guint32		max_nwid;
-	guint16		old_num_channels;
-	guint8		old_num_frequency;
+	guint32 throughput;
+	guint32 min_nwid;
+	guint32 max_nwid;
+	guint16 old_num_channels;
+	guint8  old_num_frequency;
 
-	guint8		scan_capa;
+	guint8  scan_capa;
 /* don't need the rest... */
 };
 
 
 static GObject*
 constructor (GType type,
-			 guint n_construct_params,
-			 GObjectConstructParam *construct_params)
+             guint n_construct_params,
+             GObjectConstructParam *construct_params)
 {
 	GObject *object;
 	GObjectClass *klass;
@@ -539,11 +533,6 @@ constructor (GType type,
 	priv->max_qual.noise = range.max_qual.noise;
 	priv->max_qual.updated = range.max_qual.updated;
 
-	priv->avg_qual.qual = range.avg_qual.qual;
-	priv->avg_qual.level = range.avg_qual.level;
-	priv->avg_qual.noise = range.avg_qual.noise;
-	priv->avg_qual.updated = range.avg_qual.updated;
-
 	priv->num_freqs = MIN (range.num_frequency, IW_MAX_FREQUENCIES);
 	for (i = 0; i < priv->num_freqs; i++)
 		priv->freqs[i] = iw_freq_to_uint32 (&range.freq[i]);
@@ -1076,7 +1065,7 @@ real_deactivate_quickly (NMDevice *dev)
 static void
 real_deactivate (NMDevice *dev)
 {
-	NMDeviceWifi *	self = NM_DEVICE_WIFI (dev);
+	NMDeviceWifi *self = NM_DEVICE_WIFI (dev);
 
 	nm_device_wifi_set_mode (self, NM_802_11_MODE_INFRA);
 	/* FIXME: Should we reset the scan interval here? */
@@ -1401,15 +1390,13 @@ nm_device_wifi_get_frequency (NMDeviceWifi *self)
  */
 static int
 wireless_qual_to_percent (const struct iw_quality *qual,
-                          const struct iw_quality *max_qual,
-                          const struct iw_quality *avg_qual)
+                          const struct iw_quality *max_qual)
 {
-	int	percent = -1;
-	int	level_percent = -1;
+	int percent = -1;
+	int level_percent = -1;
 
 	g_return_val_if_fail (qual != NULL, -1);
 	g_return_val_if_fail (max_qual != NULL, -1);
-	g_return_val_if_fail (avg_qual != NULL, -1);
 
 #ifdef IW_QUAL_DEBUG
 nm_debug ("QL: qual %d/%u/0x%X, level %d/%u/0x%X, noise %d/%u/0x%X, updated: 0x%X  ** MAX: qual %d/%u/0x%X, level %d/%u/0x%X, noise %d/%u/0x%X, updated: 0x%X",
@@ -1442,20 +1429,20 @@ max_qual->updated);
 	 * If drivers don't conform to it, they are wrong and need to be fixed.
 	 */
 
-	if (    (max_qual->level == 0) && !(max_qual->updated & IW_QUAL_LEVEL_INVALID)		/* Valid max_qual->level == 0 */
-		&& !(qual->updated & IW_QUAL_LEVEL_INVALID)								/* Must have valid qual->level */
-		&& (    ((max_qual->noise > 0) && !(max_qual->updated & IW_QUAL_NOISE_INVALID))	/* Must have valid max_qual->noise */
-			|| ((qual->noise > 0) && !(qual->updated & IW_QUAL_NOISE_INVALID)))		/*    OR valid qual->noise */
+	if (    (max_qual->level == 0) && !(max_qual->updated & IW_QUAL_LEVEL_INVALID)          /* Valid max_qual->level == 0 */
+		&& !(qual->updated & IW_QUAL_LEVEL_INVALID)                                     /* Must have valid qual->level */
+		&& (    ((max_qual->noise > 0) && !(max_qual->updated & IW_QUAL_NOISE_INVALID)) /* Must have valid max_qual->noise */
+			|| ((qual->noise > 0) && !(qual->updated & IW_QUAL_NOISE_INVALID)))     /*    OR valid qual->noise */
 	   )
 	{
 		/* Absolute power values (dBm) */
 
 		/* Reasonable fallbacks for dumb drivers that don't specify either level. */
-		#define FALLBACK_NOISE_FLOOR_DBM	-90
-		#define FALLBACK_SIGNAL_MAX_DBM	-20
-		int	max_level = FALLBACK_SIGNAL_MAX_DBM;
-		int	noise = FALLBACK_NOISE_FLOOR_DBM;
-		int	level = qual->level - 0x100;
+		#define FALLBACK_NOISE_FLOOR_DBM  -90
+		#define FALLBACK_SIGNAL_MAX_DBM   -20
+		int max_level = FALLBACK_SIGNAL_MAX_DBM;
+		int noise = FALLBACK_NOISE_FLOOR_DBM;
+		int level = qual->level - 0x100;
 
 		level = CLAMP (level, FALLBACK_NOISE_FLOOR_DBM, FALLBACK_SIGNAL_MAX_DBM);
 
@@ -1467,18 +1454,17 @@ max_qual->updated);
 
 		/* A sort of signal-to-noise ratio calculation */
 		level_percent = (int)(100 - 70 *(
-						((double)max_level - (double)level) /
-						((double)max_level - (double)noise)));
+		                                ((double)max_level - (double)level) /
+		                                ((double)max_level - (double)noise)));
 #ifdef IW_QUAL_DEBUG
 		nm_debug ("QL1: level_percent is %d.  max_level %d, level %d, noise_floor %d.", level_percent, max_level, level, noise);
 #endif
-	}
-	else if ((max_qual->level != 0) && !(max_qual->updated & IW_QUAL_LEVEL_INVALID)	/* Valid max_qual->level as upper bound */
-			&& !(qual->updated & IW_QUAL_LEVEL_INVALID))
-	{
+	} else if (   (max_qual->level != 0)
+	           && !(max_qual->updated & IW_QUAL_LEVEL_INVALID) /* Valid max_qual->level as upper bound */
+	           && !(qual->updated & IW_QUAL_LEVEL_INVALID)) {
 		/* Relative power values (RSSI) */
 
-		int	level = qual->level;
+		int level = qual->level;
 
 		/* Signal level is relavtive (0 -> max_qual->level) */
 		level = CLAMP (level, 0, max_qual->level);
@@ -1515,12 +1501,12 @@ const GByteArray *
 nm_device_wifi_get_ssid (NMDeviceWifi *self)
 {
 	NMDeviceWifiPrivate *priv;
-	int	sk;
+	int sk;
 	struct iwreq wrq;
 	char ssid[IW_ESSID_MAX_SIZE + 2];
 	guint32 len;
 
-	g_return_val_if_fail (self != NULL, NULL);	
+	g_return_val_if_fail (self != NULL, NULL);
 	priv = NM_DEVICE_WIFI_GET_PRIVATE (self);
 
 	sk = socket (AF_INET, SOCK_DGRAM, 0);
@@ -1670,7 +1656,7 @@ nm_device_wifi_get_bitrate (NMDeviceWifi *self)
  */
 void
 nm_device_wifi_get_bssid (NMDeviceWifi *self,
-                                     struct ether_addr *bssid)
+                          struct ether_addr *bssid)
 {
 	int fd;
 	struct iwreq wrq;
@@ -1862,8 +1848,8 @@ cancel_pending_scan (NMDeviceWifi *self)
 
 static void
 supplicant_iface_scan_result_cb (NMSupplicantInterface * iface,
-								 gboolean result,
-								 NMDeviceWifi * self)
+                                 gboolean result,
+                                 NMDeviceWifi * self)
 {
 	if (can_scan (self))
 		schedule_scan (self, TRUE);
@@ -1963,7 +1949,7 @@ out:
  */
 static void
 merge_scanned_ap (NMDeviceWifi *self,
-				  NMAccessPoint *merge_ap)
+                  NMAccessPoint *merge_ap)
 {
 	NMDeviceWifiPrivate *priv = NM_DEVICE_WIFI_GET_PRIVATE (self);
 	NMAccessPoint *found_ap = NULL;
@@ -2074,13 +2060,14 @@ cull_scan_list (NMDeviceWifi *self)
 
 static void
 set_ap_strength_from_properties (NMDeviceWifi *self,
-								 NMAccessPoint *ap,
-								 GHashTable *properties)
+                                 NMAccessPoint *ap,
+                                 GHashTable *properties)
 {
 	NMDeviceWifiPrivate *priv = NM_DEVICE_WIFI_GET_PRIVATE (self);
 	int qual, level, noise;
 	struct iw_quality quality;
 	GValue *value;
+	gint8 strength;
 
 	value = (GValue *) g_hash_table_lookup (properties, "quality");
 	qual = value ? g_value_get_int (value) : -1;
@@ -2097,15 +2084,13 @@ set_ap_strength_from_properties (NMDeviceWifi *self,
 	SET_QUALITY_MEMBER (quality, level, LEVEL);
 	SET_QUALITY_MEMBER (quality, noise, NOISE);
 
-	nm_ap_set_strength (ap, wireless_qual_to_percent
-						(&quality,
-						 (const iwqual *)(&priv->max_qual),
-						 (const iwqual *)(&priv->avg_qual)));
+	strength = wireless_qual_to_percent (&quality, &priv->max_qual);
+	nm_ap_set_strength (ap, strength);
 }
 
 static void
 supplicant_iface_scanned_ap_cb (NMSupplicantInterface *iface,
-								GHashTable *properties,
+                                GHashTable *properties,
                                 NMDeviceWifi *self)
 {
 	NMDeviceState state;
@@ -2772,8 +2757,7 @@ build_supplicant_config (NMDeviceWifi *self,
 		goto error;
 	}
 
-	s_wireless_sec = (NMSettingWirelessSecurity *) nm_connection_get_setting (connection,
-															    NM_TYPE_SETTING_WIRELESS_SECURITY);
+	s_wireless_sec = (NMSettingWirelessSecurity *) nm_connection_get_setting (connection, NM_TYPE_SETTING_WIRELESS_SECURITY);
 	if (s_wireless_sec) {
 		DBusGProxy *proxy = g_object_get_data (G_OBJECT (connection), NM_MANAGER_CONNECTION_PROXY_TAG);
 		const char *con_path = dbus_g_proxy_get_path (proxy);
@@ -2781,9 +2765,9 @@ build_supplicant_config (NMDeviceWifi *self,
 
 		s_8021x = (NMSetting8021x *) nm_connection_get_setting (connection, NM_TYPE_SETTING_802_1X);
 		if (!nm_supplicant_config_add_setting_wireless_security (config,
-	                                                             s_wireless_sec,
-	                                                             s_8021x,
-	                                                             con_path)) {
+		                                                         s_wireless_sec,
+		                                                         s_8021x,
+		                                                         con_path)) {
 			nm_warning ("Couldn't add 802-11-wireless-security setting to "
 			            "supplicant config.");
 			goto error;
@@ -2940,18 +2924,18 @@ real_connection_secrets_updated (NMDevice *dev,
 static NMActStageReturn
 real_act_stage2_config (NMDevice *dev, NMDeviceStateReason *reason)
 {
-	NMDeviceWifi * self = NM_DEVICE_WIFI (dev);
+	NMDeviceWifi *self = NM_DEVICE_WIFI (dev);
 	NMDeviceWifiPrivate *priv = NM_DEVICE_WIFI_GET_PRIVATE (self);
-	NMActStageReturn        ret = NM_ACT_STAGE_RETURN_FAILURE;
-	const char *            iface = nm_device_get_iface (dev);
-	NMSupplicantConfig *	config = NULL;
-	gulong                  id = 0;
-	NMActRequest *          req;
-	NMAccessPoint *         ap;
-	NMConnection *          connection;
-	NMSettingConnection *	s_connection;
-	const char *			setting_name;
-	NMSettingWireless *     s_wireless;
+	NMActStageReturn ret = NM_ACT_STAGE_RETURN_FAILURE;
+	const char *iface = nm_device_get_iface (dev);
+	NMSupplicantConfig *config = NULL;
+	gulong id = 0;
+	NMActRequest *req;
+	NMAccessPoint *ap;
+	NMConnection *connection;
+	NMSettingConnection *s_connection;
+	const char *setting_name;
+	NMSettingWireless *s_wireless;
 
 	g_return_val_if_fail (reason != NULL, NM_ACT_STAGE_RETURN_FAILURE);
 
@@ -3079,13 +3063,13 @@ real_act_stage4_ip_config_timeout (NMDevice *dev,
                                    NMIP4Config **config,
                                    NMDeviceStateReason *reason)
 {
-	NMDeviceWifi *	self = NM_DEVICE_WIFI (dev);
-	NMAccessPoint *		ap = nm_device_wifi_get_activation_ap (self);
-	NMActStageReturn		ret = NM_ACT_STAGE_RETURN_FAILURE;
-	NMIP4Config *			real_config = NULL;
-	NMActRequest *          req = nm_device_get_act_request (dev);
-	NMConnection *          connection;
-	gboolean                auth_enforced = FALSE, encrypted = FALSE;
+	NMDeviceWifi *self = NM_DEVICE_WIFI (dev);
+	NMAccessPoint *ap = nm_device_wifi_get_activation_ap (self);
+	NMActStageReturn ret = NM_ACT_STAGE_RETURN_FAILURE;
+	NMIP4Config *real_config = NULL;
+	NMActRequest *req = nm_device_get_act_request (dev);
+	NMConnection *connection;
+	gboolean auth_enforced = FALSE, encrypted = FALSE;
 
 	g_return_val_if_fail (config != NULL, NM_ACT_STAGE_RETURN_FAILURE);
 	g_return_val_if_fail (*config == NULL, NM_ACT_STAGE_RETURN_FAILURE);
@@ -3117,7 +3101,7 @@ real_act_stage4_ip_config_timeout (NMDevice *dev,
 			*reason = NM_DEVICE_STATE_REASON_NO_SECRETS;
 		}
 	} else if (nm_ap_get_mode (ap) == NM_802_11_MODE_ADHOC) {
-		NMDeviceWifiClass *	klass;
+		NMDeviceWifiClass *klass;
 		NMDeviceClass * parent_class;
 
 		/* For Ad-Hoc networks, chain up to parent to get a Zeroconf IP */
@@ -3211,7 +3195,7 @@ activation_failure_handler (NMDevice *dev)
 {
 	NMDeviceWifi *self = NM_DEVICE_WIFI (dev);
 	NMDeviceWifiPrivate *priv = NM_DEVICE_WIFI_GET_PRIVATE (self);
-	NMAccessPoint *	ap;
+	NMAccessPoint *ap;
 	const GByteArray * ssid;
 	NMActRequest *req;
 	NMConnection *connection;
@@ -3317,7 +3301,7 @@ nm_device_wifi_dispose (GObject *object)
 
 static void
 get_property (GObject *object, guint prop_id,
-			  GValue *value, GParamSpec *pspec)
+              GValue *value, GParamSpec *pspec)
 {
 	NMDeviceWifi *device = NM_DEVICE_WIFI (object);
 	NMDeviceWifiPrivate *priv = NM_DEVICE_WIFI_GET_PRIVATE (device);
@@ -3384,79 +3368,79 @@ nm_device_wifi_class_init (NMDeviceWifiClass *klass)
 	parent_class->can_interrupt_activation = real_can_interrupt_activation;
 
 	/* Properties */
-	g_object_class_install_property
-		(object_class, PROP_HW_ADDRESS,
-		 g_param_spec_string (NM_DEVICE_WIFI_HW_ADDRESS,
-							  "MAC Address",
-							  "Hardware MAC address",
-							  NULL,
-							  G_PARAM_READABLE));
-	g_object_class_install_property
-		(object_class, PROP_MODE,
-		 g_param_spec_uint (NM_DEVICE_WIFI_MODE,
-						    "Mode",
-						    "Mode",
-						    NM_802_11_MODE_UNKNOWN, NM_802_11_MODE_INFRA, NM_802_11_MODE_INFRA,
-						    G_PARAM_READABLE));
-	g_object_class_install_property
-		(object_class, PROP_BITRATE,
-		 g_param_spec_uint (NM_DEVICE_WIFI_BITRATE,
-						   "Bitrate",
-						   "Bitrate",
-						   0, G_MAXUINT32, 0,
-						   G_PARAM_READABLE));
-	g_object_class_install_property
-		(object_class, PROP_ACTIVE_ACCESS_POINT,
-		 g_param_spec_boxed (NM_DEVICE_WIFI_ACTIVE_ACCESS_POINT,
-							  "Active access point",
-							  "Currently active access point",
-							  DBUS_TYPE_G_OBJECT_PATH,
-							  G_PARAM_READABLE));
-	g_object_class_install_property
-		(object_class, PROP_CAPABILITIES,
-		 g_param_spec_uint (NM_DEVICE_WIFI_CAPABILITIES,
-							"Wireless Capabilities",
-							"Wireless Capabilities",
-							0, G_MAXUINT32, NM_WIFI_DEVICE_CAP_NONE,
-							G_PARAM_READABLE));
+	g_object_class_install_property (object_class, PROP_HW_ADDRESS,
+		g_param_spec_string (NM_DEVICE_WIFI_HW_ADDRESS,
+		                     "MAC Address",
+		                     "Hardware MAC address",
+		                     NULL,
+		                     G_PARAM_READABLE));
+
+	g_object_class_install_property (object_class, PROP_MODE,
+		g_param_spec_uint (NM_DEVICE_WIFI_MODE,
+		                   "Mode",
+		                   "Mode",
+		                   NM_802_11_MODE_UNKNOWN,
+		                   NM_802_11_MODE_INFRA,
+		                   NM_802_11_MODE_INFRA,
+		                   G_PARAM_READABLE));
+
+	g_object_class_install_property (object_class, PROP_BITRATE,
+		g_param_spec_uint (NM_DEVICE_WIFI_BITRATE,
+		                   "Bitrate",
+		                   "Bitrate",
+		                   0, G_MAXUINT32, 0,
+		                   G_PARAM_READABLE));
+
+	g_object_class_install_property (object_class, PROP_ACTIVE_ACCESS_POINT,
+		g_param_spec_boxed (NM_DEVICE_WIFI_ACTIVE_ACCESS_POINT,
+		                    "Active access point",
+		                    "Currently active access point",
+		                    DBUS_TYPE_G_OBJECT_PATH,
+		                    G_PARAM_READABLE));
+
+	g_object_class_install_property (object_class, PROP_CAPABILITIES,
+		g_param_spec_uint (NM_DEVICE_WIFI_CAPABILITIES,
+		                   "Wireless Capabilities",
+		                   "Wireless Capabilities",
+		                   0, G_MAXUINT32, NM_WIFI_DEVICE_CAP_NONE,
+		                   G_PARAM_READABLE));
 
 	/* Signals */
 	signals[ACCESS_POINT_ADDED] =
 		g_signal_new ("access-point-added",
-					  G_OBJECT_CLASS_TYPE (object_class),
-					  G_SIGNAL_RUN_FIRST,
-					  G_STRUCT_OFFSET (NMDeviceWifiClass, access_point_added),
-					  NULL, NULL,
-					  g_cclosure_marshal_VOID__OBJECT,
-					  G_TYPE_NONE, 1,
-					  G_TYPE_OBJECT);
+		              G_OBJECT_CLASS_TYPE (object_class),
+		              G_SIGNAL_RUN_FIRST,
+		              G_STRUCT_OFFSET (NMDeviceWifiClass, access_point_added),
+		              NULL, NULL,
+		              g_cclosure_marshal_VOID__OBJECT,
+		              G_TYPE_NONE, 1,
+		              G_TYPE_OBJECT);
 
 	signals[ACCESS_POINT_REMOVED] =
 		g_signal_new ("access-point-removed",
-					  G_OBJECT_CLASS_TYPE (object_class),
-					  G_SIGNAL_RUN_FIRST,
-					  G_STRUCT_OFFSET (NMDeviceWifiClass, access_point_removed),
-					  NULL, NULL,
-					  g_cclosure_marshal_VOID__OBJECT,
-					  G_TYPE_NONE, 1,
-					  G_TYPE_OBJECT);
+		              G_OBJECT_CLASS_TYPE (object_class),
+		              G_SIGNAL_RUN_FIRST,
+		              G_STRUCT_OFFSET (NMDeviceWifiClass, access_point_removed),
+		              NULL, NULL,
+		              g_cclosure_marshal_VOID__OBJECT,
+		              G_TYPE_NONE, 1,
+		              G_TYPE_OBJECT);
 
 	signals[HIDDEN_AP_FOUND] =
 		g_signal_new ("hidden-ap-found",
-					  G_OBJECT_CLASS_TYPE (object_class),
-					  G_SIGNAL_RUN_FIRST,
-					  G_STRUCT_OFFSET (NMDeviceWifiClass, hidden_ap_found),
-					  NULL, NULL,
-					  g_cclosure_marshal_VOID__OBJECT,
-					  G_TYPE_NONE, 1,
-					  G_TYPE_OBJECT);
+		              G_OBJECT_CLASS_TYPE (object_class),
+		              G_SIGNAL_RUN_FIRST,
+		              G_STRUCT_OFFSET (NMDeviceWifiClass, hidden_ap_found),
+		              NULL, NULL,
+		              g_cclosure_marshal_VOID__OBJECT,
+		              G_TYPE_NONE, 1,
+		              G_TYPE_OBJECT);
 
 	signals[PROPERTIES_CHANGED] =
 		nm_properties_changed_signal_new (object_class,
-								    G_STRUCT_OFFSET (NMDeviceWifiClass, properties_changed));
+		                                  G_STRUCT_OFFSET (NMDeviceWifiClass, properties_changed));
 
-	dbus_g_object_type_install_info (G_TYPE_FROM_CLASS (klass),
-									 &dbus_glib_nm_device_wifi_object_info);
+	dbus_g_object_type_install_info (G_TYPE_FROM_CLASS (klass), &dbus_glib_nm_device_wifi_object_info);
 
 	dbus_g_error_domain_register (NM_WIFI_ERROR, NULL, NM_TYPE_WIFI_ERROR);
 }
@@ -3539,9 +3523,9 @@ device_state_changed (NMDevice *device,
 
 NMDeviceWifi *
 nm_device_wifi_new (const char *udi,
-						 const char *iface,
-						 const char *driver,
-						 gboolean managed)
+                    const char *iface,
+                    const char *driver,
+                    gboolean managed)
 {
 	GObject *obj;
 
@@ -3550,17 +3534,15 @@ nm_device_wifi_new (const char *udi,
 	g_return_val_if_fail (driver != NULL, NULL);
 
 	obj = g_object_new (NM_TYPE_DEVICE_WIFI,
-					NM_DEVICE_INTERFACE_UDI, udi,
-					NM_DEVICE_INTERFACE_IFACE, iface,
-					NM_DEVICE_INTERFACE_DRIVER, driver,
-					NM_DEVICE_INTERFACE_MANAGED, managed,
-					NULL);
+	                    NM_DEVICE_INTERFACE_UDI, udi,
+	                    NM_DEVICE_INTERFACE_IFACE, iface,
+	                    NM_DEVICE_INTERFACE_DRIVER, driver,
+	                    NM_DEVICE_INTERFACE_MANAGED, managed,
+	                    NULL);
 	if (obj == NULL)
 		return NULL;
 
-	g_signal_connect (obj, "state-changed",
-				   G_CALLBACK (device_state_changed),
-				   NULL);
+	g_signal_connect (obj, "state-changed", G_CALLBACK (device_state_changed), NULL);
 
 	return NM_DEVICE_WIFI (obj);
 }
diff --git a/src/supplicant-manager/nm-supplicant-interface.c b/src/supplicant-manager/nm-supplicant-interface.c
index 2076936..4190c3a 100644
--- a/src/supplicant-manager/nm-supplicant-interface.c
+++ b/src/supplicant-manager/nm-supplicant-interface.c
@@ -57,17 +57,17 @@ static void nm_supplicant_interface_get_property (GObject *      object,
                                                   GValue *       value,
                                                   GParamSpec *   pspec);
 
-static void nm_supplicant_interface_start (NMSupplicantInterface * self);
+static void nm_supplicant_interface_start (NMSupplicantInterface *self);
 
-static void nm_supplicant_interface_add_to_supplicant (NMSupplicantInterface * self,
+static void nm_supplicant_interface_add_to_supplicant (NMSupplicantInterface *self,
                                                        gboolean get_only);
 
-static void nm_supplicant_interface_smgr_state_changed (NMSupplicantManager * smgr,
+static void nm_supplicant_interface_smgr_state_changed (NMSupplicantManager *smgr,
                                                         guint32 new_state,
                                                         guint32 old_state,
                                                         gpointer user_data);
 
-static void nm_supplicant_interface_set_state (NMSupplicantInterface * self,
+static void nm_supplicant_interface_set_state (NMSupplicantInterface *self,
                                                guint32 new_state);
 
 
@@ -145,8 +145,8 @@ typedef struct {
 
 static NMSupplicantInfo *
 nm_supplicant_info_new (NMSupplicantInterface *interface,
-						DBusGProxy *proxy,
-						NMCallStore *store)
+                        DBusGProxy *proxy,
+                        NMCallStore *store)
 {
 	NMSupplicantInfo *info;
 
@@ -288,15 +288,15 @@ try_remove_iface (DBusGConnection * g_connection,
 	DBusGProxy * proxy;
 
 	proxy = dbus_g_proxy_new_for_name (g_connection,
-									   WPAS_DBUS_SERVICE,
-									   WPAS_DBUS_PATH,
-									   WPAS_DBUS_INTERFACE);
+	                                   WPAS_DBUS_SERVICE,
+	                                   WPAS_DBUS_PATH,
+	                                   WPAS_DBUS_INTERFACE);
 	if (!proxy)
 		return;
 
 	dbus_g_proxy_call_no_reply (proxy, "removeInterface", 
-								DBUS_TYPE_G_OBJECT_PATH, path,
-								G_TYPE_INVALID);
+	                            DBUS_TYPE_G_OBJECT_PATH, path,
+	                            G_TYPE_INVALID);
 	g_object_unref (proxy);
 }
 
@@ -474,16 +474,16 @@ bssid_properties_cb  (DBusGProxy *proxy, DBusGProxyCall *call_id, gpointer user_
 	GHashTable *hash = NULL;
 
 	if (!dbus_g_proxy_end_call (proxy, call_id, &err,
-								DBUS_TYPE_G_MAP_OF_VARIANT, &hash,
-								G_TYPE_INVALID)) {
+	                            DBUS_TYPE_G_MAP_OF_VARIANT, &hash,
+	                            G_TYPE_INVALID)) {
 		if (!strstr (err->message, "The BSSID requested was invalid"))
 			nm_warning ("Couldn't retrieve BSSID properties: %s.", err->message);
 		g_error_free (err);
 	} else {
 		g_signal_emit (info->interface,
-					   nm_supplicant_interface_signals[SCANNED_AP],
-					   0,
-					   hash);
+		               nm_supplicant_interface_signals[SCANNED_AP],
+		               0,
+		               hash);
 
 		g_hash_table_destroy (hash);
 	}
@@ -499,15 +499,15 @@ request_bssid_properties (NMSupplicantInterface * self,
 	DBusGProxyCall *call;
 
 	proxy = dbus_g_proxy_new_for_name (nm_dbus_manager_get_connection (priv->dbus_mgr),
-									   WPAS_DBUS_SERVICE,
-									   op,
-									   WPAS_DBUS_IFACE_BSSID);
+	                                   WPAS_DBUS_SERVICE,
+	                                   op,
+	                                   WPAS_DBUS_IFACE_BSSID);
 	info = nm_supplicant_info_new (self, proxy, priv->other_pcalls);
 	call = dbus_g_proxy_begin_call (proxy, "properties",
-									bssid_properties_cb,
-									info,
-									nm_supplicant_info_destroy,
-									G_TYPE_INVALID);
+	                                bssid_properties_cb,
+	                                info,
+	                                nm_supplicant_info_destroy,
+	                                G_TYPE_INVALID);
 	nm_supplicant_info_set_call (info, call);
 	g_object_unref (proxy);
 }
@@ -519,8 +519,8 @@ scan_results_cb (DBusGProxy *proxy, DBusGProxyCall *call_id, gpointer user_data)
 	GPtrArray *array = NULL;
 
 	if (!dbus_g_proxy_end_call (proxy, call_id, &err,
-								DBUS_TYPE_G_ARRAY_OF_OBJECT_PATH, &array,
-								G_TYPE_INVALID)) {
+	                            DBUS_TYPE_G_ARRAY_OF_OBJECT_PATH, &array,
+	                            G_TYPE_INVALID)) {
 		nm_warning ("could not get scan results: %s.", err->message);
 		g_error_free (err);
 	} else {
@@ -529,9 +529,9 @@ scan_results_cb (DBusGProxy *proxy, DBusGProxyCall *call_id, gpointer user_data)
 
 		/* Notify listeners of the result of the scan */
 		g_signal_emit (info->interface,
-					   nm_supplicant_interface_signals[SCAN_RESULT],
-					   0,
-					   TRUE);
+		               nm_supplicant_interface_signals[SCAN_RESULT],
+		               0,
+		               TRUE);
 
 		/* Fire off a "properties" call for each returned BSSID */
 		for (i = 0; i < array->len; i++) {
@@ -559,10 +559,11 @@ request_scan_results (gpointer user_data)
 	g_return_val_if_fail (priv->iface_proxy != NULL, FALSE);
 
 	info = nm_supplicant_info_new (self, priv->iface_proxy, priv->other_pcalls);
-	call = dbus_g_proxy_begin_call (priv->iface_proxy, "scanResults", scan_results_cb, 
-									info,
-									nm_supplicant_info_destroy,
-									G_TYPE_INVALID);
+	call = dbus_g_proxy_begin_call (priv->iface_proxy, "scanResults",
+	                                scan_results_cb, 
+	                                info,
+	                                nm_supplicant_info_destroy,
+	                                G_TYPE_INVALID);
 	nm_supplicant_info_set_call (info, call);
 
 	g_get_current_time (&cur_time);
@@ -581,8 +582,8 @@ wpas_iface_query_scan_results (DBusGProxy *proxy, gpointer user_data)
 
 	/* Only fetch scan results every 4s max, but initially do it right away */
 	priv->scan_results_timeout = g_timeout_add_seconds (priv->last_scan ? 4 : 0,
-	                                            request_scan_results,
-	                                            user_data);
+	                                                    request_scan_results,
+	                                                    user_data);
 }
 
 static guint32
@@ -613,9 +614,9 @@ wpas_state_string_to_enum (const char * str_state)
 
 static void
 wpas_iface_handle_state_change (DBusGProxy *proxy,
-								const char *str_new_state,
-								const char *str_old_state,
-								gpointer user_data)
+                                const char *str_new_state,
+                                const char *str_old_state,
+                                gpointer user_data)
 {
 	NMSupplicantInterfacePrivate *priv = NM_SUPPLICANT_INTERFACE_GET_PRIVATE (user_data);
 	guint32 old_state, enum_new_state;
@@ -640,17 +641,17 @@ iface_state_cb (DBusGProxy *proxy, DBusGProxyCall *call_id, gpointer user_data)
 	char *state_str = NULL;
 
 	if (!dbus_g_proxy_end_call (proxy, call_id, &err,
-								G_TYPE_STRING, &state_str,
-								G_TYPE_INVALID)) {
+	                            G_TYPE_STRING, &state_str,
+	                            G_TYPE_INVALID)) {
 		nm_warning ("could not get interface state: %s.", err->message);
 		g_error_free (err);
 	} else {
 		NMSupplicantInfo *info = (NMSupplicantInfo *) user_data;
+		NMSupplicantInterfacePrivate *priv = NM_SUPPLICANT_INTERFACE_GET_PRIVATE (info->interface);
 
-		NM_SUPPLICANT_INTERFACE_GET_PRIVATE (info->interface)->con_state = wpas_state_string_to_enum (state_str);
+		priv->con_state = wpas_state_string_to_enum (state_str);
 		g_free (state_str);
-		nm_supplicant_interface_set_state (info->interface,
-										   NM_SUPPLICANT_INTERFACE_STATE_READY);
+		nm_supplicant_interface_set_state (info->interface, NM_SUPPLICANT_INTERFACE_STATE_READY);
 	}
 }
 
@@ -662,11 +663,11 @@ wpas_iface_get_state (NMSupplicantInterface *self)
 	DBusGProxyCall *call;
 
 	info = nm_supplicant_info_new (self, priv->iface_proxy, priv->other_pcalls);
-	call = dbus_g_proxy_begin_call (priv->iface_proxy,
-									"state", iface_state_cb, 
-									info,
-									nm_supplicant_info_destroy,
-									G_TYPE_INVALID);
+	call = dbus_g_proxy_begin_call (priv->iface_proxy, "state",
+	                                iface_state_cb,
+	                                info,
+	                                nm_supplicant_info_destroy,
+	                                G_TYPE_INVALID);
 	nm_supplicant_info_set_call (info, call);
 }
 
@@ -678,8 +679,8 @@ nm_supplicant_interface_add_cb (DBusGProxy *proxy, DBusGProxyCall *call_id, gpoi
 	char *path = NULL;
 
 	if (!dbus_g_proxy_end_call (proxy, call_id, &err,
-								DBUS_TYPE_G_OBJECT_PATH, &path,
-								G_TYPE_INVALID)) {
+	                            DBUS_TYPE_G_OBJECT_PATH, &path,
+	                            G_TYPE_INVALID)) {
 
 		if (dbus_g_error_has_name (err, WPAS_ERROR_INVALID_IFACE)) {
 			/* Interface not added, try to add it */
@@ -698,28 +699,28 @@ nm_supplicant_interface_add_cb (DBusGProxy *proxy, DBusGProxyCall *call_id, gpoi
 		priv->object_path = path;
 
 		priv->iface_proxy = dbus_g_proxy_new_for_name (nm_dbus_manager_get_connection (priv->dbus_mgr),
-													   WPAS_DBUS_SERVICE,
-													   path,
-													   WPAS_DBUS_IFACE_INTERFACE);
+		                                               WPAS_DBUS_SERVICE,
+		                                               path,
+		                                               WPAS_DBUS_IFACE_INTERFACE);
 
 		dbus_g_proxy_add_signal (priv->iface_proxy, "ScanResultsAvailable", G_TYPE_INVALID);
 
 		dbus_g_object_register_marshaller (_nm_marshal_VOID__STRING_STRING,
-										   G_TYPE_NONE,
-										   G_TYPE_STRING, G_TYPE_STRING,
-										   G_TYPE_INVALID);
+		                                   G_TYPE_NONE,
+		                                   G_TYPE_STRING, G_TYPE_STRING,
+		                                   G_TYPE_INVALID);
 
 		dbus_g_proxy_add_signal (priv->iface_proxy, "StateChange", G_TYPE_STRING, G_TYPE_STRING, G_TYPE_INVALID);
 
 		dbus_g_proxy_connect_signal (priv->iface_proxy, "ScanResultsAvailable",
-									 G_CALLBACK (wpas_iface_query_scan_results),
-									 info->interface,
-									 NULL);
+		                             G_CALLBACK (wpas_iface_query_scan_results),
+		                             info->interface,
+		                             NULL);
 
 		dbus_g_proxy_connect_signal (priv->iface_proxy, "StateChange",
-									 G_CALLBACK (wpas_iface_handle_state_change),
-									 info->interface,
-									 NULL);
+		                             G_CALLBACK (wpas_iface_handle_state_change),
+		                             info->interface,
+		                             NULL);
 
 		/* Interface added to the supplicant; get its initial state. */
 		wpas_iface_get_state (info->interface);
@@ -736,19 +737,18 @@ nm_supplicant_interface_add_to_supplicant (NMSupplicantInterface * self,
 	DBusGProxyCall *call;
 
 	proxy = dbus_g_proxy_new_for_name (nm_dbus_manager_get_connection (priv->dbus_mgr),
-									   WPAS_DBUS_SERVICE,
-									   WPAS_DBUS_PATH,
-									   WPAS_DBUS_INTERFACE);
+	                                   WPAS_DBUS_SERVICE,
+	                                   WPAS_DBUS_PATH,
+	                                   WPAS_DBUS_INTERFACE);
 	info = nm_supplicant_info_new (self, proxy, priv->other_pcalls);
 
 	if (get_only) {
-		call = dbus_g_proxy_begin_call (proxy,
-										"getInterface",
-										nm_supplicant_interface_add_cb,
-										info,
-										nm_supplicant_info_destroy,
-										G_TYPE_STRING, priv->dev,
-										G_TYPE_INVALID);
+		call = dbus_g_proxy_begin_call (proxy, "getInterface",
+		                                nm_supplicant_interface_add_cb,
+		                                info,
+		                                nm_supplicant_info_destroy,
+		                                G_TYPE_STRING, priv->dev,
+		                                G_TYPE_INVALID);
 	} else {
 		GHashTable *hash = g_hash_table_new (g_str_hash, g_str_equal);
 		GValue *driver;
@@ -758,14 +758,13 @@ nm_supplicant_interface_add_to_supplicant (NMSupplicantInterface * self,
 		g_value_set_string (driver, priv->is_wireless ? "wext" : "wired");
 		g_hash_table_insert (hash, "driver", driver);
 
-		call = dbus_g_proxy_begin_call (proxy,
-										"addInterface",
-										nm_supplicant_interface_add_cb,
-										info,
-										nm_supplicant_info_destroy,
-										G_TYPE_STRING, priv->dev,
-										DBUS_TYPE_G_MAP_OF_VARIANT, hash,
-										G_TYPE_INVALID);
+		call = dbus_g_proxy_begin_call (proxy, "addInterface",
+		                                nm_supplicant_interface_add_cb,
+		                                info,
+		                                nm_supplicant_info_destroy,
+		                                G_TYPE_STRING, priv->dev,
+		                                DBUS_TYPE_G_MAP_OF_VARIANT, hash,
+		                                G_TYPE_INVALID);
 
 		g_value_unset (driver);
 		g_free (driver);
@@ -794,9 +793,8 @@ nm_supplicant_interface_start (NMSupplicantInterface * self)
 		/* Don't do anything; wait for signal from supplicant manager
 		 * that its state has changed.
 		 */
-	} else {
-			nm_warning ("Unknown supplicant manager state!");
-	}
+	} else
+		nm_warning ("Unknown supplicant manager state!");
 }
 
 static void
@@ -936,17 +934,20 @@ nm_supplicant_interface_disconnect (NMSupplicantInterface * self)
 
 	/* Remove any network that was added by NetworkManager */
 	if (priv->net_proxy) {
-		dbus_g_proxy_begin_call (priv->iface_proxy, "removeNetwork", remove_network_cb,
-							NULL, NULL,
-							DBUS_TYPE_G_OBJECT_PATH, dbus_g_proxy_get_path (priv->net_proxy),
-							G_TYPE_INVALID);
+		dbus_g_proxy_begin_call (priv->iface_proxy, "removeNetwork",
+		                         remove_network_cb,
+		                         NULL, NULL,
+		                         DBUS_TYPE_G_OBJECT_PATH, dbus_g_proxy_get_path (priv->net_proxy),
+		                         G_TYPE_INVALID);
 
 		g_object_unref (priv->net_proxy);
 		priv->net_proxy = NULL;
 	}
 
-	dbus_g_proxy_begin_call (priv->iface_proxy, "disconnect", disconnect_cb,
-						NULL, NULL, G_TYPE_INVALID);
+	dbus_g_proxy_begin_call (priv->iface_proxy, "disconnect",
+	                         disconnect_cb,
+	                         NULL, NULL,
+	                         G_TYPE_INVALID);
 }
 
 static void
@@ -967,6 +968,7 @@ static void
 set_network_cb (DBusGProxy *proxy, DBusGProxyCall *call_id, gpointer user_data)
 {
 	NMSupplicantInfo *info = (NMSupplicantInfo *) user_data;
+	NMSupplicantInterfacePrivate *priv = NM_SUPPLICANT_INTERFACE_GET_PRIVATE (info->interface);
 	GError *err = NULL;
 	guint tmp;
 
@@ -975,16 +977,15 @@ set_network_cb (DBusGProxy *proxy, DBusGProxyCall *call_id, gpointer user_data)
 		emit_error_helper (info->interface, err);
 		g_error_free (err);
 	} else {
-		NMSupplicantInterfacePrivate *priv = NM_SUPPLICANT_INTERFACE_GET_PRIVATE (info->interface);
 		DBusGProxyCall *call;
 
-		info = nm_supplicant_info_new (info->interface, priv->iface_proxy,
-									   NM_SUPPLICANT_INTERFACE_GET_PRIVATE (info->interface)->assoc_pcalls);
-		call = dbus_g_proxy_begin_call (priv->iface_proxy, "selectNetwork", select_network_cb,
-										info,
-										nm_supplicant_info_destroy,
-										DBUS_TYPE_G_OBJECT_PATH, dbus_g_proxy_get_path (proxy),
-										G_TYPE_INVALID);
+		info = nm_supplicant_info_new (info->interface, priv->iface_proxy, priv->assoc_pcalls);
+		call = dbus_g_proxy_begin_call (priv->iface_proxy, "selectNetwork",
+		                                select_network_cb,
+		                                info,
+		                                nm_supplicant_info_destroy,
+		                                DBUS_TYPE_G_OBJECT_PATH, dbus_g_proxy_get_path (proxy),
+		                                G_TYPE_INVALID);
 		nm_supplicant_info_set_call (info, call);
 	}
 }
@@ -997,11 +998,12 @@ call_set_network (NMSupplicantInfo *info)
 	DBusGProxyCall *call;
 
 	config_hash = nm_supplicant_config_get_hash (priv->cfg);
-	call = dbus_g_proxy_begin_call (priv->net_proxy, "set", set_network_cb,
-									info,
-									nm_supplicant_info_destroy,
-									DBUS_TYPE_G_MAP_OF_VARIANT, config_hash,
-									G_TYPE_INVALID);
+	call = dbus_g_proxy_begin_call (priv->net_proxy, "set",
+	                                set_network_cb,
+	                                info,
+	                                nm_supplicant_info_destroy,
+	                                DBUS_TYPE_G_MAP_OF_VARIANT, config_hash,
+	                                G_TYPE_INVALID);
 	nm_supplicant_info_set_call (info, call);
 	g_hash_table_destroy (config_hash);
 }
@@ -1010,6 +1012,7 @@ static void
 set_blobs_cb (DBusGProxy *proxy, DBusGProxyCall *call_id, gpointer user_data)
 {
 	NMSupplicantInfo *info = (NMSupplicantInfo *) user_data;
+	NMSupplicantInterfacePrivate *priv = NM_SUPPLICANT_INTERFACE_GET_PRIVATE (info->interface);
 	GError *err = NULL;
 	guint tmp;
 
@@ -1018,10 +1021,7 @@ set_blobs_cb (DBusGProxy *proxy, DBusGProxyCall *call_id, gpointer user_data)
 		emit_error_helper (info->interface, err);
 		g_error_free (err);
 	} else {
-		NMSupplicantInterfacePrivate *priv = NM_SUPPLICANT_INTERFACE_GET_PRIVATE (info->interface);
-
-		info = nm_supplicant_info_new (info->interface, priv->iface_proxy,
-									   NM_SUPPLICANT_INTERFACE_GET_PRIVATE (info->interface)->assoc_pcalls);
+		info = nm_supplicant_info_new (info->interface, priv->iface_proxy, priv->assoc_pcalls);
 		call_set_network (info);
 	}
 }
@@ -1075,11 +1075,12 @@ call_set_blobs (NMSupplicantInfo *info, GHashTable *orig_blobs)
 
 	g_hash_table_foreach (orig_blobs, (GHFunc) convert_blob, blobs);
 
-	call = dbus_g_proxy_begin_call (priv->iface_proxy, "setBlobs", set_blobs_cb,
-									info,
-									nm_supplicant_info_destroy,
-									DBUS_TYPE_G_MAP_OF_VARIANT, blobs,
-									G_TYPE_INVALID);
+	call = dbus_g_proxy_begin_call (priv->iface_proxy, "setBlobs",
+	                                set_blobs_cb,
+	                                info,
+	                                nm_supplicant_info_destroy,
+	                                DBUS_TYPE_G_MAP_OF_VARIANT, blobs,
+	                                G_TYPE_INVALID);
 	nm_supplicant_info_set_call (info, call);
 	g_hash_table_destroy (blobs);
 }
@@ -1092,8 +1093,8 @@ add_network_cb (DBusGProxy *proxy, DBusGProxyCall *call_id, gpointer user_data)
 	char *path = NULL;
 
 	if (!dbus_g_proxy_end_call (proxy, call_id, &err,
-								DBUS_TYPE_G_OBJECT_PATH, &path,
-								G_TYPE_INVALID)) {
+	                            DBUS_TYPE_G_OBJECT_PATH, &path,
+	                            G_TYPE_INVALID)) {
 		nm_warning ("Couldn't add a network to the supplicant interface: %s.", err->message);
 		emit_error_helper (info->interface, err);
 		g_error_free (err);
@@ -1102,9 +1103,9 @@ add_network_cb (DBusGProxy *proxy, DBusGProxyCall *call_id, gpointer user_data)
 		GHashTable *blobs;
 
 		priv->net_proxy = dbus_g_proxy_new_for_name (nm_dbus_manager_get_connection (priv->dbus_mgr),
-													 WPAS_DBUS_SERVICE,
-													 path,
-													 WPAS_DBUS_IFACE_NETWORK);
+		                                             WPAS_DBUS_SERVICE,
+		                                             path,
+		                                             WPAS_DBUS_IFACE_NETWORK);
 		g_free (path);
 
 		info = nm_supplicant_info_new (info->interface,
@@ -1143,10 +1144,11 @@ nm_info ("Config: set interface ap_scan to %d", ap_scan);
 }
 
 	info = nm_supplicant_info_new (info->interface, proxy, info->store);
-	call = dbus_g_proxy_begin_call (proxy, "addNetwork", add_network_cb,
-									info,
-									nm_supplicant_info_destroy,
-									G_TYPE_INVALID);
+	call = dbus_g_proxy_begin_call (proxy, "addNetwork",
+	                                add_network_cb,
+	                                info,
+	                                nm_supplicant_info_destroy,
+	                                G_TYPE_INVALID);
 	nm_supplicant_info_set_call (info, call);
 }
 
@@ -1176,11 +1178,12 @@ nm_supplicant_interface_set_config (NMSupplicantInterface * self,
 
 	info = nm_supplicant_info_new (self, priv->iface_proxy, priv->other_pcalls);
 	ap_scan = nm_supplicant_config_get_ap_scan (priv->cfg);
-	call = dbus_g_proxy_begin_call (priv->iface_proxy, "setAPScan", set_ap_scan_cb,
-									info,
-									nm_supplicant_info_destroy,
-									G_TYPE_UINT, ap_scan,
-									G_TYPE_INVALID);
+	call = dbus_g_proxy_begin_call (priv->iface_proxy, "setAPScan",
+	                                set_ap_scan_cb,
+	                                info,
+	                                nm_supplicant_info_destroy,
+	                                G_TYPE_UINT, ap_scan,
+	                                G_TYPE_INVALID);
 	nm_supplicant_info_set_call (info, call);
 
 	return call != NULL;
@@ -1202,8 +1205,8 @@ scan_request_cb (DBusGProxy *proxy, DBusGProxyCall *call_id, gpointer user_data)
 	guint32 success = 0;
 
 	if (!dbus_g_proxy_end_call (proxy, call_id, &err,
-								G_TYPE_UINT, &success,
-								G_TYPE_INVALID)) {
+	                            G_TYPE_UINT, &success,
+	                            G_TYPE_INVALID)) {
 		nm_warning  ("Could not get scan request result: %s", err->message);
 		g_error_free (err);
 	} 
@@ -1212,7 +1215,7 @@ scan_request_cb (DBusGProxy *proxy, DBusGProxyCall *call_id, gpointer user_data)
 	g_signal_emit (info->interface,
 	               nm_supplicant_interface_signals[SCAN_RESULT],
 	               0,
-				   success ? TRUE : FALSE);
+	               success ? TRUE : FALSE);
 }
 
 gboolean
@@ -1227,10 +1230,11 @@ nm_supplicant_interface_request_scan (NMSupplicantInterface * self)
 	priv = NM_SUPPLICANT_INTERFACE_GET_PRIVATE (self);
 
 	info = nm_supplicant_info_new (self, priv->iface_proxy, priv->other_pcalls);
-	call = dbus_g_proxy_begin_call (priv->iface_proxy, "scan", scan_request_cb, 
-									info,
-									nm_supplicant_info_destroy,
-									G_TYPE_INVALID);
+	call = dbus_g_proxy_begin_call (priv->iface_proxy, "scan",
+	                                scan_request_cb,
+	                                info,
+	                                nm_supplicant_info_destroy,
+	                                G_TYPE_INVALID);
 	nm_supplicant_info_set_call (info, call);
 
 	return call != NULL;
diff --git a/src/supplicant-manager/nm-supplicant-interface.h b/src/supplicant-manager/nm-supplicant-interface.h
index a1253b4..9977d45 100644
--- a/src/supplicant-manager/nm-supplicant-interface.h
+++ b/src/supplicant-manager/nm-supplicant-interface.h
@@ -74,42 +74,40 @@ enum {
 #define NM_IS_SUPPLICANT_INTERFACE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass),  NM_TYPE_SUPPLICANT_INTERFACE))
 #define NM_SUPPLICANT_INTERFACE_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj),  NM_TYPE_SUPPLICANT_INTERFACE, NMSupplicantInterfaceClass))
 
-struct _NMSupplicantInterface
-{
+struct _NMSupplicantInterface {
 	GObject parent;
 };
 
-typedef struct
-{
+typedef struct {
 	GObjectClass parent;
 
 	/* class members */
-	void (* state)            (NMSupplicantInterface * iface,
-	                           guint32 new_state,
-	                           guint32 old_state);
+	void (*state)            (NMSupplicantInterface * iface,
+	                          guint32 new_state,
+	                          guint32 old_state);
 
-	void (* removed)          (NMSupplicantInterface * iface);
+	void (*removed)          (NMSupplicantInterface * iface);
 
-	void (* scanned_ap)       (NMSupplicantInterface * iface,
-	                           DBusMessage * message);
+	void (*scanned_ap)       (NMSupplicantInterface * iface,
+	                          DBusMessage * message);
 
-	void (* scan_result)      (NMSupplicantInterface * iface, gboolean result);
+	void (*scan_result)      (NMSupplicantInterface * iface, gboolean result);
 
-	void (* connection_state) (NMSupplicantInterface * iface,
-	                           guint32 new_state,
-	                           guint32 old_state);
+	void (*connection_state) (NMSupplicantInterface * iface,
+	                          guint32 new_state,
+	                          guint32 old_state);
 
-	void (* connection_error) (NMSupplicantInterface * iface,
-	                           const char * name,
-	                           const char * message);
+	void (*connection_error) (NMSupplicantInterface * iface,
+	                          const char * name,
+	                          const char * message);
 } NMSupplicantInterfaceClass;
 
 
 GType nm_supplicant_interface_get_type (void);
 
 NMSupplicantInterface * nm_supplicant_interface_new (NMSupplicantManager * smgr,
-													 const char *ifname,
-													 gboolean is_wireless);
+                                                     const char *ifname,
+                                                     gboolean is_wireless);
 
 gboolean nm_supplicant_interface_set_config (NMSupplicantInterface * iface,
                                              NMSupplicantConfig * cfg);
--
cgit v0.8.2
