diff --unified --recursive ntfsprogs-2.0.0/ntfsprogs/ntfsclone.c ntfsprogs-2.0.0_new/ntfsprogs/ntfsclone.c
--- ntfsprogs-2.0.0/ntfsprogs/ntfsclone.c	2007-09-20 00:51:09.000000000 +0800
+++ ntfsprogs-2.0.0_new/ntfsprogs/ntfsclone.c	2008-10-01 02:16:32.000000000 +0800
@@ -54,6 +54,9 @@
 #ifdef HAVE_GETOPT_H
 #include <getopt.h>
 #endif
+#ifdef HAVE_TIME_H
+#include <time.h>
+#endif
 
 /*
  * FIXME: ntfsclone do bad things about endians handling. Fix it and remove
@@ -129,6 +132,7 @@
 	u64 stop;
 	int resolution;
 	float unit;
+	time_t initial_time;
 };
 
 typedef struct {
@@ -298,6 +302,7 @@
 #ifdef DEBUG
 		"    -d, --debug            Show debug information\n"
 #endif
+		"    -V, --verbose          Show more status at progress bar\n"
 		"\n"
 		"    If FILE is '-' then send the image to the standard output. If SOURCE is '-'\n"
 		"    and --restore-image is used then read the image from the standard input.\n"
@@ -309,7 +314,7 @@
 
 static void parse_options(int argc, char **argv)
 {
-	static const char *sopt = "-dfhmo:O:rs";
+	static const char *sopt = "-dfhmo:O:rsV";
 	static const struct option lopt[] = {
 #ifdef DEBUG
 		{ "debug",	      no_argument,	 NULL, 'd' },
@@ -323,6 +328,7 @@
 		{ "ignore-fs-check",  no_argument,	 NULL, 'C' },
 		{ "rescue",           no_argument,	 NULL, 'R' },
 		{ "save-image",	      no_argument,	 NULL, 's' },
+		{ "verbose",	      no_argument,	 NULL, 'V' },
 		{ NULL, 0, NULL, 0 }
 	};
 
@@ -368,6 +374,9 @@
 		case 's':
 			opt.save_image++;
 			break;
+		case 'V':
+			opt.verbose++;
+			break;
 		default:
 			err_printf("Unknown option '%s'.\n", argv[optind-1]);
 			usage();
@@ -456,19 +465,49 @@
 	p->stop = stop;
 	p->unit = 100.0 / (stop - start);
 	p->resolution = res;
+	time(&p->initial_time);
 }
 
 
 static void progress_update(struct progress_bar *p, u64 current)
 {
 	float percent = p->unit * current;
+	float speed;
+	char clear_buf = NULL;
+        time_t remained;
+        time_t elapsed;
+        char *format = "%H:%M:%S";
+        char R_time[10], E_time[10];
+        struct tm *Rtm, *Etm;
+
+	/// calculating speed (Megabyte per Min), remained and elapsed time
+	elapsed  = (time(0) - p->initial_time);
+	Etm = gmtime(&elapsed);
+	strftime(E_time, sizeof(E_time), format, Etm);
+	if (elapsed <= 0)
+	    elapsed = 1;
+
+	remained = (time_t)((elapsed/percent*100) - elapsed);
+	Rtm = gmtime(&remained);
+	strftime(R_time, sizeof(R_time), format, Rtm);
+
+	speed = ((image_hdr.cluster_size * current / elapsed ) / 1000000.0 * 60.0);
 
+	/// show the information at cloning
 	if (current != p->stop) {
 		if ((current - p->start) % p->resolution)
 			return;
-		Printf("%6.2f percent completed\r", percent);
-	} else
-		Printf("100.00 percent completed\n");
+		if (opt.verbose)
+			Printf("\r%81c\rElapsed: %s, Remaining: %s, Completed:%6.2f%%, Rate: %6.2fMB/min,", clear_buf, E_time, R_time, percent, (float)(speed));
+		else
+			Printf("%6.2f percent completed\r", percent);
+	} else {
+
+		if (opt.verbose)
+			Printf("\r%81c\rTotal Time: %s, Ave. Rate: %6.1fMB/min, 100.00%% completed!\n", clear_buf, E_time, (float)(speed));
+		else
+			Printf("100.00 percent completed\n");
+	}
 	fflush(msg_out);
 }
 
