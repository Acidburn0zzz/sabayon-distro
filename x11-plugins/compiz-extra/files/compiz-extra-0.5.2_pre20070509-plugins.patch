diff -Nurp extra-plugins.orig/animation/animation.c extra-plugins/animation/animation.c
--- extra-plugins.orig/animation/animation.c	2007-04-08 03:32:31.000000000 +0000
+++ extra-plugins/animation/animation.c	2007-05-10 13:24:38.000000000 +0000
@@ -1515,11 +1515,6 @@ AnimEffectProperties *animEffectProperti
 { \
 	o = &as->opt[(poption)]; \
 	o->name = pname "_random_effects"; \
-	o->shortDesc = N_("Random Effect Pool"); \
-	o->longDesc = \
-			N_("Pool of effects to be chosen from if Random effect is " \
-			   "selected. Click reset to restore full list. If the list " \
-			   "is empty, the default effect will be used."); \
 	o->type = CompOptionTypeList; \
 	o->value.list.type = CompOptionTypeString; \
 	o->value.list.nValue = (nFxChoices) - 2; \
@@ -6794,11 +6789,7 @@ static void animScreenInitOptions(AnimSc
 	o->name = "all_random";
 	//o->group = N_("Misc. Settings");
 	//o->subGroup = N_("");
-	o->shortDesc = N_("Random Animations For All Events");
 	//o->advanced = False;
-	o->longDesc =
-			N_
-			("All effects are chosen randomly, ignoring the selected effect. If None is selected for an event, that event won't be animated.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeBool;
 	o->value.b = ANIM_ALL_RANDOM_DEFAULT;
@@ -6808,8 +6799,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("(Un)Shade");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Rollup Fixed Interior");
-	o->longDesc = N_("Fixed window interior during the Rollup animation.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeBool;
 	o->value.b = ANIM_ROLLUP_FIXED_INTERIOR_DEFAULT;
@@ -6819,10 +6808,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Horizontal Folds");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Number of Horizontal Folds");
-	o->longDesc =
-			N_
-			("The number of horizontal folds that occur in the Horizontal Fold animation.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeInt;
 	o->value.i = ANIM_HORIZONTAL_FOLDS_NUM_FOLDS_DEFAULT;
@@ -6834,10 +6819,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Horizontal Folds");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Horizontal Fold Amplitude");
-	o->longDesc =
-			N_
-			("Amplitude (size of the waves in the fold) of the Horizontal Folds relative to the window width. Negative values fold outward.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_HORIZONTAL_FOLDS_AMP_DEFAULT;
@@ -6850,10 +6831,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Curved Folds");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Curved Fold Amplitude");
-	o->longDesc =
-			N_
-			("Amplitude (size of the waves in the fold) of the curved fold relative to window width. Negative values fold outward.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_CURVED_FOLD_AMP_DEFAULT;
@@ -6866,10 +6843,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Misc. Settings");
 	//o->subGroup = N_("Advanced");
 	//o->advanced = False;
-	o->shortDesc = N_("Animation Time Step");
-	o->longDesc =
-			N_
-			("The amount of time in milliseconds between each render of the animation. The higher the number, the jerkier the movements become.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeInt;
 	o->value.i = ANIM_TIME_STEP_DEFAULT;
@@ -6881,10 +6854,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Misc. Settings");
 	//o->subGroup = N_("Advanced");
 	//o->advanced = False;
-	o->shortDesc = N_("Animation Time Step For Intense Effects");
-	o->longDesc =
-			N_
-			("The amount of time in milliseconds between each render of the intense animation (Ex. Burn, Beam). The higher the number, the jerkier the movements become.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeInt;
 	o->value.i = ANIM_TIME_STEP_INTENSE_DEFAULT;
@@ -6896,8 +6865,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Misc. Settings");
 	//o->subGroup = N_("Advanced");
 	//o->advanced = False;
-	o->shortDesc = N_("Disable Post-processing Effects During Animation");
-	o->longDesc = N_("Disables blur effect during animations.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(ppDisablingName[ANIM_DISABLE_PP_FX_DEFAULT]);
@@ -6909,10 +6876,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Magic Lamp");
 	//o->subGroup = N_("Magic Lamp #1");
 	//o->advanced = False;
-	o->shortDesc = N_("Magic Lamp #1 Grid Y Resolution");
-	o->longDesc =
-			N_
-			("Vertex grid resolution for Magic Lamp #1 (Y dimension only). This is the number of points used to define the curves. The higher the number, the smoother the curves. However there will be a loss of performance (CPU usage increases).");
 	//o->displayHints = "";
 	o->type = CompOptionTypeInt;
 	o->value.i = ANIM_MAGIC_LAMP1_GRID_RES_DEFAULT;
@@ -6924,8 +6887,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Magic Lamp");
 	//o->subGroup = N_("Magic Lamp #1");
 	//o->advanced = False;
-	o->shortDesc = N_("Magic Lamp #1 Max Waves");
-	o->longDesc = N_("The maximum number of waves for Magic Lamp #1.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeInt;
 	o->value.i = ANIM_MAGIC_LAMP1_MAX_WAVES_DEFAULT;
@@ -6937,10 +6898,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Magic Lamp");
 	//o->subGroup = N_("Magic Lamp #1");
 	//o->advanced = False;
-	o->shortDesc = N_("Magic Lamp #1 Wave Min Amplitude");
-	o->longDesc =
-			N_
-			("The minimum amplitude (size of the waves) Magic Lamp #1 will have.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_MAGIC_LAMP1_WAVE_AMP_MIN_DEFAULT;
@@ -6953,10 +6910,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Magic Lamp");
 	//o->subGroup = N_("Magic Lamp #1");
 	//o->advanced = False;
-	o->shortDesc = N_("Magic Lamp #1 Wave Max Amplitude");
-	o->longDesc =
-			N_
-			("The maxmimum amplitude (size of the waves) Magic Lamp #1 will have.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_MAGIC_LAMP1_WAVE_AMP_MAX_DEFAULT;
@@ -6969,10 +6922,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Magic Lamp");
 	//o->subGroup = N_("Magic Lamp #1");
 	//o->advanced = False;
-	o->shortDesc = N_("Magic Lamp #1 Create Start Width");
-	o->longDesc =
-			N_
-			("Starting width of create effect and ending width of close effect for Magic Lamp #1.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeInt;
 	o->value.i = ANIM_MAGIC_LAMP1_CREATE_START_WIDTH_DEFAULT;
@@ -6984,10 +6933,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Magic Lamp");
 	//o->subGroup = N_("Magic Lamp #2");
 	//o->advanced = False;
-	o->shortDesc = N_("Magic Lamp #2 Grid Y Resolution");
-	o->longDesc =
-			N_
-			("Vertex grid resolution for Magic Lamp #2 (Y dimension only). This is the number of points used to define the curves. The higher the number, the smoother the curves. However there will be a loss of performance (CPU usage increases).");
 	//o->displayHints = "";
 	o->type = CompOptionTypeInt;
 	o->value.i = ANIM_MAGIC_LAMP2_GRID_RES_DEFAULT;
@@ -6999,8 +6944,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Magic Lamp");
 	//o->subGroup = N_("Magic Lamp #2");
 	//o->advanced = False;
-	o->shortDesc = N_("Magic Lamp #2 Max Waves");
-	o->longDesc = N_("The maximum number of waves for Magic Lamp #2.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeInt;
 	o->value.i = ANIM_MAGIC_LAMP2_MAX_WAVES_DEFAULT;
@@ -7012,10 +6955,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Magic Lamp");
 	//o->subGroup = N_("Magic Lamp #2");
 	//o->advanced = False;
-	o->shortDesc = N_("Magic Lamp #2 Wave Min Amplitude");
-	o->longDesc =
-			N_
-			("The minimum amplitude (size of the waves) Magic Lamp #2 will have.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_MAGIC_LAMP2_WAVE_AMP_MIN_DEFAULT;
@@ -7028,10 +6967,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Magic Lamp");
 	//o->subGroup = N_("Magic Lamp #2");
 	//o->advanced = False;
-	o->shortDesc = N_("Magic Lamp #2 Wave Max Amplitude");
-	o->longDesc =
-			N_
-			("The maxmimum amplitude (size of the waves) Magic Lamp #2 will have.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_MAGIC_LAMP2_WAVE_AMP_MAX_DEFAULT;
@@ -7044,10 +6979,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Magic Lamp");
 	//o->subGroup = N_("Magic Lamp #2");
 	//o->advanced = False;
-	o->shortDesc = N_("Magic Lamp #2 Create Start Width");
-	o->longDesc =
-			N_
-			("Starting width of create effect and ending width of close effect for Magic Lamp #2.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeInt;
 	o->value.i = ANIM_MAGIC_LAMP2_CREATE_START_WIDTH_DEFAULT;
@@ -7059,10 +6990,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Magic Lamp");
 	//o->subGroup = N_("Magic Lamp #3");
 	//o->advanced = False;
-	o->shortDesc = N_("Magic Lamp #3 Grid Y Resolution");
-	o->longDesc =
-			N_
-			("Vertex grid resolution for Magic Lamp #3 (Y dimension only). This is the number of points used to define the curves. The higher the number, the smoother the curves. However there will be a loss of performance (CPU usage increases).");
 	//o->displayHints = "";
 	o->type = CompOptionTypeInt;
 	o->value.i = ANIM_MAGIC_LAMP3_GRID_RES_DEFAULT;
@@ -7074,8 +7001,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Magic Lamp");
 	//o->subGroup = N_("Magic Lamp #3");
 	//o->advanced = False;
-	o->shortDesc = N_("Magic Lamp #3 Max Waves");
-	o->longDesc = N_("The maximum number of waves for Magic Lamp #3.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeInt;
 	o->value.i = ANIM_MAGIC_LAMP3_MAX_WAVES_DEFAULT;
@@ -7087,10 +7012,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Magic Lamp");
 	//o->subGroup = N_("Magic Lamp #3");
 	//o->advanced = False;
-	o->shortDesc = N_("Magic Lamp #3 Wave Min Amplitude");
-	o->longDesc =
-			N_
-			("The minimum amplitude (size of the waves) Magic Lamp #3 will have.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_MAGIC_LAMP3_WAVE_AMP_MIN_DEFAULT;
@@ -7103,10 +7024,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Magic Lamp");
 	//o->subGroup = N_("Magic Lamp #3");
 	//o->advanced = False;
-	o->shortDesc = N_("Magic Lamp #3 Wave Max Amplitude");
-	o->longDesc =
-			N_
-			("The maxmimum amplitude (size of the waves) Magic Lamp #3 will have.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_MAGIC_LAMP3_WAVE_AMP_MAX_DEFAULT;
@@ -7119,10 +7036,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Magic Lamp");
 	//o->subGroup = N_("Magic Lamp #3");
 	//o->advanced = False;
-	o->shortDesc = N_("Magic Lamp #3 Create Start Width");
-	o->longDesc =
-			N_
-			("Starting width of create effect and ending width of close effect for Magic Lamp #3.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeInt;
 	o->value.i = ANIM_MAGIC_LAMP3_CREATE_START_WIDTH_DEFAULT;
@@ -7134,9 +7047,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Wave");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Wave Width");
-	o->longDesc =
-			N_("The width of the wave relative to the window height.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_WAVE_WIDTH_DEFAULT;
@@ -7149,10 +7059,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Wave");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Wave Amplitude");
-	o->longDesc =
-			N_
-			("The wave amplitude (size of the waves) relative to the window height.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_WAVE_AMP_DEFAULT;
@@ -7165,10 +7071,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Zoom/Sidekick");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Sidekick Number of Rotations");
-	o->longDesc =
-			N_
-			("The number of rotations plus or minus 10% (for randomness) that Sidekick has.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_SIDEKICK_NUM_ROTATIONS_DEFAULT;
@@ -7181,10 +7083,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Zoom/Sidekick");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Zoom from Center");
-	o->longDesc =
-			N_
-			("Zoom from center when playing the Zoom and Sidekick animations.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(zoomFromCenterOption[ANIM_ZOOM_FROM_CENTER_DEFAULT]);
@@ -7196,10 +7094,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Zoom/Sidekick");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Zoom Curvature");
-	o->longDesc =
-			N_
-			("The amount of curvedness of the zoom motion.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_ZOOM_CURVATURE_DEFAULT;
@@ -7214,8 +7108,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("(Un)Minimize");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Minimize Animation");
-	o->longDesc = N_("The animation shown when minimizing a window.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(allEffectName[ANIM_MINIMIZE_DEFAULT]);
@@ -7227,8 +7119,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("(Un)Minimize");
 	//o->subGroup = N_("Minimize");
 	//o->advanced = False;
-	o->shortDesc = N_("Window Types");
-	o->longDesc = N_("The window types that will be animated.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeList;
 	o->value.list.type = CompOptionTypeString;
@@ -7247,10 +7137,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("(Un)Minimize");
 	//o->subGroup = N_("Minimize");
 	//o->advanced = False;
-	o->shortDesc = N_("Animation Duration");
-	o->longDesc =
-			N_
-			("The number of seconds that the Minimize animation will last.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_MINIMIZE_DURATION_DEFAULT;
@@ -7276,8 +7162,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("(Un)Minimize");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Unminimize Animation");
-	o->longDesc = N_("The animation shown when unminimizing a window.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(allEffectName[ANIM_UNMINIMIZE_DEFAULT]);
@@ -7289,8 +7173,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("(Un)Minimize");
 	//o->subGroup = N_("Unminimize");
 	//o->advanced = False;
-	o->shortDesc = N_("Window Types");
-	o->longDesc = N_("The window types that will be animated.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeList;
 	o->value.list.type = CompOptionTypeString;
@@ -7309,10 +7191,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("(Un)Minimize");
 	//o->subGroup = N_("Unminimize");
 	//o->advanced = False;
-	o->shortDesc = N_("Animation Duration");
-	o->longDesc =
-			N_
-			("The number of seconds that the Unminimize animation will last.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_UNMINIMIZE_DURATION_DEFAULT;
@@ -7338,8 +7216,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Close");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Close #1 Animation");
-	o->longDesc = N_("The animation shown when closing a window.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(allEffectName[ANIM_CLOSE1_DEFAULT]);
@@ -7351,8 +7227,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Close");
 	//o->subGroup = N_("Close #1");
 	//o->advanced = False;
-	o->shortDesc = N_("Window Types");
-	o->longDesc = N_("The window types that will be animated.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeList;
 	o->value.list.type = CompOptionTypeString;
@@ -7371,10 +7245,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Close");
 	//o->subGroup = N_("Close #1");
 	//o->advanced = False;
-	o->shortDesc = N_("Animation Duration");
-	o->longDesc =
-			N_
-			("The number of seconds that the Close #1 animation will last.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_CLOSE1_DURATION_DEFAULT;
@@ -7400,8 +7270,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Close");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Close #2 Animation");
-	o->longDesc = N_("The animation shown when closing a window.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(allEffectName[ANIM_CLOSE2_DEFAULT]);
@@ -7413,8 +7281,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Close");
 	//o->subGroup = N_("Close #2");
 	//o->advanced = False;
-	o->shortDesc = N_("Window Types");
-	o->longDesc = N_("The window types that will be animated.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeList;
 	o->value.list.type = CompOptionTypeString;
@@ -7433,10 +7299,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Close");
 	//o->subGroup = N_("Close #2");
 	//o->advanced = False;
-	o->shortDesc = N_("Animation Duration");
-	o->longDesc =
-			N_
-			("The number of seconds that the Close #2 animation will last.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_CLOSE2_DURATION_DEFAULT;
@@ -7462,8 +7324,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Create");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Create #1 Animation");
-	o->longDesc = N_("The animation shown when creating a window.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(allEffectName[ANIM_CREATE1_DEFAULT]);
@@ -7475,10 +7335,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Create");
 	//o->subGroup = N_("Create #1");
 	//o->advanced = False;
-	o->shortDesc = N_("Window Types");
-	o->longDesc =
-			N_
-			("Window types that should animate with this effect when created.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeList;
 	o->value.list.type = CompOptionTypeString;
@@ -7497,8 +7353,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Create");
 	//o->subGroup = N_("Create #1");
 	//o->advanced = False;
-	o->shortDesc = N_("Animation Duration");
-	o->longDesc = N_("Animation duration in seconds for create effect #1.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_CREATE1_DURATION_DEFAULT;
@@ -7524,8 +7378,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Create");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Create #2 Animation");
-	o->longDesc = N_("The animation shown when creating a window.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(allEffectName[ANIM_CREATE2_DEFAULT]);
@@ -7537,10 +7389,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Create");
 	//o->subGroup = N_("Create #2");
 	//o->advanced = False;
-	o->shortDesc = N_("Window Types");
-	o->longDesc =
-			N_
-			("Window types that should animate with this effect when created.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeList;
 	o->value.list.type = CompOptionTypeString;
@@ -7559,8 +7407,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Create");
 	//o->subGroup = N_("Create #2");
 	//o->advanced = False;
-	o->shortDesc = N_("Animation Duration");
-	o->longDesc = N_("Animation duration in seconds for create effect #2.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_CREATE2_DURATION_DEFAULT;
@@ -7586,8 +7432,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Focus");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Animation");
-	o->longDesc = N_("Focus window effect.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(allEffectName[ANIM_FOCUS_DEFAULT]);
@@ -7599,10 +7443,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Focus");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Window Types");
-	o->longDesc =
-			N_
-			("Window types that should animate with this effect when focused.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeList;
 	o->value.list.type = CompOptionTypeString;
@@ -7621,8 +7461,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Focus");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Animation Duration");
-	o->longDesc = N_("Focus animation duration in seconds.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_FOCUS_DURATION_DEFAULT;
@@ -7637,8 +7475,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("(Un)Shade");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Shade Animation");
-	o->longDesc = N_("Shade window effect.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(allEffectName[ANIM_SHADE_DEFAULT]);
@@ -7650,10 +7486,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("(Un)Shade");
 	//o->subGroup = N_("Shade");
 	//o->advanced = False;
-	o->shortDesc = N_("Window Types");
-	o->longDesc =
-			N_
-			("Window types that should animate with this effect when shaded.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeList;
 	o->value.list.type = CompOptionTypeString;
@@ -7672,8 +7504,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("(Un)Shade");
 	//o->subGroup = N_("Shade");
 	//o->advanced = False;
-	o->shortDesc = N_("Animation Duration");
-	o->longDesc = N_("Shade animation duration in seconds.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_SHADE_DURATION_DEFAULT;
@@ -7699,8 +7529,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("(Un)Shade");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Unshade Animation");
-	o->longDesc = N_("Unshade window effect.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(allEffectName[ANIM_UNSHADE_DEFAULT]);
@@ -7712,10 +7540,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("(Un)Shade");
 	//o->subGroup = N_("Unshade");
 	//o->advanced = False;
-	o->shortDesc = N_("Window Types");
-	o->longDesc =
-			N_
-			("Window types that should animate with this effect when unshaded.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeList;
 	o->value.list.type = CompOptionTypeString;
@@ -7734,8 +7558,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("(Un)Shade");
 	//o->subGroup = N_("Unshade");
 	//o->advanced = False;
-	o->shortDesc = N_("Animation Duration");
-	o->longDesc = N_("Unshade animation duration in seconds.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_UNSHADE_DURATION_DEFAULT;
@@ -7761,8 +7583,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Fire (A.K.A Burn)");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Number Of Fire Particles");
-	o->longDesc = N_("Number of fire particles.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeInt;
 	o->value.i = ANIM_FIRE_PARTICLES_DEFAULT;
@@ -7774,8 +7594,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Fire (A.K.A Burn)");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Fire Particle Size");
-	o->longDesc = N_("Fire particle size.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_FIRE_SIZE_DEFAULT;
@@ -7788,8 +7606,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Fire (A.K.A Burn)");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Fire Particle Slowdown");
-	o->longDesc = N_("Fire particle slowdown.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_FIRE_SLOWDOWN_DEFAULT;
@@ -7802,8 +7618,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Fire (A.K.A Burn)");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Fire Particle Life");
-	o->longDesc = N_("Fire particle life.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_FIRE_LIFE_DEFAULT;
@@ -7816,8 +7630,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Fire (A.K.A Burn)");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Fire Particle Color");
-	o->longDesc = N_("Fire particle color.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeColor;
 	o->value.c[0] = ANIM_FIRE_COLOR_RED_DEFAULT;
@@ -7830,8 +7642,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Fire (A.K.A Burn)");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Fire direction");
-	o->longDesc = N_("Fire direction.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(animDirectionName[ANIM_FIRE_DIRECTION_DEFAULT]);
@@ -7843,9 +7653,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Fire (A.K.A Burn)");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Fire constant speed");
-	o->longDesc =
-			N_("Make fire effect duration be dependent on window height.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeBool;
 	o->value.b = ANIM_FIRE_CONSTANT_SPEED_DEFAULT;
@@ -7855,8 +7662,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Fire (A.K.A Burn)");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Fire Smoke");
-	o->longDesc = N_("Fire smoke.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeBool;
 	o->value.b = ANIM_FIRE_SMOKE_DEFAULT;
@@ -7866,10 +7671,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Fire (A.K.A Burn)");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Randomly Colored Fire");
-	o->longDesc =
-			N_
-			("Have random colors for the fire effect, also known as Mystical Fire.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeBool;
 	o->value.b = ANIM_FIRE_MYSTICAL_DEFAULT;
@@ -7881,8 +7682,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Beam");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Beam Width");
-	o->longDesc = N_("Beam width.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_BEAMUP_SIZE_DEFAULT;
@@ -7895,8 +7694,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Beam");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Beam spacing");
-	o->longDesc = N_("Spacing between beams.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeInt;
 	o->value.i = ANIM_BEAMUP_SPACING_DEFAULT;
@@ -7908,8 +7705,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Beam");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Beam Color");
-	o->longDesc = N_("Beam color.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeColor;
 	o->value.c[0] = ANIM_BEAMUP_COLOR_RED_DEFAULT;
@@ -7922,8 +7717,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Beam");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Beam Slowdown");
-	o->longDesc = N_("Beam slowdown.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_BEAMUP_SLOWDOWN_DEFAULT;
@@ -7936,8 +7729,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Beam");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Beam Life");
-	o->longDesc = N_("Beam life.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_BEAMUP_LIFE_DEFAULT;
@@ -7952,8 +7743,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Domino/Razr");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Domino Piece Falling Direction");
-	o->longDesc = N_("Falling direction for Domino pieces.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(animDirectionName[ANIM_DOMINO_DIRECTION_DEFAULT]);
@@ -7965,8 +7754,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Domino/Razr");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Razr Fold Opening Direction");
-	o->longDesc = N_("Fold opening direction for pieces in Razr effect.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(animDirectionName[ANIM_RAZR_DIRECTION_DEFAULT]);
@@ -7979,8 +7766,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Explode");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Thickness of Exploding Polygons");
-	o->longDesc = N_("Thickness of exploding window pieces.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_EXPLODE3D_THICKNESS_DEFAULT;
@@ -7993,8 +7778,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Explode");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Window Grid Width");
-	o->longDesc = N_("The exploding window will be split into pieces along a grid.  Specify the width, in pixels, of the columns in the grid.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeInt;
 	o->value.i = ANIM_EXPLODE3D_GRIDSIZE_X_DEFAULT;
@@ -8006,8 +7789,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Explode");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Window Grid Height");
-	o->longDesc = N_("The exploding window will be split into pieces along a grid.  Specify the height, in pixels, of the rows in the grid.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeInt;
 	o->value.i = ANIM_EXPLODE3D_GRIDSIZE_Y_DEFAULT;
@@ -8019,8 +7800,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Explode");
 	//o->subGroup = N_("");
 	//o->advanced = False;
-	o->shortDesc = N_("Tessellation Type");
-	o->longDesc = N_("Tessellation type for exploding window pieces.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(animDirectionName[ANIM_EXPLODE3D_TESS_DEFAULT]);
@@ -8034,10 +7813,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Glide");
 	//o->subGroup = N_("Glide 1");
 	//o->advanced = False;
-	o->shortDesc = N_("Away Position");
-	o->longDesc = N_("Closeness of window to camera at the end of the "
-					 "animation "
-					 "(1.0: Close to camera, -2.0: Away from camera).");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_GLIDE1_AWAY_POS_DEFAULT;
@@ -8050,8 +7825,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Glide");
 	//o->subGroup = N_("Glide 1");
 	//o->advanced = False;
-	o->shortDesc = N_("Away Angle");
-	o->longDesc = N_("Angle of window at the end of the animation.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_GLIDE1_AWAY_ANGLE_DEFAULT;
@@ -8064,10 +7837,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Glide");
 	//o->subGroup = N_("Glide 1");
 	//o->advanced = False;
-	o->shortDesc = N_("Thickness");
-	o->longDesc = N_("Window thickness in pixels. Setting this to larger "
-					 "than 0 will disable shadow, blur, and reflection "
-					 "during the animation.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_GLIDE1_THICKNESS_DEFAULT;
@@ -8082,10 +7851,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Glide");
 	//o->subGroup = N_("Glide 2");
 	//o->advanced = False;
-	o->shortDesc = N_("Away Position");
-	o->longDesc = N_("Closeness of window to camera at the end of the "
-					 "animation "
-					 "(1.0: Close to camera, -2.0: Away from camera).");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_GLIDE2_AWAY_POS_DEFAULT;
@@ -8098,8 +7863,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Glide");
 	//o->subGroup = N_("Glide 2");
 	//o->advanced = False;
-	o->shortDesc = N_("Away Angle");
-	o->longDesc = N_("Angle of window at the end of the animation.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_GLIDE2_AWAY_ANGLE_DEFAULT;
@@ -8112,10 +7875,6 @@ static void animScreenInitOptions(AnimSc
 	//o->group = N_("Glide");
 	//o->subGroup = N_("Glide 2");
 	//o->advanced = False;
-	o->shortDesc = N_("Thickness");
-	o->longDesc = N_("Window thickness in pixels. Setting this to larger "
-					 "than 0 will disable shadow, blur, and reflection "
-					 "during the animation.");
 	//o->displayHints = "";
 	o->type = CompOptionTypeFloat;
 	o->value.f = ANIM_GLIDE2_THICKNESS_DEFAULT;
diff -Nurp extra-plugins.orig/bench/bench_options.c extra-plugins/bench/bench_options.c
--- extra-plugins.orig/bench/bench_options.c	2007-04-03 13:41:53.000000000 +0000
+++ extra-plugins/bench/bench_options.c	2007-05-10 13:33:23.000000000 +0000
@@ -221,8 +221,6 @@ CompOption * benchGetDisplayOption(CompD
 
 	o = &od->opt[BenchDisplayOptionInitiate];
 	o->name = "initiate";
-	o->shortDesc = N_("Initiate");
-	o->longDesc = N_("Start benchmark");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
@@ -239,22 +237,16 @@ XStringToKeysym(BENCH_INITIATE_KEY_DEFAU
 
 	o = &od->opt[BenchDisplayOptionDisableLimiter];
 	o->name = "disable_limiter";
-	o->shortDesc = N_("Disable limiter");
-	o->longDesc = N_("Disable beryl integrated FPS limiter");
 	o->type = CompOptionTypeBool;
 	o->value.b = BENCH_DISABLE_LIMITER_DEFAULT;
 
 	o = &od->opt[BenchDisplayOptionOutputScreen];
 	o->name = "output_screen";
-	o->shortDesc = N_("Enable");
-	o->longDesc = N_("Display FPS on screen");
 	o->type = CompOptionTypeBool;
 	o->value.b = BENCH_OUTPUT_SCREEN_DEFAULT;
 
 	o = &od->opt[BenchDisplayOptionPositionX];
 	o->name = "position_x";
-	o->shortDesc = N_("X position");
-	o->longDesc = N_("X Position of benchmark window");
 	o->type = CompOptionTypeInt;
 	o->value.i = BENCH_POSITION_X_DEFAULT;
 	o->rest.i.min = BENCH_POSITION_X_MIN;
@@ -262,8 +254,6 @@ XStringToKeysym(BENCH_INITIATE_KEY_DEFAU
 
 	o = &od->opt[BenchDisplayOptionPositionY];
 	o->name = "position_y";
-	o->shortDesc = N_("Y position");
-	o->longDesc = N_("Y Position of benchmark window");
 	o->type = CompOptionTypeInt;
 	o->value.i = BENCH_POSITION_Y_DEFAULT;
 	o->rest.i.min = BENCH_POSITION_Y_MIN;
@@ -271,15 +261,11 @@ XStringToKeysym(BENCH_INITIATE_KEY_DEFAU
 
 	o = &od->opt[BenchDisplayOptionOutputConsole];
 	o->name = "output_console";
-	o->shortDesc = N_("Enable");
-	o->longDesc = N_("Print FPS to console");
 	o->type = CompOptionTypeBool;
 	o->value.b = BENCH_OUTPUT_CONSOLE_DEFAULT;
 
 	o = &od->opt[BenchDisplayOptionConsoleUpdateTime];
 	o->name = "console_update_time";
-	o->shortDesc = N_("Update time");
-	o->longDesc = N_("Console output update time");
 	o->type = CompOptionTypeInt;
 	o->value.i = BENCH_CONSOLE_UPDATE_TIME_DEFAULT;
 	o->rest.i.min = BENCH_CONSOLE_UPDATE_TIME_MIN;
diff -Nurp extra-plugins.orig/bs/bs.c extra-plugins/bs/bs.c
--- extra-plugins.orig/bs/bs.c	2007-04-06 12:44:25.000000000 +0000
+++ extra-plugins/bs/bs.c	2007-05-10 13:14:30.000000000 +0000
@@ -292,8 +292,6 @@ BSDisplayInitOptions (BSDisplay * bd)
 
     o = &bd->opt[BS_DISPLAY_OPTION_SATURATION_INCREASE];
     o->name = "saturation_increase";
-    o->shortDesc = N_("Increase Saturation");
-    o->longDesc = N_("Increase Saturation");
     o->type = CompOptionTypeAction;
     o->value.action.initiate = increaseSaturation;
     o->value.action.terminate = 0;
@@ -308,8 +306,6 @@ BSDisplayInitOptions (BSDisplay * bd)
 
     o = &bd->opt[BS_DISPLAY_OPTION_SATURATION_DECREASE];
     o->name = "saturation_decrease";
-    o->shortDesc = N_("Decrease Saturation");
-    o->longDesc = N_("Decrease Saturation");
     o->type = CompOptionTypeAction;
     o->value.action.initiate = decreaseSaturation;
     o->value.action.terminate = 0;
@@ -324,8 +320,6 @@ BSDisplayInitOptions (BSDisplay * bd)
 
     o = &bd->opt[BS_DISPLAY_OPTION_BRIGHTNESS_INCREASE];
     o->name = "brightness_increase";
-    o->shortDesc = N_("Increase Brightness");
-    o->longDesc = N_("Increase Brightness");
     o->type = CompOptionTypeAction;
     o->value.action.initiate = increaseBrightness;
     o->value.action.terminate = 0;
@@ -340,8 +334,6 @@ BSDisplayInitOptions (BSDisplay * bd)
 
     o = &bd->opt[BS_DISPLAY_OPTION_BRIGHTNESS_DECREASE];
     o->name = "brightness_decrease";
-    o->shortDesc = N_("Decrease Brightness");
-    o->longDesc = N_("Decrease Brightness");
     o->type = CompOptionTypeAction;
     o->value.action.initiate = decreaseBrightness;
     o->value.action.terminate = 0;
@@ -400,8 +392,6 @@ BSScreenInitOptions (BSScreen * bs)
 
     o = &bs->opt[BS_SCREEN_OPTION_BRIGHTNESS_STEP];
     o->name = "brightness_step";
-    o->shortDesc = N_("Brightness Step");
-    o->longDesc = N_("Brightness change step");
     o->type = CompOptionTypeInt;
     o->value.i = BS_BRIGHTNESS_STEP_DEFAULT;
     o->rest.i.min = BS_BRIGHTNESS_STEP_MIN;
@@ -409,8 +399,6 @@ BSScreenInitOptions (BSScreen * bs)
 
     o = &bs->opt[BS_SCREEN_OPTION_SATURATION_STEP];
     o->name = "saturation_step";
-    o->shortDesc = N_("Saturation Step");
-    o->longDesc = N_("Saturation change step");
     o->type = CompOptionTypeInt;
     o->value.i = BS_SATURATION_STEP_DEFAULT;
     o->rest.i.min = BS_SATURATION_STEP_MIN;
@@ -418,9 +406,6 @@ BSScreenInitOptions (BSScreen * bs)
     
     o = &bs->opt[BS_SCREEN_OPTION_SATURATION_MATCHES];
     o->name	         = "saturation_matches";
-    o->shortDesc         = N_("Saturation windows");
-    o->longDesc	         = N_("Windows that should have a different "
-				"saturation by default");
     o->type	         = CompOptionTypeList;
     o->value.list.type   = CompOptionTypeMatch;
     o->value.list.nValue = 0;
@@ -430,8 +415,6 @@ BSScreenInitOptions (BSScreen * bs)
 
     o = &bs->opt[BS_SCREEN_OPTION_SATURATION_VALUES];
     o->name	         = "saturation_values";
-    o->shortDesc         = N_("Saturation window values");
-    o->longDesc	         = N_("Saturation values for windows");
     o->type	         = CompOptionTypeList;
     o->value.list.type   = CompOptionTypeInt;
     o->value.list.nValue = 0;
@@ -441,9 +424,6 @@ BSScreenInitOptions (BSScreen * bs)
     
     o = &bs->opt[BS_SCREEN_OPTION_BRIGHTNESS_MATCHES];
     o->name	         = "brightness_matches";
-    o->shortDesc         = N_("Brightness windows");
-    o->longDesc	         = N_("Windows that should have a different "
-				"brightness by default");
     o->type	         = CompOptionTypeList;
     o->value.list.type   = CompOptionTypeMatch;
     o->value.list.nValue = 0;
@@ -453,8 +433,6 @@ BSScreenInitOptions (BSScreen * bs)
 
     o = &bs->opt[BS_SCREEN_OPTION_BRIGHTNESS_VALUES];
     o->name	         = "brightness_values";
-    o->shortDesc         = N_("Brightness window values");
-    o->longDesc	         = N_("Brightness values for windows");
     o->type	         = CompOptionTypeList;
     o->value.list.type   = CompOptionTypeInt;
     o->value.list.nValue = 0;
diff -Nurp extra-plugins.orig/crashhandler/crashhandler_options.c extra-plugins/crashhandler/crashhandler_options.c
--- extra-plugins.orig/crashhandler/crashhandler_options.c	2007-04-03 13:42:36.000000000 +0000
+++ extra-plugins/crashhandler/crashhandler_options.c	2007-05-10 13:33:40.000000000 +0000
@@ -123,22 +123,16 @@ CompOption * crashGetDisplayOption(CompD
 
 	o = &od->opt[CrashDisplayOptionEnabled];
 	o->name = "enabled";
-	o->shortDesc = N_("Enable Crash Handler");
-	o->longDesc = N_("Activate Crash Handler.");
 	o->type = CompOptionTypeBool;
 	o->value.b = CRASH_ENABLED_DEFAULT;
 
 	o = &od->opt[CrashDisplayOptionStartWm];
 	o->name = "start_wm";
-	o->shortDesc = N_("Start Other Window Manager");
-	o->longDesc = N_("Start other window manager on Crash.");
 	o->type = CompOptionTypeBool;
 	o->value.b = CRASH_START_WM_DEFAULT;
 
 	o = &od->opt[CrashDisplayOptionWmCmd];
 	o->name = "wm_cmd";
-	o->shortDesc = N_("Window Manager Command Line");
-	o->longDesc = N_("Window manager command line. DO NOT ENTER COMPIZ HERE!!!");
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(CRASH_WM_CMD_DEFAULT);
 	o->rest.s.string = NULL;
diff -Nurp extra-plugins.orig/desktopclick/desktopclick.c extra-plugins/desktopclick/desktopclick.c
--- extra-plugins.orig/desktopclick/desktopclick.c	2007-04-14 16:35:00.000000000 +0000
+++ extra-plugins/desktopclick/desktopclick.c	2007-05-10 13:14:49.000000000 +0000
@@ -147,8 +147,6 @@ desktopclickDisplayInitOptions (Desktopc
 
     o = &dd->opt[DESKTOPCLICK_DISPLAY_OPTION_MAINMENU];
     o->name			        = "mainmenu";
-    o->shortDesc		        = _("Show Main Menu");
-    o->longDesc			        = _("Show the Main Menu");
     o->type                             = CompOptionTypeAction;
     o->value.action.initiate            = desktopclickMainmenu;
     o->value.action.terminate           = NULL;
diff -Nurp extra-plugins.orig/fakeargb/fakeargb.c extra-plugins/fakeargb/fakeargb.c
--- extra-plugins.orig/fakeargb/fakeargb.c	2007-04-03 02:27:26.000000000 +0000
+++ extra-plugins/fakeargb/fakeargb.c	2007-05-10 13:25:05.000000000 +0000
@@ -212,8 +212,6 @@ static void FakeDisplayInitOptions(FakeD
 
 	o = &fd->opt[FAKE_DISPLAY_OPTION_TOGGLE];
 	o->name = "window_toggle";
-	o->shortDesc = N_("Toggle Window Fake ARGB");
-	o->longDesc = N_("Toggle Window Fake ARGB.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = fakeToggle;
 	o->value.action.terminate = 0;
diff -Nurp extra-plugins.orig/flash/flash.c extra-plugins/flash/flash.c
--- extra-plugins.orig/flash/flash.c	2007-04-03 02:28:17.000000000 +0000
+++ extra-plugins/flash/flash.c	2007-05-10 13:34:07.000000000 +0000
@@ -199,8 +199,6 @@ flashScreenInitOptions (FlashScreen *fs)
 
 	o = &fs->opt[FLASH_SCREEN_OPTION_WINDOW_TYPE];
 	o->name = "window_types";
-	o->shortDesc = N_("Window Types");
-	o->longDesc = N_("The window types that will be considered.");
 	o->type = CompOptionTypeList;
 	o->value.list.type = CompOptionTypeString;
 	o->value.list.nValue = N_WIN_TYPE;
@@ -792,8 +790,6 @@ flashDisplayInitOptions (FlashDisplay *f
 
     o = &fd->opt[FLASH_DISPLAY_OPTION_INITIATE];
     o->name = "initiate";
-    o->shortDesc = N_("Initiate");
-    o->longDesc = N_("Start flash");
     o->type = CompOptionTypeAction;
     o->value.action.initiate = flashInitiate;
     o->value.action.terminate = 0;
@@ -807,8 +803,6 @@ flashDisplayInitOptions (FlashDisplay *f
 
     o = &fd->opt[FLASH_DISPLAY_OPTION_DISTANCE_MAX];
     o->name = "distance_max";
-    o->shortDesc = N_("Distance max");
-    o->longDesc = N_("Distance max between pointer and active window.");
     o->type = CompOptionTypeInt;
     o->value.i = FLASH_DISPLAY_OPTION_DISTANCE_MAX_DEFAULT;
     o->rest.i.min = 50;
@@ -816,9 +810,6 @@ flashDisplayInitOptions (FlashDisplay *f
 
     o = &fd->opt[FLASH_DISPLAY_OPTION_ECART_MAX];
     o->name = "ecart_max";
-    o->shortDesc = N_("Digression max");
-    o->longDesc = N_("Digression max between pointer's projection and lightning's impact.");
-    o->type = CompOptionTypeInt;
     o->value.i = FLASH_DISPLAY_OPTION_ECART_MAX_DEFAULT;
     o->rest.i.min = 0;
     o->rest.i.max = OPTION_DISTANCE_MAX;
@@ -826,8 +817,6 @@ flashDisplayInitOptions (FlashDisplay *f
 
     o = &fd->opt[FLASH_DISPLAY_OPTION_INTERVAL];
     o->name = "interval";
-    o->shortDesc = N_("Minimum interval between two lightning");
-    o->longDesc = N_("Interval in milliseconde between two lightning");
     o->type = CompOptionTypeInt;
     o->value.i = FLASH_DISPLAY_OPTION_INTERVAL_DEFAULT;
     o->rest.i.min = 0;
@@ -836,8 +825,6 @@ flashDisplayInitOptions (FlashDisplay *f
 
     o = &fd->opt[FLASH_DISPLAY_OPTION_TIME];
     o->name = "time";
-    o->shortDesc = N_("Time of lightnings");
-    o->longDesc = N_("Time in milliseconde of lightnings");
     o->type = CompOptionTypeInt;
     o->value.i = FLASH_DISPLAY_OPTION_TIME_DEFAULT;
     o->rest.i.min = 50;
@@ -847,8 +834,6 @@ flashDisplayInitOptions (FlashDisplay *f
 
     o = &fd->opt[FLASH_DISPLAY_OPTION_COLOR_UP_LEFT];
     o->name = "flash_color_up_left";
-    o->shortDesc = N_("Side of lightnings color");
-    o->longDesc = N_("Lightning color.");
     o->type = CompOptionTypeColor;
     o->value.c[0] = FLASH_DISPLAY_OPTION_COLOR_UP_LEFT_RED_DEFAULT;
     o->value.c[1] = FLASH_DISPLAY_OPTION_COLOR_UP_LEFT_GREEN_DEFAULT;
@@ -858,8 +843,6 @@ flashDisplayInitOptions (FlashDisplay *f
 
     o = &fd->opt[FLASH_DISPLAY_OPTION_COLOR_CENTER];
     o->name = "flash_color_center";
-    o->shortDesc = N_("Middle of lightnings color");
-    o->longDesc = N_("Lightning color.");
     o->type = CompOptionTypeColor;
     o->value.c[0] = FLASH_DISPLAY_OPTION_COLOR_CENTER_RED_DEFAULT;
     o->value.c[1] = FLASH_DISPLAY_OPTION_COLOR_CENTER_GREEN_DEFAULT;
@@ -869,8 +852,6 @@ flashDisplayInitOptions (FlashDisplay *f
 
     o = &fd->opt[FLASH_DISPLAY_OPTION_COLOR_DOWN_RIGHT];
     o->name = "flash_color_down_right";
-    o->shortDesc = N_("The other side of lightnings color");
-    o->longDesc = N_("Lightning color.");
     o->type = CompOptionTypeColor;
     o->value.c[0] = FLASH_DISPLAY_OPTION_COLOR_UP_LEFT_RED_DEFAULT;
     o->value.c[1] = FLASH_DISPLAY_OPTION_COLOR_UP_LEFT_GREEN_DEFAULT;
diff -Nurp extra-plugins.orig/group/group_options.c extra-plugins/group/group_options.c
--- extra-plugins.orig/group/group_options.c	2007-04-03 14:19:31.000000000 +0000
+++ extra-plugins/group/group_options.c	2007-05-10 13:26:47.000000000 +0000
@@ -1583,79 +1583,57 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionMoveAll];
 	o->name = "move_all";
-	o->shortDesc = N_("Move every window in the group");
-	o->longDesc = N_("If one window in the group is moved, all other group windows are moved as well.");
 	o->type = CompOptionTypeBool;
 	o->value.b = GROUP_MOVE_ALL_DEFAULT;
 
 	o = &os->opt[GroupScreenOptionResizeAll];
 	o->name = "resize_all";
-	o->shortDesc = N_("Resize every window in the group");
-	o->longDesc = N_("If one window in the group is resized, all other group windows are resized as well.");
 	o->type = CompOptionTypeBool;
 	o->value.b = GROUP_RESIZE_ALL_DEFAULT;
 
 	o = &os->opt[GroupScreenOptionRaiseAll];
 	o->name = "raise_all";
-	o->shortDesc = N_("Raise every window in the group");
-	o->longDesc = N_("If one window in the group is activated, all other group windows are raised as well.");
 	o->type = CompOptionTypeBool;
 	o->value.b = GROUP_RAISE_ALL_DEFAULT;
 
 	o = &os->opt[GroupScreenOptionMaximizeUnmaximizeAll];
 	o->name = "maximize_unmaximize_all";
-	o->shortDesc = N_("Maximize/unmaximize with group");
-	o->longDesc = N_("If one window in the group is (un)maximized, all other group windows are (un)maximized as well.");
 	o->type = CompOptionTypeBool;
 	o->value.b = GROUP_MAXIMIZE_UNMAXIMIZE_ALL_DEFAULT;
 
 	o = &os->opt[GroupScreenOptionMinimizeAll];
 	o->name = "minimize_all";
-	o->shortDesc = N_("Minimize with group");
-	o->longDesc = N_("If one window in the group is (un)minimized, all other group windows are (un)minimized as well.");
 	o->type = CompOptionTypeBool;
 	o->value.b = GROUP_MINIMIZE_ALL_DEFAULT;
 
 	o = &os->opt[GroupScreenOptionShadeAll];
 	o->name = "shade_all";
-	o->shortDesc = N_("Shade with group");
-	o->longDesc = N_("If one window in the group is (un)shaded, all other group windows are (un)shaded as well.");
 	o->type = CompOptionTypeBool;
 	o->value.b = GROUP_SHADE_ALL_DEFAULT;
 
 	o = &os->opt[GroupScreenOptionAutoGroup];
 	o->name = "auto_group";
-	o->shortDesc = N_("Group the windows after selection");
-	o->longDesc = N_("If you have selected some windows, this automatically groups them (Doesn't work with selection mode 'Normal').");
 	o->type = CompOptionTypeBool;
 	o->value.b = GROUP_AUTO_GROUP_DEFAULT;
 
 	o = &os->opt[GroupScreenOptionAutoUngroup];
 	o->name = "auto_ungroup";
-	o->shortDesc = N_("Ungroup the windows if only one window is left");
-	o->longDesc = N_("If there is only 1 window left in the group, it will be ungrouped.");
 	o->type = CompOptionTypeBool;
 	o->value.b = GROUP_AUTO_UNGROUP_DEFAULT;
 
 	o = &os->opt[GroupScreenOptionRelativeDistance];
 	o->name = "relative_distance";
-	o->shortDesc = N_("Compute distance relative");
-	o->longDesc = N_("The distance between the windows is computed relative to the window size. This allows you to have windows staying next to each other.");
 	o->type = CompOptionTypeBool;
 	o->value.b = GROUP_RELATIVE_DISTANCE_DEFAULT;
 
 	o = &os->opt[GroupScreenOptionWindowMatch];
 	o->name = "window_match";
-	o->shortDesc = N_("Group Window Match");
-	o->longDesc = N_("Windows that should be allowed to be grouped");
 	o->type = CompOptionTypeMatch;
 	matchInit (&o->value.match);
 	matchAddFromString (&o->value.match, GROUP_WINDOW_MATCH_DEFAULT);
 
 	o = &os->opt[GroupScreenOptionSelectOpacity];
 	o->name = "select_opacity";
-	o->shortDesc = N_("Opacity");
-	o->longDesc = N_("Opacity of selected windows");
 	o->type = CompOptionTypeInt;
 	o->value.i = GROUP_SELECT_OPACITY_DEFAULT;
 	o->rest.i.min = GROUP_SELECT_OPACITY_MIN;
@@ -1663,8 +1641,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionSelectSaturation];
 	o->name = "select_saturation";
-	o->shortDesc = N_("Saturation");
-	o->longDesc = N_("Saturation of selected windows");
 	o->type = CompOptionTypeInt;
 	o->value.i = GROUP_SELECT_SATURATION_DEFAULT;
 	o->rest.i.min = GROUP_SELECT_SATURATION_MIN;
@@ -1672,8 +1648,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionSelectBrightness];
 	o->name = "select_brightness";
-	o->shortDesc = N_("Brightness");
-	o->longDesc = N_("Brightness of selected windows");
 	o->type = CompOptionTypeInt;
 	o->value.i = GROUP_SELECT_BRIGHTNESS_DEFAULT;
 	o->rest.i.min = GROUP_SELECT_BRIGHTNESS_MIN;
@@ -1681,8 +1655,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionSelectPrecision];
 	o->name = "select_precision";
-	o->shortDesc = N_("Precision");
-	o->longDesc = N_("Precision of the selection (percentage of the visible window area which must be selected for the selection to be recognized).");
 	o->type = CompOptionTypeInt;
 	o->value.i = GROUP_SELECT_PRECISION_DEFAULT;
 	o->rest.i.min = GROUP_SELECT_PRECISION_MIN;
@@ -1690,8 +1662,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionFillColor];
 	o->name = "fill_color";
-	o->shortDesc = N_("Selection Color");
-	o->longDesc = N_("Fill color of the selection rectangle");
 	o->type = CompOptionTypeColor;
 	o->value.c[0] = Group_FILL_COLOR_RED_DEFAULT;
 	o->value.c[1] = Group_FILL_COLOR_GREEN_DEFAULT;
@@ -1700,8 +1670,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionLineColor];
 	o->name = "line_color";
-	o->shortDesc = N_("Line Color");
-	o->longDesc = N_("Line color of the selection rectangle");
 	o->type = CompOptionTypeColor;
 	o->value.c[0] = Group_LINE_COLOR_RED_DEFAULT;
 	o->value.c[1] = Group_LINE_COLOR_GREEN_DEFAULT;
@@ -1710,29 +1678,21 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionMipmaps];
 	o->name = "mipmaps";
-	o->shortDesc = N_("Create mipmaps for thumbnails");
-	o->longDesc = N_("Create mipmaps for thumbnails in the tab bar");
 	o->type = CompOptionTypeBool;
 	o->value.b = GROUP_MIPMAPS_DEFAULT;
 
 	o = &os->opt[GroupScreenOptionUntabOnClose];
 	o->name = "untab_on_close";
-	o->shortDesc = N_("Untab when closing top tab");
-	o->longDesc = N_("Untab the group when closing the top tab window instead of changing tab");
 	o->type = CompOptionTypeBool;
 	o->value.b = GROUP_UNTAB_ON_CLOSE_DEFAULT;
 
 	o = &os->opt[GroupScreenOptionAutotabCreate];
 	o->name = "autotab_create";
-	o->shortDesc = N_("Autotab windows on creation");
-	o->longDesc = N_("Autotab windows with themselves on window creation");
 	o->type = CompOptionTypeBool;
 	o->value.b = GROUP_AUTOTAB_CREATE_DEFAULT;
 
 	o = &os->opt[GroupScreenOptionTabbarShowDelay];
 	o->name = "tabbar_show_delay";
-	o->shortDesc = N_("Tab Bar Show Delay");
-	o->longDesc = N_("Time (in s) before the tab bar is shown after hovering the title bar");
 	o->type = CompOptionTypeFloat;
 	o->value.f = GROUP_TABBAR_SHOW_DELAY_DEFAULT;
 	o->rest.f.min = GROUP_TABBAR_SHOW_DELAY_MIN;
@@ -1741,8 +1701,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionTabbingSpeed];
 	o->name = "tabbing_speed";
-	o->shortDesc = N_("Tabbing Speed");
-	o->longDesc = N_("Tabbing speed");
 	o->type = CompOptionTypeFloat;
 	o->value.f = GROUP_TABBING_SPEED_DEFAULT;
 	o->rest.f.min = GROUP_TABBING_SPEED_MIN;
@@ -1751,8 +1709,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionTabbingTimestep];
 	o->name = "tabbing_timestep";
-	o->shortDesc = N_("Tabbing Timestep");
-	o->longDesc = N_("Tabbing timestep");
 	o->type = CompOptionTypeFloat;
 	o->value.f = GROUP_TABBING_TIMESTEP_DEFAULT;
 	o->rest.f.min = GROUP_TABBING_TIMESTEP_MIN;
@@ -1761,8 +1717,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionFadeTime];
 	o->name = "fade_time";
-	o->shortDesc = N_("Fade time for tab bar animations");
-	o->longDesc = N_("Duration (in s) of the tab bar fading animation when showing/hiding it");
 	o->type = CompOptionTypeFloat;
 	o->value.f = GROUP_FADE_TIME_DEFAULT;
 	o->rest.f.min = GROUP_FADE_TIME_MIN;
@@ -1771,8 +1725,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionFadeTextTime];
 	o->name = "fade_text_time";
-	o->shortDesc = N_("Fade time for text animations");
-	o->longDesc = N_("Duration (in s) of the text fading animation when showing/hiding it");
 	o->type = CompOptionTypeFloat;
 	o->value.f = GROUP_FADE_TEXT_TIME_DEFAULT;
 	o->rest.f.min = GROUP_FADE_TEXT_TIME_MIN;
@@ -1781,8 +1733,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionVisibilityTime];
 	o->name = "visibility_time";
-	o->shortDesc = N_("Tab bar visibility time after tab change");
-	o->longDesc = N_("Time (in s) the tab bar is visibly after a tab change");
 	o->type = CompOptionTypeFloat;
 	o->value.f = GROUP_VISIBILITY_TIME_DEFAULT;
 	o->rest.f.min = GROUP_VISIBILITY_TIME_MIN;
@@ -1791,8 +1741,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionChangeAnimationTime];
 	o->name = "change_animation_time";
-	o->shortDesc = N_("Change tab animation duration");
-	o->longDesc = N_("Duration (in s) of the animation that happens when changing tabs");
 	o->type = CompOptionTypeFloat;
 	o->value.f = GROUP_CHANGE_ANIMATION_TIME_DEFAULT;
 	o->rest.f.min = GROUP_CHANGE_ANIMATION_TIME_MIN;
@@ -1801,8 +1749,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionThumbSize];
 	o->name = "thumb_size";
-	o->shortDesc = N_("Thumb Size");
-	o->longDesc = N_("The size of the window thumbs in the task bar");
 	o->type = CompOptionTypeInt;
 	o->value.i = GROUP_THUMB_SIZE_DEFAULT;
 	o->rest.i.min = GROUP_THUMB_SIZE_MIN;
@@ -1810,8 +1756,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionThumbSpace];
 	o->name = "thumb_space";
-	o->shortDesc = N_("Space");
-	o->longDesc = N_("The space between the thumbs");
 	o->type = CompOptionTypeInt;
 	o->value.i = GROUP_THUMB_SPACE_DEFAULT;
 	o->rest.i.min = GROUP_THUMB_SPACE_MIN;
@@ -1819,8 +1763,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionBorderRadius];
 	o->name = "border_radius";
-	o->shortDesc = N_("Border Radius");
-	o->longDesc = N_("The radius for the tab bar edges");
 	o->type = CompOptionTypeInt;
 	o->value.i = GROUP_BORDER_RADIUS_DEFAULT;
 	o->rest.i.min = GROUP_BORDER_RADIUS_MIN;
@@ -1828,8 +1770,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionBorderWidth];
 	o->name = "border_width";
-	o->shortDesc = N_("Border Width");
-	o->longDesc = N_("The width of the tab bar outline");
 	o->type = CompOptionTypeInt;
 	o->value.i = GROUP_BORDER_WIDTH_DEFAULT;
 	o->rest.i.min = GROUP_BORDER_WIDTH_MIN;
@@ -1837,8 +1777,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionTabBaseColor];
 	o->name = "tab_base_color";
-	o->shortDesc = N_("Tab Base Color");
-	o->longDesc = N_("Fill color of the tab bar");
 	o->type = CompOptionTypeColor;
 	o->value.c[0] = Group_TAB_BASE_COLOR_RED_DEFAULT;
 	o->value.c[1] = Group_TAB_BASE_COLOR_GREEN_DEFAULT;
@@ -1847,8 +1785,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionTabBorderColor];
 	o->name = "tab_border_color";
-	o->shortDesc = N_("Tab Border Color");
-	o->longDesc = N_("Border color of the tab bar");
 	o->type = CompOptionTypeColor;
 	o->value.c[0] = Group_TAB_BORDER_COLOR_RED_DEFAULT;
 	o->value.c[1] = Group_TAB_BORDER_COLOR_GREEN_DEFAULT;
@@ -1857,8 +1793,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionTabHighlightColor];
 	o->name = "tab_highlight_color";
-	o->shortDesc = N_("Tab Highlight Color");
-	o->longDesc = N_("Fill color of the tab bar");
 	o->type = CompOptionTypeColor;
 	o->value.c[0] = Group_TAB_HIGHLIGHT_COLOR_RED_DEFAULT;
 	o->value.c[1] = Group_TAB_HIGHLIGHT_COLOR_GREEN_DEFAULT;
@@ -1867,8 +1801,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionTabStyle];
 	o->name = "tab_style";
-	o->shortDesc = N_("Tab Style");
-	o->longDesc = N_("The style of the tab bar");
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(groupTabStyle[GROUP_TAB_STYLE_DEFAULT]);
 	o->rest.s.string = (char **)groupTabStyle;
@@ -1876,8 +1808,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionTabbarFontSize];
 	o->name = "tabbar_font_size";
-	o->shortDesc = N_("Font Size");
-	o->longDesc = N_("The size of the window title font in the tab bar");
 	o->type = CompOptionTypeInt;
 	o->value.i = GROUP_TABBAR_FONT_SIZE_DEFAULT;
 	o->rest.i.min = GROUP_TABBAR_FONT_SIZE_MIN;
@@ -1885,8 +1815,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionTabbarFontColor];
 	o->name = "tabbar_font_color";
-	o->shortDesc = N_("Font Color");
-	o->longDesc = N_("The color of the window title in the tab bar");
 	o->type = CompOptionTypeColor;
 	o->value.c[0] = Group_TABBAR_FONT_COLOR_RED_DEFAULT;
 	o->value.c[1] = Group_TABBAR_FONT_COLOR_GREEN_DEFAULT;
@@ -1895,22 +1823,16 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionSpringModelOnMove];
 	o->name = "spring_model_on_move";
-	o->shortDesc = N_("Spring model on move");
-	o->longDesc = N_("Use spring model for the tab bar when moving the window");
 	o->type = CompOptionTypeBool;
 	o->value.b = GROUP_SPRING_MODEL_ON_MOVE_DEFAULT;
 
 	o = &os->opt[GroupScreenOptionDndUngroupWindow];
 	o->name = "dnd_ungroup_window";
-	o->shortDesc = N_("Remove window from group after dropping it outside a tab bar");
-	o->longDesc = N_("Remove window from group after dropping it outside a tab bar");
 	o->type = CompOptionTypeBool;
 	o->value.b = GROUP_DND_UNGROUP_WINDOW_DEFAULT;
 
 	o = &os->opt[GroupScreenOptionDragHoverTime];
 	o->name = "drag_hover_time";
-	o->shortDesc = N_("Hover time for slot dragging");
-	o->longDesc = N_("Timespan (in s) after which a grouped window is activated if a window of another group is dragged over it");
 	o->type = CompOptionTypeFloat;
 	o->value.f = GROUP_DRAG_HOVER_TIME_DEFAULT;
 	o->rest.f.min = GROUP_DRAG_HOVER_TIME_MIN;
@@ -1919,8 +1841,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionDragSpringK];
 	o->name = "drag_spring_k";
-	o->shortDesc = N_("Slot Drag Spring K");
-	o->longDesc = N_("Spring Konstant used for slot dragging");
 	o->type = CompOptionTypeFloat;
 	o->value.f = GROUP_DRAG_SPRING_K_DEFAULT;
 	o->rest.f.min = GROUP_DRAG_SPRING_K_MIN;
@@ -1929,8 +1849,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionDragFriction];
 	o->name = "drag_friction";
-	o->shortDesc = N_("Slot drag friction");
-	o->longDesc = N_("Spring friction for slot dragging");
 	o->type = CompOptionTypeFloat;
 	o->value.f = GROUP_DRAG_FRICTION_DEFAULT;
 	o->rest.f.min = GROUP_DRAG_FRICTION_MIN;
@@ -1939,8 +1857,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionDragYDistance];
 	o->name = "drag_y_distance";
-	o->shortDesc = N_("Y distance for spring model");
-	o->longDesc = N_("Distance (in pixels) between the tab bar and the dragged slot for applying the spring model. If the distance is larger than that value, the model isn't applied.");
 	o->type = CompOptionTypeInt;
 	o->value.i = GROUP_DRAG_Y_DISTANCE_DEFAULT;
 	o->rest.i.min = GROUP_DRAG_Y_DISTANCE_MIN;
@@ -1948,8 +1864,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionDragSpeedLimit];
 	o->name = "drag_speed_limit";
-	o->shortDesc = N_("Speed limit for spring model");
-	o->longDesc = N_("Mouse pointer movement speed limit (in pixels/second) for the spring model");
 	o->type = CompOptionTypeInt;
 	o->value.i = GROUP_DRAG_SPEED_LIMIT_DEFAULT;
 	o->rest.i.min = GROUP_DRAG_SPEED_LIMIT_MIN;
@@ -1957,15 +1871,11 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionGlow];
 	o->name = "glow";
-	o->shortDesc = N_("Enable Glow");
-	o->longDesc = N_("Enable grouped window glowing");
 	o->type = CompOptionTypeBool;
 	o->value.b = GROUP_GLOW_DEFAULT;
 
 	o = &os->opt[GroupScreenOptionGlowSize];
 	o->name = "glow_size";
-	o->shortDesc = N_("Glow Size");
-	o->longDesc = N_("The size of the grouped window glow");
 	o->type = CompOptionTypeInt;
 	o->value.i = GROUP_GLOW_SIZE_DEFAULT;
 	o->rest.i.min = GROUP_GLOW_SIZE_MIN;
@@ -1973,8 +1883,6 @@ static void groupOptionsScreenInitOption
 
 	o = &os->opt[GroupScreenOptionGlowType];
 	o->name = "glow_type";
-	o->shortDesc = N_("Glow Type");
-	o->longDesc = N_("The type of the glow");
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(groupGlowType[GROUP_GLOW_TYPE_DEFAULT]);
 	o->rest.s.string = (char **)groupGlowType;
@@ -1990,8 +1898,6 @@ static void groupOptionsDisplayInitOptio
 
 	o = &od->opt[GroupDisplayOptionSelect];
 	o->name = "select";
-	o->shortDesc = N_("Select");
-	o->longDesc = N_("The key for starting selecting windows.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
@@ -2002,8 +1908,6 @@ static void groupOptionsDisplayInitOptio
 
 	o = &od->opt[GroupDisplayOptionSelectSingle];
 	o->name = "select_single";
-	o->shortDesc = N_("Select Single Window");
-	o->longDesc = N_("The key for selecting the current window.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
@@ -2020,8 +1924,6 @@ XStringToKeysym(GROUP_SELECT_SINGLE_KEY_
 
 	o = &od->opt[GroupDisplayOptionGroup];
 	o->name = "group";
-	o->shortDesc = N_("Group Windows");
-	o->longDesc = N_("The key for grouping windows.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
@@ -2038,8 +1940,6 @@ XStringToKeysym(GROUP_GROUP_KEY_DEFAULT)
 
 	o = &od->opt[GroupDisplayOptionUngroup];
 	o->name = "ungroup";
-	o->shortDesc = N_("Ungroup Windows");
-	o->longDesc = N_("The key for ungrouping the current group.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
@@ -2056,8 +1956,6 @@ XStringToKeysym(GROUP_UNGROUP_KEY_DEFAUL
 
 	o = &od->opt[GroupDisplayOptionRemove];
 	o->name = "remove";
-	o->shortDesc = N_("Remove Group Window");
-	o->longDesc = N_("The key for removing the selected window from its group.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
@@ -2074,8 +1972,6 @@ XStringToKeysym(GROUP_REMOVE_KEY_DEFAULT
 
 	o = &od->opt[GroupDisplayOptionClose];
 	o->name = "close";
-	o->shortDesc = N_("Close Group");
-	o->longDesc = N_("The key for closing all windows in the group.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
@@ -2092,8 +1988,6 @@ XStringToKeysym(GROUP_CLOSE_KEY_DEFAULT)
 
 	o = &od->opt[GroupDisplayOptionIgnore];
 	o->name = "ignore";
-	o->shortDesc = N_("Ignore Group");
-	o->longDesc = N_("The key for ignoring the group. If this key is pressed, you can do actions for a single window in the group only.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
@@ -2110,8 +2004,6 @@ XStringToKeysym(GROUP_IGNORE_KEY_DEFAULT
 
 	o = &od->opt[GroupDisplayOptionTabmode];
 	o->name = "tabmode";
-	o->shortDesc = N_("Tab Group");
-	o->longDesc = N_("The key for toggling the tab mode for the current group.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
@@ -2128,8 +2020,6 @@ XStringToKeysym(GROUP_TABMODE_KEY_DEFAUL
 
 	o = &od->opt[GroupDisplayOptionChangeTabLeft];
 	o->name = "change_tab_left";
-	o->shortDesc = N_("Change Tab Left");
-	o->longDesc = N_("The key for switching to the tab left of the current one.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
@@ -2146,8 +2036,6 @@ XStringToKeysym(GROUP_CHANGE_TAB_LEFT_KE
 
 	o = &od->opt[GroupDisplayOptionChangeTabRight];
 	o->name = "change_tab_right";
-	o->shortDesc = N_("Change Tab Right");
-	o->longDesc = N_("The key for switching to the tab right of the current one.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
@@ -2164,8 +2052,6 @@ XStringToKeysym(GROUP_CHANGE_TAB_RIGHT_K
 
 	o = &od->opt[GroupDisplayOptionChangeColor];
 	o->name = "change_color";
-	o->shortDesc = N_("Glow Color Change");
-	o->longDesc = N_("If you don't like the current glow color, you can change it with this key.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
diff -Nurp extra-plugins.orig/jpeg/jpeg.c extra-plugins/jpeg/jpeg.c
--- extra-plugins.orig/jpeg/jpeg.c	2007-04-09 11:58:56.000000000 +0000
+++ extra-plugins/jpeg/jpeg.c	2007-05-10 13:34:23.000000000 +0000
@@ -326,8 +326,6 @@ static void JPEGDisplayInitOptions(JPEGD
 
 	o = &jd->opt[JPEG_DISPLAY_OPTION_QUALITY];
 	o->name = "quality";
-	o->shortDesc = N_("Compression quality");
-	o->longDesc = N_("Quality of compression when saving JPEG images");
 	o->type = CompOptionTypeInt;
 	o->value.i = JPEG_QUALITY_DEFAULT;
 	o->rest.i.min = JPEG_QUALITY_MIN;
diff -Nurp extra-plugins.orig/kiosk/kiosk.c extra-plugins/kiosk/kiosk.c
--- extra-plugins.orig/kiosk/kiosk.c	2007-04-09 16:45:39.000000000 +0000
+++ extra-plugins/kiosk/kiosk.c	2007-05-10 13:15:10.000000000 +0000
@@ -107,8 +107,6 @@ kioskDisplayInitOptions (KioskDisplay *k
 
     o = &kd->opt[KIOSK_DISPLAY_OPTION_INITIATE];
     o->name			        = "initiate";
-    o->shortDesc		        = N_("Make window fullscreen");
-    o->longDesc			        = N_("Make the active window go into fullscreen mode");
     o->type                             = CompOptionTypeAction;
     o->value.action.initiate            = kioskInitiate;
     o->value.action.terminate           = 0;
diff -Nurp extra-plugins.orig/mblur/mblur_options.c extra-plugins/mblur/mblur_options.c
--- extra-plugins.orig/mblur/mblur_options.c	2007-04-03 13:36:09.000000000 +0000
+++ extra-plugins/mblur/mblur_options.c	2007-05-10 13:34:44.000000000 +0000
@@ -179,8 +179,6 @@ static void mblurOptionsScreenInitOption
 
 	o = &os->opt[MblurScreenOptionMode];
 	o->name = "mode";
-	o->shortDesc = N_("Toggle Motion Blur");
-	o->longDesc = N_("Toggle motion Blur effect.");
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(mblurMode[MBLUR_MODE_DEFAULT]);
 	o->rest.s.string = (char **)mblurMode;
@@ -188,8 +186,6 @@ static void mblurOptionsScreenInitOption
 
 	o = &os->opt[MblurScreenOptionStrength];
 	o->name = "strength";
-	o->shortDesc = N_("Motion Blur Strength");
-	o->longDesc = N_("Motion Blur strength.");
 	o->type = CompOptionTypeFloat;
 	o->value.f = MBLUR_STRENGTH_DEFAULT;
 	o->rest.f.min = MBLUR_STRENGTH_MIN;
@@ -198,8 +194,6 @@ static void mblurOptionsScreenInitOption
 
 	o = &os->opt[MblurScreenOptionOnTransformedScreen];
 	o->name = "on_transformed_screen";
-	o->shortDesc = N_("Motion Blur on Transformed Screen");
-	o->longDesc = N_("Execute Motion Blur if the screen is transformed.");
 	o->type = CompOptionTypeBool;
 	o->value.b = MBLUR_ON_TRANSFORMED_SCREEN_DEFAULT;
 
@@ -213,8 +207,6 @@ static void mblurOptionsDisplayInitOptio
 
 	o = &od->opt[MblurDisplayOptionInitiate];
 	o->name = "initiate";
-	o->shortDesc = N_("Toggle Motion Blur");
-	o->longDesc = N_("Toggle motion Blur effect.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
diff -Nurp extra-plugins.orig/mousegestures/mousegestures.c extra-plugins/mousegestures/mousegestures.c
--- extra-plugins.orig/mousegestures/mousegestures.c	2007-04-03 14:07:08.000000000 +0000
+++ extra-plugins/mousegestures/mousegestures.c	2007-05-10 13:15:26.000000000 +0000
@@ -431,8 +431,6 @@ mousegesturesDisplayInitOptions (Mousege
 
     o = &md->opt[MOUSEGESTURES_DISPLAY_OPTION_INITIATE];
     o->name			        = "initiate";
-    o->shortDesc		        = N_("Initiate");
-    o->longDesc			        = N_("Initiate the gesture");
     o->type                             = CompOptionTypeAction;
     o->value.action.initiate            = mousegesturesInitiate;
     o->value.action.terminate           = mousegesturesTerminate;
@@ -445,8 +443,6 @@ mousegesturesDisplayInitOptions (Mousege
 
     o = &md->opt[MOUSEGESTURES_DISPLAY_OPTION_ACTIONS];
     o->name	         = "actions";
-    o->shortDesc         = N_("List of mouse gestures");
-    o->longDesc	         = N_("List of mouse gestures");
     o->type	         = CompOptionTypeList;
     o->value.list.type   = CompOptionTypeString;
     o->value.list.nValue = N_GESTURES;
diff -Nurp extra-plugins.orig/neg/neg_options.c extra-plugins/neg/neg_options.c
--- extra-plugins.orig/neg/neg_options.c	2007-04-06 12:47:36.000000000 +0000
+++ extra-plugins/neg/neg_options.c	2007-05-10 13:27:09.000000000 +0000
@@ -156,8 +156,6 @@ static void negOptionsScreenInitOptions(
 
 	o = &os->opt[NegScreenOptionExcludeMatch];
 	o->name = "exclude_match";
-	o->shortDesc = N_("Exclude Windows");
-	o->longDesc = N_("Windows to exclude from negating");
 	o->type = CompOptionTypeMatch;
 	matchInit (&o->value.match);
 	matchAddFromString (&o->value.match, NEG_EXCLUDE_MATCH_DEFAULT);
@@ -172,8 +170,6 @@ static void negOptionsDisplayInitOptions
 
 	o = &od->opt[NegDisplayOptionWindowToggle];
 	o->name = "window_toggle";
-	o->shortDesc = N_("Toggle Window Negative");
-	o->longDesc = N_("Toggle active window negative");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
@@ -190,8 +186,6 @@ XStringToKeysym(NEG_WINDOW_TOGGLE_KEY_DE
 
 	o = &od->opt[NegDisplayOptionScreenToggle];
 	o->name = "screen_toggle";
-	o->shortDesc = N_("Toggle Screen Negative");
-	o->longDesc = N_("Toggle screen negative");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
diff -Nurp extra-plugins.orig/opacify/opacify.c extra-plugins/opacify/opacify.c
--- extra-plugins.orig/opacify/opacify.c	2007-04-03 02:31:28.000000000 +0000
+++ extra-plugins/opacify/opacify.c	2007-05-10 13:35:15.000000000 +0000
@@ -424,34 +424,17 @@ static void opacifyScreenInitOptions(Opa
 
 	o = &os->opt[OPACIFY_SCREEN_OPTION_ONLY_IF_BLOCK];
 	o->name = "only_if_block";
-	o->shortDesc = N_("Only increase opacity if a window is blocking");
-	o->longDesc =
-			N_
-			("Only increase the opacity on the targeted window if it has one or more windows "
-			 "blocking it from view.");
 	o->type = CompOptionTypeBool;
 	o->value.b = FALSE;
 	os->only_if_block = FALSE;
 
 	o = &os->opt[OPACIFY_SCREEN_OPTION_FOCUS_INSTANT];
 	o->name = "focus_instant";
-	o->shortDesc = N_("Bypass delay when the new active window is the focused window.");
-	o->longDesc =
-			N_
-			("Do not wait if the window we are hoovering is the focused "
-			 "window. This allows us to instantly see the focused window."
-			 "You probably want to disable this if you are not using "
-			 "\"Click to Focus\"."
-			 );
 	o->type = CompOptionTypeBool;
 	o->value.b = FALSE;
 
 	o = &os->opt[OPACIFY_SCREEN_OPTION_ACTIVE_OP];
 	o->name = "active_op";
-	o->shortDesc = N_("Active Opacity");
-	o->longDesc =
-			N_
-			("The minimum opacity to ensure a targeted window has. A target window will have either this opacity or the pre-set opacity, whichever is higher.");
 	o->type = CompOptionTypeInt;
 	o->value.i = 100;
 	o->rest.i.min = 1;
@@ -460,10 +443,6 @@ static void opacifyScreenInitOptions(Opa
 
 	o = &os->opt[OPACIFY_SCREEN_OPTION_PASSIVE_OP];
 	o->name = "passive_op";
-	o->shortDesc = N_("Passive Opacity");
-	o->longDesc =
-			N_
-			("The maximum opacity a window blocking the current targeted window can have. A blocking window will have either this opacity or pre-set opacity, whichever is lower.");
 	o->type = CompOptionTypeInt;
 	o->value.i = 10;
 	o->rest.i.min = 1;
@@ -472,10 +451,6 @@ static void opacifyScreenInitOptions(Opa
 
 	o = &os->opt[OPACIFY_SCREEN_OPTION_TIMEOUT];
 	o->name = "timeout";
-	o->shortDesc = N_("Timeout");
-	o->longDesc =
-			N_
-			("The delay in 1/10th of a second before opacify changes opacity after the active window has changed.");
 	o->type = CompOptionTypeInt;
 	o->value.i = 7;
 	o->rest.i.min = 0;
@@ -484,8 +459,6 @@ static void opacifyScreenInitOptions(Opa
 
 	o = &os->opt[OPACIFY_SCREEN_OPTION_WINDOW_TYPE];
 	o->name = "window_types";
-	o->shortDesc = N_("Window Types");
-	o->longDesc = N_("Window types that should be opacified");
 	o->type = CompOptionTypeList;
 	o->value.list.type = CompOptionTypeString;
 	o->value.list.nValue = N_WIN_TYPE;
@@ -535,10 +508,6 @@ static void opacifyDisplayInitOptions(Op
 
 	o = &od->opt[OPACIFY_DISPLAY_OPTION_TOGGLE];
 	o->name = "toggle";
-	o->shortDesc = N_("Toggle Opacify");
-	o->longDesc =
-			N_
-			("Use this to enable/disable opacify on the fly. Previously opacified windows will not be reset once you disable it like this.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = opacify_toggle;
 	o->value.action.terminate = 0;
@@ -551,22 +520,12 @@ static void opacifyDisplayInitOptions(Op
 
 	o = &od->opt[OPACIFY_DISPLAY_OPTION_TOGGLE_FREEZE];
 	o->name = "toggle_reset";
-	o->shortDesc = N_("Reset opacity to original values when toggling");
-	o->longDesc =
-			N_
-			("Reset the opacity of all windows modified by opacify when toggeling opacify with "
-			 "the defined key-combination.");
 	o->type = CompOptionTypeBool;
 	o->value.b = TRUE;
 	od->toggle_reset = TRUE;
 
 	o = &od->opt[OPACIFY_DISPLAY_OPTION_INIT_TOGGLE];
 	o->name = "init_toggle";
-	o->shortDesc = N_("Toggle opacify on by default");
-	o->longDesc =
-			N_
-			("With this enabled, opacify will be on when you load opacify, "
-			 "which is usually when you start Compiz.");
 	o->type = CompOptionTypeBool;
 	o->value.b = TRUE;
 	od->toggle = TRUE;
diff -Nurp extra-plugins.orig/put/Makefile extra-plugins/put/Makefile
--- extra-plugins.orig/put/Makefile	2007-04-09 12:44:27.000000000 +0000
+++ extra-plugins/put/Makefile	1970-01-01 00:00:00.000000000 +0000
@@ -1,30 +0,0 @@
-DESTDIR = $(HOME)/.compiz/plugins
-
-PLUGIN  = put
-
-CC      = gcc
-LIBTOOL = libtool
-INSTALL = install
-
-CFLAGS  = -Wall `pkg-config --cflags compiz`
-LDFLAGS = `pkg-config --libs compiz`
-
-%.lo: %.c
-	$(LIBTOOL) --mode=compile $(CC) $(CFLAGS) -c -o $@ $<
-
-%.la: $(PLUGIN).lo
-	$(LIBTOOL) --mode=link $(CC) $(LDFLAGS) -rpath $(DESTDIR) -o $@ $<
-
-all: lib$(PLUGIN).la
-
-install: lib$(PLUGIN).la
-	$(LIBTOOL) --mode=install $(INSTALL) lib$(PLUGIN).la \
-	$(DESTDIR)/lib$(PLUGIN).la
-
-clean:
-	rm -rf *.lo *.o lib$(PLUGIN).* .libs
-
-uninstall:
-	rm -f  $(DESTDIR)/lib$(PLUGIN).so
-
-
diff -Nurp extra-plugins.orig/put/put.c extra-plugins/put/put.c
--- extra-plugins.orig/put/put.c	2007-04-03 02:32:40.000000000 +0000
+++ extra-plugins/put/put.c	1970-01-01 00:00:00.000000000 +0000
@@ -1,2062 +0,0 @@
-/*
- * Copyright (c) 2006 Darryll Truchan <moppsy@comcast.net>
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy of this 
- * software and associated documentation files (the "Software"), to deal in the Software 
- * without restriction, including without limitation the rights to use, copy, modify, 
- * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to 
- * permit persons to whom the Software is furnished to do so, subject to the following 
- * conditions:
- *
- * The above copyright notice and this permission notice shall be included in all copies 
- * or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
- * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
- * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
- * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
- * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
- * THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- *
- */
-
-#include <stdlib.h>
-#include <stdio.h>
-#include <string.h>
-#include <math.h>
-#include <compiz.h>
-
-
-#define PUT_SPEED_DEFAULT       1.5f
-#define PUT_SPEED_MIN           0.1f
-#define PUT_SPEED_MAX           50.0f
-#define PUT_SPEED_PRECISION     0.1f
-
-#define PUT_TIMESTEP_DEFAULT    0.5f
-#define PUT_TIMESTEP_MIN        0.1f
-#define PUT_TIMESTEP_MAX        50.0f
-#define PUT_TIMESTEP_PRECISION  0.1f
-
-#define PUT_LEFT_PAD_DEFAULT    0
-#define PUT_LEFT_PAD_MIN        0
-#define PUT_LEFT_PAD_MAX        500
-
-#define PUT_TOP_PAD_DEFAULT     0
-#define PUT_TOP_PAD_MIN         0
-#define PUT_TOP_PAD_MAX         500
-
-#define PUT_RIGHT_PAD_DEFAULT   0
-#define PUT_RIGHT_PAD_MIN       0
-#define PUT_RIGHT_PAD_MAX       500
-
-#define PUT_BOTTOM_PAD_DEFAULT  0
-#define PUT_BOTTOM_PAD_MIN      0
-#define PUT_BOTTOM_PAD_MAX      500
-
-#define PUT_RESTORE_MODIFIERS_DEFAULT       CompSuperMask
-#define PUT_RESTORE_KEY_DEFAULT             "KP_Insert"
-
-#define PUT_CENTER_MODIFIERS_DEFAULT        CompSuperMask
-#define PUT_CENTER_KEY_DEFAULT              "KP_Begin"
-
-#define PUT_LEFT_MODIFIERS_DEFAULT          CompSuperMask
-#define PUT_LEFT_KEY_DEFAULT                "KP_Left"
-
-#define PUT_TOPLEFT_MODIFIERS_DEFAULT       CompSuperMask
-#define PUT_TOPLEFT_KEY_DEFAULT             "KP_Home"
-
-#define PUT_TOP_MODIFIERS_DEFAULT           CompSuperMask
-#define PUT_TOP_KEY_DEFAULT                 "KP_Up"
-
-#define PUT_TOPRIGHT_MODIFIERS_DEFAULT      CompSuperMask
-#define PUT_TOPRIGHT_KEY_DEFAULT            "KP_Prior"
-
-#define PUT_RIGHT_MODIFIERS_DEFAULT         CompSuperMask
-#define PUT_RIGHT_KEY_DEFAULT               "KP_Right"
-
-#define PUT_BOTTOMRIGHT_MODIFIERS_DEFAULT   CompSuperMask
-#define PUT_BOTTOMRIGHT_KEY_DEFAULT         "KP_Next"
-
-#define PUT_BOTTOM_MODIFIERS_DEFAULT        CompSuperMask
-#define PUT_BOTTOM_KEY_DEFAULT              "KP_Down"
-
-#define PUT_BOTTOMLEFT_MODIFIERS_DEFAULT    CompSuperMask
-#define PUT_BOTTOMLEFT_KEY_DEFAULT          "KP_End"
-
-#define PUT_POINTER_MODIFIERS_DEFAULT       CompSuperMask
-#define PUT_POINTER_KEY_DEFAULT             "z"
-
-#define PUT_SELF_ANIMATE_DEFAULT            TRUE
-#define PUT_CENTER_INITIAL_DEFAULT          FALSE
-#define PUT_UNFOCUS_WINDOW_DEFAULT          FALSE
-
-static Bool usePlane = FALSE;
-
-typedef enum {
-    PutUnknown,
-    PutBottomLeft,
-    PutBottom,
-    PutBottomRight,
-    PutLeft,
-    PutCenter,
-    PutRight,
-    PutTopLeft,
-    PutTop,
-    PutTopRight,
-    PutRestore,
-    PutViewport,
-    PutViewportLeft,
-    PutViewportRight,
-    PutExact,
-    PutPointer,
-    PutViewportUp,
-    PutViewportDown
-} PutType;
-
-static int displayPrivateIndex;
-
-#define PUT_DISPLAY_OPTION_CENTER           0
-#define PUT_DISPLAY_OPTION_LEFT             1
-#define PUT_DISPLAY_OPTION_TOPLEFT          2
-#define PUT_DISPLAY_OPTION_TOP              3
-#define PUT_DISPLAY_OPTION_TOPRIGHT         4
-#define PUT_DISPLAY_OPTION_RIGHT            5
-#define PUT_DISPLAY_OPTION_BOTTOMRIGHT      6
-#define PUT_DISPLAY_OPTION_BOTTOM           7
-#define PUT_DISPLAY_OPTION_BOTTOMLEFT       8
-#define PUT_DISPLAY_OPTION_RESTORE          9
-#define PUT_DISPLAY_OPTION_VIEWPORT_LEFT    10
-#define PUT_DISPLAY_OPTION_VIEWPORT_RIGHT   11
-#define PUT_DISPLAY_OPTION_VIEWPORT         12
-#define PUT_DISPLAY_OPTION_VIEWPORT_1       13
-#define PUT_DISPLAY_OPTION_VIEWPORT_2       14
-#define PUT_DISPLAY_OPTION_VIEWPORT_3       15
-#define PUT_DISPLAY_OPTION_VIEWPORT_4       16
-#define PUT_DISPLAY_OPTION_VIEWPORT_5       17
-#define PUT_DISPLAY_OPTION_VIEWPORT_6       18
-#define PUT_DISPLAY_OPTION_VIEWPORT_7       19
-#define PUT_DISPLAY_OPTION_VIEWPORT_8       20
-#define PUT_DISPLAY_OPTION_VIEWPORT_9       21
-#define PUT_DISPLAY_OPTION_VIEWPORT_10      22
-#define PUT_DISPLAY_OPTION_VIEWPORT_11      23
-#define PUT_DISPLAY_OPTION_VIEWPORT_12      24
-#define PUT_DISPLAY_OPTION_EXACT            25
-#define PUT_DISPLAY_OPTION_POINTER          26
-#define PUT_DISPLAY_OPTION_VIEWPORT_UP      27
-#define PUT_DISPLAY_OPTION_VIEWPORT_DOWN    28
-#define PUT_DISPLAY_OPTION_PUT              29
-#define PUT_DISPLAY_OPTION_NUM              30
-
-typedef struct _PutDisplay {
-    int             screenPrivateIndex;
-    CompOption      opt[PUT_DISPLAY_OPTION_NUM];
-} PutDisplay;
-
-#define PUT_SCREEN_OPTION_SPEED             0
-#define PUT_SCREEN_OPTION_TIMESTEP          1
-#define PUT_SCREEN_OPTION_LEFT_PAD          2
-#define PUT_SCREEN_OPTION_TOP_PAD           3
-#define PUT_SCREEN_OPTION_RIGHT_PAD         4
-#define PUT_SCREEN_OPTION_BOTTOM_PAD        5
-#define PUT_SCREEN_OPTION_UNFOCUS_WINDOW    6
-#define PUT_SCREEN_OPTION_NUM               7
-
-typedef struct _PutScreen {
-    int                     windowPrivateIndex;
-    CompOption              opt[PUT_SCREEN_OPTION_NUM];
-    PreparePaintScreenProc  preparePaintScreen;
-    DonePaintScreenProc     donePaintScreen;
-    PaintScreenProc         paintScreen;
-    PaintWindowProc         paintWindow;
-    float                   speed;
-    float                   timestep;
-    int                     moreAdjust;
-    int                     grabIndex;
-    int                     padLeft, padTop, padRight, padBottom;
-    Bool                    vpMoving;
-} PutScreen;
-
-typedef struct _PutWindow {
-    GLfloat     xVelocity, yVelocity;
-    GLfloat     tx, ty;
-    int         dx, dy, x, y;
-    int         lastX, lastY;
-    Bool        adjust;
-} PutWindow;
-
-#define GET_PUT_DISPLAY(d)                                              \
-    ((PutDisplay *) (d)->privates[displayPrivateIndex].ptr)
-
-#define PUT_DISPLAY(d)                                                  \
-    PutDisplay *pd = GET_PUT_DISPLAY (d)
-
-#define GET_PUT_SCREEN(s, pd)                                           \
-    ((PutScreen *) (s)->privates[(pd)->screenPrivateIndex].ptr)
-
-#define PUT_SCREEN(s)                                                   \
-    PutScreen *ps = GET_PUT_SCREEN (s, GET_PUT_DISPLAY (s->display))
-
-#define GET_PUT_WINDOW(w, ps)                                           \
-    ((PutWindow *) (w)->privates[(ps)->windowPrivateIndex].ptr)
-
-#define PUT_WINDOW(w)                                                   \
-    PutWindow *pw = GET_PUT_WINDOW  (w,                                 \
-    GET_PUT_SCREEN  (w->screen,                                         \
-    GET_PUT_DISPLAY (w->screen->display)))
-
-#define NUM_OPTIONS(s) (sizeof ((s)->opt) / sizeof (CompOption))
-
-static CompOption *
-putGetScreenOptions (CompPlugin  *p, 
-                     CompScreen *screen,
-                     int        *count)
-{
-    PUT_SCREEN (screen);
-    *count = NUM_OPTIONS (ps);
-    return ps->opt;
-}
-
-static Bool
-putSetScreenOption (CompPlugin  *p, 
-                    CompScreen      *screen,
-                    char            *name, 
-                    CompOptionValue *value)
-{
-    CompOption *o;
-    int index;
-
-    PUT_SCREEN (screen);
-
-    o = compFindOption (ps->opt, NUM_OPTIONS (ps), name, &index);
-    if (!o)
-        return FALSE;
-
-    switch (index) {
-    case PUT_SCREEN_OPTION_SPEED:
-        if (compSetFloatOption (o, value))
-        {
-            ps->speed = o->value.f;
-            return TRUE;
-        }
-        break;
-    case PUT_SCREEN_OPTION_TIMESTEP:
-        if (compSetFloatOption (o, value))
-        {
-            ps->timestep = o->value.f;
-            return TRUE;
-        }
-        break;
-    case PUT_SCREEN_OPTION_LEFT_PAD:
-        if (compSetIntOption (o, value))
-        {
-            ps->padLeft = o->value.i;
-            return TRUE;
-        }
-        break;
-    case PUT_SCREEN_OPTION_TOP_PAD:
-        if (compSetIntOption (o, value))
-        {
-            ps->padTop = o->value.i;
-            return TRUE;
-        }
-        break;
-    case PUT_SCREEN_OPTION_RIGHT_PAD:
-        if (compSetIntOption (o, value))
-        {
-            ps->padRight = o->value.i;
-            return TRUE;
-        }
-        break;
-    case PUT_SCREEN_OPTION_BOTTOM_PAD:
-        if (compSetIntOption (o, value))
-        {
-            ps->padBottom = o->value.i;
-            return TRUE;
-        }
-        break;
-    case PUT_SCREEN_OPTION_UNFOCUS_WINDOW:
-        if (compSetBoolOption (o, value))
-            return TRUE;
-        break;
-    default:
-        break;
-    }
-
-    return FALSE;
-}
-
-static void
-putScreenInitOptions (PutScreen *ps)
-{
-    CompOption *o;
-
-    o = &ps->opt[PUT_SCREEN_OPTION_SPEED];
-    o->name             = "speed";
-    o->shortDesc        = N_("Speed");
-    o->longDesc         = N_("Minimize speed");
-    o->type             = CompOptionTypeFloat;
-    o->value.f          = PUT_SPEED_DEFAULT;
-    o->rest.f.min       = PUT_SPEED_MIN;
-    o->rest.f.max       = PUT_SPEED_MAX;
-    o->rest.f.precision = PUT_SPEED_PRECISION;
-
-    o = &ps->opt[PUT_SCREEN_OPTION_TIMESTEP];
-    o->name             = "timestep";
-    o->shortDesc        = N_("Timestep");
-    o->longDesc         = N_("Minimize timestep");
-    o->type             = CompOptionTypeFloat;
-    o->value.f          = PUT_TIMESTEP_DEFAULT;
-    o->rest.f.min       = PUT_TIMESTEP_MIN;
-    o->rest.f.max       = PUT_TIMESTEP_MAX;
-    o->rest.f.precision = PUT_TIMESTEP_PRECISION;
-
-    o = &ps->opt[PUT_SCREEN_OPTION_LEFT_PAD];
-    o->name             = "pad_left";
-    o->shortDesc        = N_("Pad Left");
-    o->longDesc         = N_("Left side padding");
-    o->type             = CompOptionTypeInt;
-    o->value.i          = PUT_LEFT_PAD_DEFAULT;
-    o->rest.i.min       = PUT_LEFT_PAD_MIN;
-    o->rest.i.max       = PUT_LEFT_PAD_MAX;
-
-    o = &ps->opt[PUT_SCREEN_OPTION_TOP_PAD];
-    o->name             = "pad_top";
-    o->shortDesc        = N_("Pad Top");
-    o->longDesc         = N_("Top side padding");
-    o->type             = CompOptionTypeInt;
-    o->value.i          = PUT_TOP_PAD_DEFAULT;
-    o->rest.i.min       = PUT_TOP_PAD_MIN;
-    o->rest.i.max       = PUT_TOP_PAD_MAX;
-
-    o = &ps->opt[PUT_SCREEN_OPTION_RIGHT_PAD];
-    o->name             = "pad_right";
-    o->shortDesc        = N_("Pad Right");
-    o->longDesc         = N_("Right side padding");
-    o->type             = CompOptionTypeInt;
-    o->value.i          = PUT_RIGHT_PAD_DEFAULT;
-    o->rest.i.min       = PUT_RIGHT_PAD_MIN;
-    o->rest.i.max       = PUT_RIGHT_PAD_MAX;
-
-    o = &ps->opt[PUT_SCREEN_OPTION_BOTTOM_PAD];
-    o->name             = "pad_bottom";
-    o->shortDesc        = N_("Pad Bottom");
-    o->longDesc         = N_("Bottom side padding");
-    o->type             = CompOptionTypeInt;
-    o->value.i          = PUT_BOTTOM_PAD_DEFAULT;
-    o->rest.i.min       = PUT_BOTTOM_PAD_MIN;
-    o->rest.i.max       = PUT_BOTTOM_PAD_MAX;
-
-    o = &ps->opt[PUT_SCREEN_OPTION_UNFOCUS_WINDOW];
-    o->name             = "unfocus_window";
-    o->shortDesc        = N_("Unfocus Window");
-    o->longDesc         = N_("Unfocus when moved off the viewport");
-    o->type             = CompOptionTypeBool;
-    o->value.b          = PUT_UNFOCUS_WINDOW_DEFAULT;
-}
-
-static int
-adjustPutVelocity (CompWindow *w)
-{
-    float dx, dy, adjust, amount;
-    float x1, y1;
-
-    PUT_WINDOW (w);
-
-    x1 = pw->lastX + pw->dx;
-    y1 = pw->lastY + pw->dy;
-
-    dx = x1 - (pw->lastX + pw->tx);
-    dy = y1 - (pw->lastY + pw->ty);
-
-    adjust = dx * 0.15f;
-    amount = fabs (dx) * 1.5;
-    if (amount < 0.5f)
-        amount = 0.5f;
-    else if (amount > 5.0f)
-        amount = 5.0f;
-
-    pw->xVelocity = (amount * pw->xVelocity + adjust) / (amount +1.0f);
-
-    adjust = dy * 0.15f;
-    amount = fabs (dy) * 1.5f;
-    if (amount < 0.5f)
-	amount = 0.5f;
-    else if (amount > 5.0f)
-	amount = 5.0f;
-
-    pw->yVelocity = (amount * pw->yVelocity + adjust) / (amount + 1.0f);
-
-    if (fabs (dx) < 0.1f && fabs (pw->xVelocity) < 0.2f &&
-	fabs (dy) < 0.1f && fabs (pw->yVelocity) < 0.2f)
-    {
-        pw->xVelocity = pw->yVelocity = 0.0f;
-
-        pw->tx = x1 - pw->lastX;
-        pw->ty = y1 - pw->lastY;
-        
-        pw->dx = pw->dy = 0;
-
-        syncWindowPosition (w);
-        return 0;
-    }
-    return 1;
-}
-
-static void
-putPreparePaintScreen (CompScreen *s, 
-                       int        msSinceLastPaint)
-{
-    PUT_SCREEN (s);
-
-    if (ps->moreAdjust)    
-    {
-        CompWindow *w;
-        int steps, dx, dy;
-        float amount, chunk;
-
-        amount = msSinceLastPaint * 0.025f * ps->speed;
-        steps  = amount / (0.5f * ps->timestep);
-        if (!steps) steps = 1;
-        chunk  = amount / (float) steps;
-
-        while (steps--)
-        {
-            ps->moreAdjust = 0;
-            for (w = s->windows; w; w = w->next)
-            {
-                PUT_WINDOW (w);
-
-                if (pw->adjust)
-                {
-                    pw->adjust = adjustPutVelocity (w);
-                    ps->moreAdjust |= pw->adjust;
-                    
-                    pw->tx += pw->xVelocity * chunk;
-                    pw->ty += pw->yVelocity * chunk;
-
-                    dx = (pw->lastX + pw->tx) - pw->x;
-                    dy = (pw->lastY + pw->ty) - pw->y;
-
-                    if (ps->vpMoving && !usePlane)
-                        moveWindowToViewportPosition (w, pw->x + dx, TRUE);
-                    else
-                        moveWindow (w, dx, dy, TRUE, TRUE);
-                   
-                    pw->x += dx;
-                    pw->y += dy;
-                }
-            }
-            if (!ps->moreAdjust)
-            {
-                if (ps->opt[PUT_SCREEN_OPTION_UNFOCUS_WINDOW].value.b)
-                    focusDefaultWindow (s->display);
-	        break;
-            }
-        }
-    }
-
-    UNWRAP (ps, s, preparePaintScreen);
-    (*s->preparePaintScreen) (s, msSinceLastPaint);
-    WRAP (ps, s, preparePaintScreen, putPreparePaintScreen);
-}
-
-static void
-putDonePaintScreen (CompScreen *s)
-{
-    PUT_SCREEN (s);
-    if (ps->moreAdjust)
-    {
-        CompWindow *w;
-
-        for (w = s->windows; w; w = w->next)
-        {
-            PUT_WINDOW (w);
-
-            if (pw->adjust)
-            {
-                addWindowDamage (w);
-            }
-        }
-    }
-    else
-    {
-        if (ps->grabIndex)
-        {
-            if (ps->vpMoving)
-                removeScreenGrab (s, ps->grabIndex, NULL);
-            ps->grabIndex = 0;
-        }
-    }
-
-    UNWRAP (ps, s, donePaintScreen);
-    (*s->donePaintScreen) (s);
-    WRAP (ps, s, donePaintScreen, putDonePaintScreen);
-}
-
-static Bool
-putPaintScreen (CompScreen              *s, 
-                const ScreenPaintAttrib *sAttrib, 
-		const CompTransform     *transform,
-                Region                  region, 
-                int                     output, 
-                unsigned int            mask)
-{
-    Bool status;
-
-    PUT_SCREEN (s);
-
-    if (ps->moreAdjust)
-        mask |= PAINT_SCREEN_WITH_TRANSFORMED_WINDOWS_MASK;
-
-    UNWRAP (ps, s, paintScreen);
-    status = (*s->paintScreen) (s, sAttrib, transform, region, output, mask);
-    WRAP (ps, s, paintScreen, putPaintScreen);
-
-    return status;
-}
-
-static Bool
-putPaintWindow (CompWindow              *w, 
-                const WindowPaintAttrib *attrib, 
-		const CompTransform     *transform,
-                Region                  region, 
-                unsigned int            mask)
-{
-    CompScreen *s = w->screen;
-    Bool       status;
-
-    PUT_SCREEN (s);
-    PUT_WINDOW (w);
-
-    if (pw->adjust)
-        mask |= PAINT_WINDOW_TRANSFORMED_MASK;
-
-    UNWRAP (ps, s, paintWindow);
-    status = (*s->paintWindow) (w, attrib, transform, region, mask);
-    WRAP (ps, s, paintWindow, putPaintWindow);
-
-    return status;
-}
-
-static Bool
-putInitiate (CompDisplay     *d, 
-             CompAction      *action, 
-             CompActionState state, 
-             CompOption      *option, 
-             int             nOption)
-{
-    CompWindow *w;
-    Window xid;
-    int px, py, x, y, dx, dy;
-    int head, width, height, hx, hy;
-    int face, face_x, face_y;
-    int hdirection, vdirection;
-    PutType type;
-    CompPlugin *p;
-
-    xid  = getIntOptionNamed (option, nOption, "window", 0);
-    type = getIntOptionNamed (option, nOption, "type", PutCenter);
-    px    = getIntOptionNamed (option, nOption, "x", 0);
-    py    = getIntOptionNamed (option, nOption, "y", 0);
-
-    if (!xid)
-        xid = d->activeWindow;
-
-    w = findWindowAtDisplay (d, xid);
-
-    if (w)
-    {
-        PUT_SCREEN (w->screen);
-        PUT_WINDOW (w);
-
-        if (otherScreenGrabExist (w->screen, "put", 0))
-            return FALSE;
-
-        ps->vpMoving = FALSE;
-
-        if (w->attrib.override_redirect)
-            return FALSE;
-
-        if (w->type & CompWindowTypeDesktopMask ||
-            w->type & CompWindowTypeDockMask    ||
-            w->type & CompWindowTypeFullscreenMask)
-        {    
-            return FALSE;
-        }
-
-        head = 0;
-        width  = w->screen->workArea.width;
-        height = w->screen->workArea.height;
-        hx = w->screen->workArea.x;        
-        hy = w->screen->workArea.y;
-
-        x = w->attrib.x;
-        y = w->attrib.y;
-
-        p = findActivePlugin ("plane");
-        if (p)
-        {
-            usePlane = TRUE;
-        }
-
-        switch (type)
-        {
-            case PutCenter:
-                dx = (width  / 2) - (w->width  / 2) - (x - hx);
-                dy = (height / 2) - (w->height / 2) - (y - hy);
-                break;
-
-            case PutLeft:
-                dx = - (x - hx) + w->input.left + ps->padLeft;
-                dy = (height / 2) - (w->height / 2) - (y - hy);
-                break;
-
-            case PutTopLeft:
-                dx = - (x - hx) + w->input.left + ps->padLeft;
-                dy = - (y - hy) + w->input.top + ps->padTop;
-                break;
-
-            case PutTop:
-                dx = (width / 2)  - (w->width / 2)  - (x - hx);
-                dy = - (y - hy) + w->input.top + ps->padTop;
-                break;
-
-            case PutTopRight:
-                dx = width - w->width - (x - hx) - 
-                     w->input.right - ps->padRight;
-                dy = - (y - hy) + w->input.top + ps->padTop;
-                break;
-
-            case PutRight:
-                dx = width - w->width - (x - hx) - 
-                     w->input.right - ps->padRight;
-                dy = (height / 2) - (w->height / 2) - (y - hy);
-                break;
-
-            case PutBottomRight:
-                dx = width  - w->width  - (x - hx) - 
-                     w->input.right - ps->padRight;
-                dy = height - w->height - (y - hy) - 
-                     w->input.bottom - ps->padBottom;
-                break;
-
-            case PutBottom:
-                dx = (width / 2)  - (w->width / 2)  - (x - hx);
-                dy = height - w->height - (y - hy) - 
-                     w->input.bottom - ps->padBottom;
-                break;
-
-            case PutBottomLeft:
-                dx = - (x - hx) + w->input.left + ps->padLeft;
-                dy = height - w->height - (y - hy) - 
-                     w->input.bottom - ps->padBottom;
-                break;
-
-            case PutRestore:
-                dx = pw->lastX - x;
-                dy = pw->lastY - y;
-                break;
-
-            case PutViewport:
-                face = getIntOptionNamed (option, nOption, "face", -1);
-                if (face < 0)
-                    return FALSE;
-
-                if (usePlane)
-                {
-                    face_x = face % w->screen->hsize;
-                    face_y = face / w->screen->hsize;
-                }
-                else
-                {
-                    face_x = face;
-                    face_y = 0;
-                }
-
-                hdirection = (face_x - w->screen->x); 
-                if (hdirection > w->screen->hsize / 2)
-                    hdirection = (hdirection - w->screen->hsize);
-                else if (hdirection < -w->screen->hsize / 2)
-                    hdirection = (hdirection + w->screen->hsize);
-
-                dx = w->screen->width * hdirection;
-                dy = 0;
-
-                if (usePlane)
-                {
-                    vdirection = (face_y - w->screen->y);
-                    if (vdirection > w->screen->vsize / 2)
-                        vdirection = (vdirection - w->screen->vsize);
-                    else if (vdirection < -w->screen->hsize / 2)
-                        vdirection = (vdirection + w->screen->vsize);
-
-                    dy = w->screen->height * vdirection;
-                }
-                ps->vpMoving = TRUE;
-                break;
-
-            case PutViewportLeft:
-                dx = - w->screen->workArea.width;
-                dy = 0;
-                ps->vpMoving = TRUE;
-                break;
-
-            case PutViewportRight:
-                dx = w->screen->workArea.width;
-                dy = 0;
-                ps->vpMoving = TRUE;
-                break;
-
-            case PutViewportUp:
-                dx = 0;
-                dy = 0;
-                if (usePlane)
-                    dy = - w->screen->workArea.height;
-                ps->vpMoving = TRUE;
-                break;
-
-            case PutViewportDown:
-                dx = 0;
-                dy = 0;
-                if (usePlane)
-                    dy = w->screen->workArea.height;
-                ps->vpMoving = TRUE;
-                break;
-
-            case PutExact:
-                if (px < 0)
-                    dx = px + w->screen->workArea.width - 
-                         w->width - x - w->input.right;
-                else
-                    dx = px - x + w->input.left;
-
-                if (py < 0)
-                    dy = py + w->screen->workArea.height - 
-                         w->height - y - w->input.bottom;
-                else 
-                    dy = py - y + w->input.top;
-
-                break;
-
-            case PutPointer:
-                {
-                    int rx, ry;
-                    Window root, child;
-                    int winx, winy;
-                    unsigned int pmask;
-
-                    XQueryPointer (d->display, 
-                                   w->id, 
-                                   &root, 
-                                   &child, 
-                                   &rx, &ry, 
-                                   &winx, &winy, 
-                                   &pmask);
-
-                    if (rx < w->screen->workArea.width / 2 && 
-                        ry < w->screen->workArea.height / 2)
-                    {
-                        // top left quad
-                        dx = rx - x + w->input.left;
-                        dy = ry - y + w->input.top;
-                    }
-                    else if (rx < w->screen->workArea.width / 2 && 
-                             ry >= w->screen->workArea.height / 2)
-                    {
-                        // bottom left quad
-                        dx = rx - x + w->input.left;
-                        dy = ry - w->height - y - w->input.bottom;
-                    }
-                    else if (rx >= w->screen->workArea.width / 2 && 
-                             ry < w->screen->workArea.height / 2)
-                    {
-                        // top right quad
-                        dx = rx - w->width - x - w->input.right;
-                        dy = ry - y + w->input.top;
-                    }
-                    else
-                    {
-                        // bottom right quad
-                        dx = rx - w->width - x - w->input.right;
-                        dy = ry - w->height - y - w->input.bottom;
-                    }
-                }
-                break;
-
-            default:
-                dx = dy = 0;
-                break;
-        }
-
-        if (dx != 0 || dy != 0)
-        {
-
-            if (!ps->grabIndex)
-            {
-                if (ps->vpMoving)
-                    ps->grabIndex = 
-                        pushScreenGrab (w->screen, 
-                                        w->screen->invisibleCursor,
-                                        "put");
-                else
-                    ps->grabIndex = 1;
-            }
-
-            if (ps->grabIndex)
-            {    
-                if (w->saveMask & CWX)
-                    w->saveWc.x += dx;
-
-                if (w->saveMask & CWY)
-                    w->saveWc.y += dy;
-
-                pw->lastX = pw->x = w->serverX = x;
-                pw->lastY = pw->y = w->serverY = y; 
-
-                pw->dx = dx;
-                pw->dy = dy;
-
-                pw->adjust = TRUE;
-                ps->moreAdjust = TRUE;
-
-                pw->tx = pw->ty = 0;
-
-                addWindowDamage (w);
-            }
-        }
-    }
-    return FALSE;
-}
-
-static Bool
-putToViewport (CompDisplay     *d, 
-               CompAction      *action, 
-               CompActionState state, 
-               CompOption      *option, 
-               int             nOption)
-{
-    int face, i;
-
-    PUT_DISPLAY (d);
-
-    face = getIntOptionNamed (option, nOption, "face", -1);
-    if (face < 0)
-    {
-        i = PUT_DISPLAY_OPTION_VIEWPORT_1;
-
-        while (i <= PUT_DISPLAY_OPTION_VIEWPORT_12)
-        {
-            if (action == &pd->opt[i].value.action)
-            {
-                face = i - PUT_DISPLAY_OPTION_VIEWPORT_1;
-                break;
-            }
-            i++;
-        }
-    }
-
-    CompOption o [5];
-
-    o[0].type    = CompOptionTypeInt;
-    o[0].name    = "x";
-    o[0].value.i = getIntOptionNamed (option, nOption, "x", 0);
-
-    o[1].type    = CompOptionTypeInt;
-    o[1].name    = "y";
-    o[1].value.i = getIntOptionNamed (option, nOption, "y", 0);
-
-    o[2].type    = CompOptionTypeInt;
-    o[2].name    = "face";
-    o[2].value.i = face;
-
-    o[3].type    = CompOptionTypeInt;
-    o[3].name    = "type";
-    o[3].value.i = PutViewport;
-
-    o[4].type    = CompOptionTypeInt;
-    o[4].name    = "window";
-    o[4].value.i = getIntOptionNamed (option, nOption, "window", 0);
-
-    putInitiate (d, NULL, 0, o, 5);
-
-    return FALSE;
-}
-
-static Bool
-putViewportLeft (CompDisplay     *d, 
-                 CompAction      *action, 
-                 CompActionState state, 
-                 CompOption      *option, 
-                 int             nOption)
-{
-    CompOption o [4];
-
-    o[0].type    = CompOptionTypeInt;
-    o[0].name    = "x";
-    o[0].value.i = getIntOptionNamed (option, nOption, "x", 0);
-
-    o[1].type    = CompOptionTypeInt;
-    o[1].name    = "y";
-    o[1].value.i = getIntOptionNamed (option, nOption, "y", 0);
-
-    o[2].type    = CompOptionTypeInt;
-    o[2].name    = "type";
-    o[2].value.i = PutViewportLeft;
-
-    o[3].type    = CompOptionTypeInt;
-    o[3].name    = "window";
-    o[3].value.i = getIntOptionNamed (option, nOption, "window", 0);
-
-    putInitiate (d, NULL, 0, o, 4);
-
-    return FALSE;
-}
-
-static Bool
-putViewportRight (CompDisplay     *d,
-                  CompAction      *action, 
-                  CompActionState state, 
-                  CompOption      *option, 
-                  int             nOption)
-{
-    CompOption o [4];
-
-    o[0].type    = CompOptionTypeInt;
-    o[0].name    = "x";
-    o[0].value.i = getIntOptionNamed (option, nOption, "x", 0);
-
-    o[1].type    = CompOptionTypeInt;
-    o[1].name    = "y";
-    o[1].value.i = getIntOptionNamed (option, nOption, "y", 0);
-
-    o[2].type    = CompOptionTypeInt;
-    o[2].name    = "type";
-    o[2].value.i = PutViewportRight;
-
-    o[3].type    = CompOptionTypeInt;
-    o[3].name    = "window";
-    o[3].value.i = getIntOptionNamed (option, nOption, "window", 0);
-
-    putInitiate (d, NULL, 0, o, 4);
-
-    return FALSE;
-}
-
-static Bool
-putViewportUp (CompDisplay     *d, 
-               CompAction      *action, 
-               CompActionState state, 
-               CompOption      *option, 
-               int             nOption)
-{
-    CompOption o [4];
-
-    o[0].type    = CompOptionTypeInt;
-    o[0].name    = "x";
-    o[0].value.i = getIntOptionNamed (option, nOption, "x", 0);
-
-    o[1].type    = CompOptionTypeInt;
-    o[1].name    = "y";
-    o[1].value.i = getIntOptionNamed (option, nOption, "y", 0);
-
-    o[2].type    = CompOptionTypeInt;
-    o[2].name    = "type";
-    o[2].value.i = PutViewportUp;
-
-    o[3].type    = CompOptionTypeInt;
-    o[3].name    = "window";
-    o[3].value.i = getIntOptionNamed (option, nOption, "window", 0);
-
-    putInitiate (d, NULL, 0, o, 4);
-
-    return FALSE;
-}
-
-static Bool
-putViewportDown (CompDisplay     *d, 
-                 CompAction      *action, 
-                 CompActionState state, 
-                 CompOption      *option, 
-                 int             nOption)
-{
-    CompOption o [4];
-
-    o[0].type    = CompOptionTypeInt;
-    o[0].name    = "x";
-    o[0].value.i = getIntOptionNamed (option, nOption, "x", 0);
-
-    o[1].type    = CompOptionTypeInt;
-    o[1].name    = "y";
-    o[1].value.i = getIntOptionNamed (option, nOption, "y", 0);
-
-    o[2].type    = CompOptionTypeInt;
-    o[2].name    = "type";
-    o[2].value.i = PutViewportDown;
-
-    o[3].type    = CompOptionTypeInt;
-    o[3].name    = "window";
-    o[3].value.i = getIntOptionNamed (option, nOption, "window", 0);
-
-    putInitiate (d, NULL, 0, o, 4);
-
-    return FALSE;
-}
-
-static Bool
-restore (CompDisplay     *d, 
-         CompAction      *action, 
-         CompActionState state, 
-         CompOption      *option, 
-         int             nOption)
-{
-
-    CompOption o [4];
-
-    o[0].type    = CompOptionTypeInt;
-    o[0].name    = "x";
-    o[0].value.i = getIntOptionNamed (option, nOption, "x", 0);
-
-    o[1].type    = CompOptionTypeInt;
-    o[1].name    = "y";
-    o[1].value.i = getIntOptionNamed (option, nOption, "y", 0);
-
-    o[2].type    = CompOptionTypeInt;
-    o[2].name    = "type";
-    o[2].value.i = PutRestore;
-
-    o[3].type    = CompOptionTypeInt;
-    o[3].name    = "window";
-    o[3].value.i = getIntOptionNamed (option, nOption, "window", 0);
-
-    putInitiate (d, NULL, 0, o, 4);
-
-    return FALSE;
-}
-
-static Bool
-putPointer (CompDisplay     *d, 
-            CompAction      *action, 
-            CompActionState state, 
-            CompOption      *option, 
-            int             nOption)
-{
-    CompOption o[4];
-
-    o[0].type    = CompOptionTypeInt;
-    o[0].name    = "x";
-    o[0].value.i = getIntOptionNamed (option, nOption, "x", 0);
-
-    o[1].type    = CompOptionTypeInt;
-    o[1].name    = "y";
-    o[1].value.i = getIntOptionNamed (option, nOption, "y", 0);
-
-    o[2].type    = CompOptionTypeInt;
-    o[2].name    = "type";
-    o[2].value.i = PutPointer;
-
-    o[3].type    = CompOptionTypeInt;
-    o[3].name    = "window";
-    o[3].value.i = getIntOptionNamed (option, nOption, "window", 0);
-
-    putInitiate (d, NULL, 0, o, 4);
-
-    return FALSE;
-}
-
-static Bool
-putExact (CompDisplay     *d, 
-          CompAction      *action, 
-          CompActionState state, 
-          CompOption      *option, 
-          int             nOption)
-{
-    CompOption o [4];
-
-    o[0].type    = CompOptionTypeInt;
-    o[0].name    = "x";
-    o[0].value.i = getIntOptionNamed (option, nOption, "x", 0);
-
-    o[1].type    = CompOptionTypeInt;
-    o[1].name    = "y";
-    o[1].value.i = getIntOptionNamed (option, nOption, "y", 0);
-
-    o[2].type    = CompOptionTypeInt;
-    o[2].name    = "type";
-    o[2].value.i = PutExact;
-
-    o[3].type    = CompOptionTypeInt;
-    o[3].name    = "window";
-    o[3].value.i = getIntOptionNamed (option, nOption, "window", 0);
-
-    putInitiate (d, NULL, 0, o, 4);
-
-    return FALSE;
-}
-
-static Bool
-putCenter (CompDisplay     *d, 
-           CompAction      *action, 
-           CompActionState state, 
-           CompOption      *option, 
-           int             nOption)
-{
-    CompOption o [4];
-
-    o[0].type    = CompOptionTypeInt;
-    o[0].name    = "x";
-    o[0].value.i = getIntOptionNamed (option, nOption, "x", 0);
-
-    o[1].type    = CompOptionTypeInt;
-    o[1].name    = "y";
-    o[1].value.i = getIntOptionNamed (option, nOption, "y", 0);
-
-    o[2].type    = CompOptionTypeInt;
-    o[2].name    = "type";
-    o[2].value.i = PutCenter;
-
-    o[3].type    = CompOptionTypeInt;
-    o[3].name    = "window";
-    o[3].value.i = getIntOptionNamed (option, nOption, "window", 0);
-
-    putInitiate (d, NULL, 0, o, 4);
-
-    return FALSE;
-}
-
-static Bool
-putLeft (CompDisplay     *d, 
-         CompAction      *action, 
-         CompActionState state, 
-         CompOption      *option, 
-         int             nOption)
-{
-    CompOption o [4];
-
-    o[0].type    = CompOptionTypeInt;
-    o[0].name    = "x";
-    o[0].value.i = getIntOptionNamed (option, nOption, "x", 0);
-
-    o[1].type    = CompOptionTypeInt;
-    o[1].name    = "y";
-    o[1].value.i = getIntOptionNamed (option, nOption, "y", 0);
-
-    o[2].type    = CompOptionTypeInt;
-    o[2].name    = "type";
-    o[2].value.i = PutLeft;
-
-    o[3].type    = CompOptionTypeInt;
-    o[3].name    = "window";
-    o[3].value.i = getIntOptionNamed (option, nOption, "window", 0);
-
-    putInitiate (d, NULL, 0, o, 4);
-
-    return FALSE;
-}
-
-static Bool
-putTopLeft (CompDisplay     *d, 
-            CompAction      *action, 
-            CompActionState state, 
-            CompOption      *option, 
-            int             nOption)
-{
-    CompOption o [4];
-
-    o[0].type    = CompOptionTypeInt;
-    o[0].name    = "x";
-    o[0].value.i = getIntOptionNamed (option, nOption, "x", 0);
-
-    o[1].type    = CompOptionTypeInt;
-    o[1].name    = "y";
-    o[1].value.i = getIntOptionNamed (option, nOption, "y", 0);
-
-    o[2].type    = CompOptionTypeInt;
-    o[2].name    = "type";
-    o[2].value.i = PutTopLeft;
-
-    o[3].type    = CompOptionTypeInt;
-    o[3].name    = "window";
-    o[3].value.i = getIntOptionNamed (option, nOption, "window", 0);
-
-    putInitiate (d, NULL, 0, o, 4);
-
-    return FALSE;
-}
-
-static Bool
-putTop (CompDisplay     *d, 
-        CompAction      *action, 
-        CompActionState state, 
-        CompOption      *option, 
-        int             nOption)
-{
-    CompOption o [4];
-
-    o[0].type    = CompOptionTypeInt;
-    o[0].name    = "x";
-    o[0].value.i = getIntOptionNamed (option, nOption, "x", 0);
-
-    o[1].type    = CompOptionTypeInt;
-    o[1].name    = "y";
-    o[1].value.i = getIntOptionNamed (option, nOption, "y", 0);
-
-    o[2].type    = CompOptionTypeInt;
-    o[2].name    = "type";
-    o[2].value.i = PutTop;
-
-    o[3].type    = CompOptionTypeInt;
-    o[3].name    = "window";
-    o[3].value.i = getIntOptionNamed (option, nOption, "window", 0);
-
-    putInitiate (d, NULL, 0, o, 4);
-
-    return FALSE;
-}
-
-static Bool
-putTopRight (CompDisplay     *d, 
-             CompAction      *action, 
-             CompActionState state, 
-             CompOption      *option, 
-             int             nOption)
-{
-    CompOption o [4];
-
-    o[0].type    = CompOptionTypeInt;
-    o[0].name    = "x";
-    o[0].value.i = getIntOptionNamed (option, nOption, "x", 0);
-
-    o[1].type    = CompOptionTypeInt;
-    o[1].name    = "y";
-    o[1].value.i = getIntOptionNamed (option, nOption, "y", 0);
-
-    o[2].type    = CompOptionTypeInt;
-    o[2].name    = "type";
-    o[2].value.i = PutTopRight;
-
-    o[3].type    = CompOptionTypeInt;
-    o[3].name    = "window";
-    o[3].value.i = getIntOptionNamed (option, nOption, "window", 0);
-
-    putInitiate (d, NULL, 0, o, 4);
-
-    return FALSE;
-}
-
-static Bool
-putRight (CompDisplay     *d, 
-          CompAction      *action, 
-          CompActionState state, 
-          CompOption      *option, 
-          int             nOption)
-{
-    CompOption o [4];
-
-    o[0].type    = CompOptionTypeInt;
-    o[0].name    = "x";
-    o[0].value.i = getIntOptionNamed (option, nOption, "x", 0);
-
-    o[1].type    = CompOptionTypeInt;
-    o[1].name    = "y";
-    o[1].value.i = getIntOptionNamed (option, nOption, "y", 0);
-
-    o[2].type    = CompOptionTypeInt;
-    o[2].name    = "type";
-    o[2].value.i = PutRight;
-
-    o[3].type    = CompOptionTypeInt;
-    o[3].name    = "window";
-    o[3].value.i = getIntOptionNamed (option, nOption, "window", 0);
-
-    putInitiate (d, NULL, 0, o, 4);
-
-    return FALSE;
-}
-
-static Bool
-putBottomRight (CompDisplay     *d, 
-                CompAction      *action, 
-                CompActionState state, 
-                CompOption      *option, 
-                int             nOption)
-{
-    CompOption o [4];
-
-    o[0].type    = CompOptionTypeInt;
-    o[0].name    = "x";
-    o[0].value.i = getIntOptionNamed (option, nOption, "x", 0);
-
-    o[1].type    = CompOptionTypeInt;
-    o[1].name    = "y";
-    o[1].value.i = getIntOptionNamed (option, nOption, "y", 0);
-
-    o[2].type    = CompOptionTypeInt;
-    o[2].name    = "type";
-    o[2].value.i = PutBottomRight;
-
-    o[3].type    = CompOptionTypeInt;
-    o[3].name    = "window";
-    o[3].value.i = getIntOptionNamed (option, nOption, "window", 0);
-
-    putInitiate (d, NULL, 0, o, 4);
-
-    return FALSE;
-}
-
-static Bool
-putBottom (CompDisplay     *d, 
-           CompAction      *action, 
-           CompActionState state, 
-           CompOption      *option, 
-           int             nOption)
-{
-    CompOption o [4];
-
-    o[0].type    = CompOptionTypeInt;
-    o[0].name    = "x";
-    o[0].value.i = getIntOptionNamed (option, nOption, "x", 0);
-
-    o[1].type    = CompOptionTypeInt;
-    o[1].name    = "y";
-    o[1].value.i = getIntOptionNamed (option, nOption, "y", 0);
-
-    o[2].type    = CompOptionTypeInt;
-    o[2].name    = "type";
-    o[2].value.i = PutBottom;
-
-    o[3].type    = CompOptionTypeInt;
-    o[3].name    = "window";
-    o[3].value.i = getIntOptionNamed (option, nOption, "window", 0);
-
-    putInitiate (d, NULL, 0, o, 4);
-
-    return FALSE;
-}
-
-static Bool
-putBottomLeft (CompDisplay     *d, 
-               CompAction      *action, 
-               CompActionState state, 
-               CompOption      *option, 
-               int             nOption)
-{
-    CompOption o [4];
-
-    o[0].type    = CompOptionTypeInt;
-    o[0].name    = "x";
-    o[0].value.i = getIntOptionNamed (option, nOption, "x", 0);
-
-    o[1].type    = CompOptionTypeInt;
-    o[1].name    = "y";
-    o[1].value.i = getIntOptionNamed (option, nOption, "y", 0);
-
-    o[2].type    = CompOptionTypeInt;
-    o[2].name    = "type";
-    o[2].value.i = PutBottomLeft;
-
-    o[3].type    = CompOptionTypeInt;
-    o[3].name    = "window";
-    o[3].value.i = getIntOptionNamed (option, nOption, "window", 0);
-
-    putInitiate (d, NULL, 0, o, 4);
-
-    return FALSE;
-}
-
-static CompOption *
-putGetDisplayOptions (CompPlugin  *p, 
-                      CompDisplay *display, 
-                      int         *count)
-{
-    PUT_DISPLAY (display);
-    *count = NUM_OPTIONS (pd);
-    return pd->opt;
-}
-
-static Bool
-putSetDisplayOption (CompPlugin  *p, 
-                     CompDisplay     *display,
-                     char            *name, 
-                     CompOptionValue *value)
-{
-    CompOption *o;
-    int index;
-
-    PUT_DISPLAY (display);
-
-    o = compFindOption (pd->opt, NUM_OPTIONS (pd), name, &index);
-
-    if (!o)
-        return FALSE;
-
-    switch (index) 
-    {
-    case PUT_DISPLAY_OPTION_RESTORE:
-    case PUT_DISPLAY_OPTION_CENTER:
-    case PUT_DISPLAY_OPTION_LEFT:
-    case PUT_DISPLAY_OPTION_TOPLEFT:
-    case PUT_DISPLAY_OPTION_TOP:
-    case PUT_DISPLAY_OPTION_TOPRIGHT:
-    case PUT_DISPLAY_OPTION_RIGHT:
-    case PUT_DISPLAY_OPTION_BOTTOMRIGHT:
-    case PUT_DISPLAY_OPTION_BOTTOM:
-    case PUT_DISPLAY_OPTION_BOTTOMLEFT:
-    case PUT_DISPLAY_OPTION_VIEWPORT_LEFT:
-    case PUT_DISPLAY_OPTION_VIEWPORT_RIGHT: 
-    case PUT_DISPLAY_OPTION_VIEWPORT_UP:
-    case PUT_DISPLAY_OPTION_VIEWPORT_DOWN: 
-    case PUT_DISPLAY_OPTION_VIEWPORT:
-    case PUT_DISPLAY_OPTION_VIEWPORT_1:
-    case PUT_DISPLAY_OPTION_VIEWPORT_2:
-    case PUT_DISPLAY_OPTION_VIEWPORT_3:
-    case PUT_DISPLAY_OPTION_VIEWPORT_4:
-    case PUT_DISPLAY_OPTION_VIEWPORT_5:
-    case PUT_DISPLAY_OPTION_VIEWPORT_6:
-    case PUT_DISPLAY_OPTION_VIEWPORT_7:
-    case PUT_DISPLAY_OPTION_VIEWPORT_8:
-    case PUT_DISPLAY_OPTION_VIEWPORT_9:
-    case PUT_DISPLAY_OPTION_VIEWPORT_10:
-    case PUT_DISPLAY_OPTION_VIEWPORT_11:
-    case PUT_DISPLAY_OPTION_VIEWPORT_12:
-    case PUT_DISPLAY_OPTION_EXACT:
-    case PUT_DISPLAY_OPTION_POINTER:
-        if (setDisplayAction (display, o, value))
-            return TRUE;
-    default:
-        break;
-    }
-    return FALSE;
-}
-
-static void
-putDisplayInitOptions (PutDisplay *pd, 
-                       Display    *display)
-{
-    CompOption *o;
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_VIEWPORT];
-    o->name                     = "put_viewport";
-    o->shortDesc                = N_("Put on Face");             
-    o->longDesc                 = N_("Move window to face");           
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putToViewport;      
-    o->value.action.terminate   = 0;                 
-    o->value.action.bell        = FALSE;            
-    o->value.action.edgeMask    = 0;               
-    o->value.action.state       = 0;
-    o->value.action.type        = CompBindingTypeNone;
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_VIEWPORT_1];
-    o->name                     = "put_viewport_1";
-    o->shortDesc                = N_("Put on Face 1");             
-    o->longDesc                 = N_("Move window to face 1");           
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putToViewport;      
-    o->value.action.terminate   = 0;                 
-    o->value.action.bell        = FALSE;            
-    o->value.action.edgeMask    = 0;               
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeNone;
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_VIEWPORT_2];
-    o->name                     = "put_viewport_2";
-    o->shortDesc                = N_("Put on Face 2");             
-    o->longDesc                 = N_("Move window to face 2");           
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putToViewport;      
-    o->value.action.terminate   = 0;                 
-    o->value.action.bell        = FALSE;            
-    o->value.action.edgeMask    = 0;               
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeNone;
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_VIEWPORT_3];
-    o->name                     = "put_viewport_3";
-    o->shortDesc                = N_("Put on Face 3");             
-    o->longDesc                 = N_("Move window to face 3");           
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putToViewport;      
-    o->value.action.terminate   = 0;                 
-    o->value.action.bell        = FALSE;            
-    o->value.action.edgeMask    = 0;               
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeNone;
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_VIEWPORT_4];
-    o->name                     = "put_viewport_4";
-    o->shortDesc                = N_("Put on Face 4");             
-    o->longDesc                 = N_("Move window to face 4");           
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putToViewport;      
-    o->value.action.terminate   = 0;                 
-    o->value.action.bell        = FALSE;            
-    o->value.action.edgeMask    = 0;               
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeNone;
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_VIEWPORT_5];
-    o->name                     = "put_viewport_5";
-    o->shortDesc                = N_("Put on Face 5");             
-    o->longDesc                 = N_("Move window to face 5");           
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putToViewport;      
-    o->value.action.terminate   = 0;                 
-    o->value.action.bell        = FALSE;            
-    o->value.action.edgeMask    = 0;               
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeNone;
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_VIEWPORT_6];
-    o->name                     = "put_viewport_6";
-    o->shortDesc                = N_("Put on Face 6");             
-    o->longDesc                 = N_("Move window to face 6");           
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putToViewport;      
-    o->value.action.terminate   = 0;                 
-    o->value.action.bell        = FALSE;            
-    o->value.action.edgeMask    = 0;               
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeNone;
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_VIEWPORT_7];
-    o->name                     = "put_viewport_7";
-    o->shortDesc                = N_("Put on Face 7");             
-    o->longDesc                 = N_("Move window to face 7");           
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putToViewport;      
-    o->value.action.terminate   = 0;                 
-    o->value.action.bell        = FALSE;            
-    o->value.action.edgeMask    = 0;               
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeNone;
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_VIEWPORT_8];
-    o->name                     = "put_viewport_8";
-    o->shortDesc                = N_("Put on Face 8");             
-    o->longDesc                 = N_("Move window to face 8");           
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putToViewport;      
-    o->value.action.terminate   = 0;                 
-    o->value.action.bell        = FALSE;            
-    o->value.action.edgeMask    = 0;               
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeNone;
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_VIEWPORT_9];
-    o->name                     = "put_viewport_9";
-    o->shortDesc                = N_("Put on Face 9");             
-    o->longDesc                 = N_("Move window to face 9");           
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putToViewport;      
-    o->value.action.terminate   = 0;                 
-    o->value.action.bell        = FALSE;            
-    o->value.action.edgeMask    = 0;               
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeNone;
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_VIEWPORT_10];
-    o->name                     = "put_viewport_10";
-    o->shortDesc                = N_("Put on Face 10");             
-    o->longDesc                 = N_("Move window to face 10");           
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putToViewport;      
-    o->value.action.terminate   = 0;                 
-    o->value.action.bell        = FALSE;            
-    o->value.action.edgeMask    = 0;               
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeNone;
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_VIEWPORT_11];
-    o->name                     = "put_viewport_11";
-    o->shortDesc                = N_("Put on Face 11");             
-    o->longDesc                 = N_("Move window to face 11");           
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putToViewport;      
-    o->value.action.terminate   = 0;                 
-    o->value.action.bell        = FALSE;            
-    o->value.action.edgeMask    = 0;               
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeNone;
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_VIEWPORT_12];
-    o->name                     = "put_viewport_12";
-    o->shortDesc                = N_("Put on Face 12");             
-    o->longDesc                 = N_("Move window to face 12");           
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putToViewport;      
-    o->value.action.terminate   = 0;                 
-    o->value.action.bell        = FALSE;            
-    o->value.action.edgeMask    = 0;               
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeNone;
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_VIEWPORT_LEFT];
-    o->name                     = "put_viewport_left";
-    o->shortDesc                = N_("Viewport Left");
-    o->longDesc                 = N_("Move window to the viewport "
-                                     "on left");
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putViewportLeft;
-    o->value.action.terminate   = 0;
-    o->value.action.bell        = FALSE;
-    o->value.action.edgeMask    = 0;
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeNone;
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_VIEWPORT_RIGHT];
-    o->name                     = "put_viewport_right";
-    o->shortDesc                = N_("Viewport Right");
-    o->longDesc                 = N_("Move window to the viewport "
-                                     "on right");
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putViewportRight;
-    o->value.action.terminate   = 0;
-    o->value.action.bell        = FALSE;
-    o->value.action.edgeMask    = 0;
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeNone;
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_VIEWPORT_UP];
-    o->name                     = "put_viewport_up";
-    o->shortDesc                = N_("Viewport Up");
-    o->longDesc                 = N_("Move window to the viewport "
-                                     "on top");
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putViewportUp;
-    o->value.action.terminate   = 0;
-    o->value.action.bell        = FALSE;
-    o->value.action.edgeMask    = 0;
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeNone;
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_VIEWPORT_DOWN];
-    o->name                     = "put_viewport_down";
-    o->shortDesc                = N_("Viewport Down");
-    o->longDesc                 = N_("Move window to the viewport "
-                                     "on bottom");
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putViewportDown;
-    o->value.action.terminate   = 0;
-    o->value.action.bell        = FALSE;
-    o->value.action.edgeMask    = 0;
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeNone;
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_RESTORE];
-    o->name                     = "put_restore";
-    o->shortDesc                = N_("Restore Position");
-    o->longDesc                 = N_("Move window to the last position");
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = restore;
-    o->value.action.terminate   = 0;
-    o->value.action.bell        = FALSE;
-    o->value.action.edgeMask    = 0;
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeKey;
-    o->value.action.key.modifiers = PUT_RESTORE_MODIFIERS_DEFAULT;
-    o->value.action.key.keycode   = 
-        XKeysymToKeycode (display, 
-            XStringToKeysym (PUT_RESTORE_KEY_DEFAULT));
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_POINTER];
-    o->name                     = "put_pointer";
-    o->shortDesc                = N_("Put Pointer");             
-    o->longDesc                 = N_("Move window to the pointer position "
-                                     "using screen quadrant");           
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putPointer;      
-    o->value.action.terminate   = 0;                 
-    o->value.action.bell        = FALSE;            
-    o->value.action.edgeMask    = 0;               
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeKey;
-    o->value.action.key.modifiers = PUT_POINTER_MODIFIERS_DEFAULT;
-    o->value.action.key.keycode   = 
-        XKeysymToKeycode (display, 
-            XStringToKeysym (PUT_POINTER_KEY_DEFAULT));
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_EXACT];
-    o->name                     = "put_exact";
-    o->shortDesc                = N_("Put Exact");             
-    o->longDesc                 = N_("Move window to x, y");           
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putExact;      
-    o->value.action.terminate   = 0;                 
-    o->value.action.bell        = FALSE;            
-    o->value.action.edgeMask    = 0;               
-    o->value.action.state       = 0;
-    o->value.action.type        = CompBindingTypeNone;
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_PUT];
-    o->name                     = "put";
-    o->shortDesc                = N_("Put");             
-    o->longDesc                 = N_("Move window");           
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putInitiate;      
-    o->value.action.terminate   = 0;                 
-    o->value.action.bell        = FALSE;            
-    o->value.action.edgeMask    = 0;               
-    o->value.action.state       = 0;
-    o->value.action.type        = CompBindingTypeNone;
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_CENTER];
-    o->name                     = "put_center";
-    o->shortDesc                = N_("Put Center");
-    o->longDesc                 = N_("Move window to the center");
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putCenter;
-    o->value.action.terminate   = 0;
-    o->value.action.bell        = FALSE;
-    o->value.action.edgeMask    = 0;
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeKey;
-    o->value.action.key.modifiers = PUT_CENTER_MODIFIERS_DEFAULT;
-    o->value.action.key.keycode   = 
-        XKeysymToKeycode (display, 
-            XStringToKeysym (PUT_CENTER_KEY_DEFAULT));
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_LEFT];
-    o->name                     = "put_left";
-    o->shortDesc                = N_("Put Left");
-    o->longDesc                 = N_("Move window to the center "
-                                     "of the left edge");
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putLeft;
-    o->value.action.terminate   = 0;
-    o->value.action.bell        = FALSE;
-    o->value.action.edgeMask    = 0;
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeKey;
-    o->value.action.key.modifiers = PUT_LEFT_MODIFIERS_DEFAULT;
-    o->value.action.key.keycode   = 
-        XKeysymToKeycode (display, 
-            XStringToKeysym (PUT_LEFT_KEY_DEFAULT));
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_TOPLEFT];
-    o->name                     = "put_top_left";
-    o->shortDesc                = N_("Put Top Left");
-    o->longDesc                 = N_("Move Window to the top left corner");
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putTopLeft;
-    o->value.action.terminate   = 0;
-    o->value.action.bell        = FALSE;
-    o->value.action.edgeMask    = 0;
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeKey;
-    o->value.action.key.modifiers = PUT_TOPLEFT_MODIFIERS_DEFAULT;
-    o->value.action.key.keycode   = 
-        XKeysymToKeycode (display, 
-            XStringToKeysym (PUT_TOPLEFT_KEY_DEFAULT));
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_TOP];
-    o->name                     = "put_top";
-    o->shortDesc                = N_("Put Top");
-    o->longDesc                 = N_("Move window to the center "
-                                     "of the top edge");
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putTop;
-    o->value.action.terminate   = 0;
-    o->value.action.bell        = FALSE;
-    o->value.action.edgeMask    = 0;
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeKey;
-    o->value.action.key.modifiers = PUT_TOP_MODIFIERS_DEFAULT;
-    o->value.action.key.keycode   = 
-        XKeysymToKeycode (display, 
-            XStringToKeysym (PUT_TOP_KEY_DEFAULT));
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_TOPRIGHT];
-    o->name                     = "put_top_right";
-    o->shortDesc                = N_("Put Top Right");
-    o->longDesc                 = N_("Move window to the top right corner");
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putTopRight;
-    o->value.action.terminate   = 0;
-    o->value.action.bell        = FALSE;
-    o->value.action.edgeMask    = 0;
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeKey;
-    o->value.action.key.modifiers = PUT_TOPRIGHT_MODIFIERS_DEFAULT;
-    o->value.action.key.keycode   = 
-        XKeysymToKeycode (display, 
-            XStringToKeysym (PUT_TOPRIGHT_KEY_DEFAULT));
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_RIGHT];
-    o->name                     = "put_right";
-    o->shortDesc                = N_("Put Right");
-    o->longDesc                 = N_("Move window to the center "
-                                     "of the right edge");
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putRight;
-    o->value.action.terminate   = 0;
-    o->value.action.bell        = FALSE;
-    o->value.action.edgeMask    = 0;
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeKey;
-    o->value.action.key.modifiers = PUT_RIGHT_MODIFIERS_DEFAULT;
-    o->value.action.key.keycode   = 
-        XKeysymToKeycode (display, 
-            XStringToKeysym (PUT_RIGHT_KEY_DEFAULT));
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_BOTTOMRIGHT];
-    o->name                     = "put_bottom_right";
-    o->shortDesc                = N_("Put Bottom Right");
-    o->longDesc                 = N_("Move window to the bottom "
-                                     "right corner");
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putBottomRight;
-    o->value.action.terminate   = 0;
-    o->value.action.bell        = FALSE;
-    o->value.action.edgeMask    = 0;
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeKey;
-    o->value.action.key.modifiers = PUT_BOTTOMRIGHT_MODIFIERS_DEFAULT;
-    o->value.action.key.keycode   = 
-        XKeysymToKeycode (display, 
-            XStringToKeysym (PUT_BOTTOMRIGHT_KEY_DEFAULT));
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_BOTTOM];
-    o->name                     = "put_bottom";
-    o->shortDesc                = N_("Put Bottom");
-    o->longDesc                 = N_("Move window to the center "
-                                     "of the bottom edge");
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putBottom;
-    o->value.action.terminate   = 0;
-    o->value.action.bell        = FALSE;
-    o->value.action.edgeMask    = 0;
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeKey;
-    o->value.action.key.modifiers = PUT_BOTTOM_MODIFIERS_DEFAULT;
-    o->value.action.key.keycode   = 
-        XKeysymToKeycode (display, 
-            XStringToKeysym (PUT_BOTTOM_KEY_DEFAULT));
-
-    o = &pd->opt[PUT_DISPLAY_OPTION_BOTTOMLEFT];
-    o->name                     = "put_bottom_left";
-    o->shortDesc                = N_("Put Bottom Left");
-    o->longDesc                 = N_("Move window to the bottom "
-                                     "left corner");
-    o->type                     = CompOptionTypeAction;
-    o->value.action.initiate    = putBottomLeft;
-    o->value.action.terminate   = 0;
-    o->value.action.bell        = FALSE;
-    o->value.action.edgeMask    = 0;
-    o->value.action.state       = CompActionStateInitKey;
-    o->value.action.state      |= CompActionStateInitButton;
-    o->value.action.type        = CompBindingTypeKey;
-    o->value.action.key.modifiers = PUT_BOTTOMLEFT_MODIFIERS_DEFAULT;
-    o->value.action.key.keycode   = 
-        XKeysymToKeycode (display, 
-            XStringToKeysym (PUT_BOTTOMLEFT_KEY_DEFAULT));
-}
-
-static Bool
-putInitDisplay (CompPlugin  *p, 
-                CompDisplay *d)
-{
-    PutDisplay *pd;
-
-    pd = malloc (sizeof (PutDisplay));
-    if (!pd)
-        return FALSE;
-
-    pd->screenPrivateIndex = allocateScreenPrivateIndex (d);
-    if (pd->screenPrivateIndex < 0)
-    {
-        free (pd);
-        return FALSE;
-    }
-
-    putDisplayInitOptions (pd, d->display);
-    d->privates[displayPrivateIndex].ptr = pd;
-
-    return TRUE;
-}
-
-static void
-putFiniDisplay (CompPlugin  *p, 
-                CompDisplay *d)
-{
-    PUT_DISPLAY (d);
-    freeScreenPrivateIndex (d, pd->screenPrivateIndex);
-    free (pd);
-}
-
-static Bool
-putInitScreen (CompPlugin *p, 
-               CompScreen *s)
-{
-    PutScreen *ps;
-
-    PUT_DISPLAY (s->display);
-
-    ps = malloc (sizeof (PutScreen));
-    if (!ps)
-        return FALSE;
-
-    ps->windowPrivateIndex = allocateWindowPrivateIndex (s);
-    if (ps->windowPrivateIndex < 0)
-    {
-        free (ps);
-        return FALSE;
-    }
-
-    ps->grabIndex = 0;
-    ps->speed = PUT_SPEED_DEFAULT;
-    ps->timestep = PUT_TIMESTEP_DEFAULT;
-    ps->moreAdjust = FALSE;
-    ps->padLeft = PUT_LEFT_PAD_DEFAULT;
-    ps->padTop = PUT_TOP_PAD_DEFAULT;
-    ps->padRight = PUT_RIGHT_PAD_DEFAULT;
-    ps->padBottom = PUT_BOTTOM_PAD_DEFAULT;
-    ps->vpMoving = FALSE;
-
-    putScreenInitOptions (ps);
-
-    addScreenAction (s, &pd->opt[PUT_DISPLAY_OPTION_POINTER].value.action);
-    addScreenAction (s, &pd->opt[PUT_DISPLAY_OPTION_RESTORE].value.action);
-    addScreenAction (s, &pd->opt[PUT_DISPLAY_OPTION_CENTER].value.action);
-    addScreenAction (s, &pd->opt[PUT_DISPLAY_OPTION_LEFT].value.action);
-    addScreenAction (s, &pd->opt[PUT_DISPLAY_OPTION_TOPLEFT].value.action);
-    addScreenAction (s, &pd->opt[PUT_DISPLAY_OPTION_TOP].value.action);
-    addScreenAction (s, &pd->opt[PUT_DISPLAY_OPTION_TOPRIGHT].value.action);
-    addScreenAction (s, &pd->opt[PUT_DISPLAY_OPTION_RIGHT].value.action);
-    addScreenAction (s, 
-        &pd->opt[PUT_DISPLAY_OPTION_BOTTOMRIGHT].value.action);
-    addScreenAction (s, &pd->opt[PUT_DISPLAY_OPTION_BOTTOM].value.action);
-    addScreenAction (s, &pd->opt[PUT_DISPLAY_OPTION_BOTTOMLEFT].value.action);
-
-    WRAP (ps, s, preparePaintScreen, putPreparePaintScreen);
-    WRAP (ps, s, donePaintScreen, putDonePaintScreen);
-    WRAP (ps, s, paintScreen, putPaintScreen);
-    WRAP (ps, s, paintWindow, putPaintWindow);
-
-    s->privates[pd->screenPrivateIndex].ptr = ps;
-    return TRUE;
-}
-
-static void
-putFiniScreen (CompPlugin *p, 
-               CompScreen *s)
-{
-    PUT_SCREEN (s);
-    freeWindowPrivateIndex (s, ps->windowPrivateIndex);
-    UNWRAP (ps, s, preparePaintScreen);
-    UNWRAP (ps, s, donePaintScreen);
-    UNWRAP (ps, s, paintScreen);
-    UNWRAP (ps, s, paintWindow);
-    free (ps);
-}
-
-static Bool
-putInitWindow (CompPlugin *p, 
-               CompWindow *w)
-{
-    PutWindow *pw;
-
-    PUT_SCREEN (w->screen);
-
-    pw = malloc (sizeof (PutWindow));
-    if (!pw)
-        return FALSE;
-
-    pw->tx = pw->ty = pw->xVelocity = pw->yVelocity = 0.0f;
-    pw->dx = pw->dy = 0;
-    pw->lastX = pw->x = w->serverX;
-    pw->lastY = pw->y = w->serverY;
-    pw->adjust = FALSE;
-
-    w->privates[ps->windowPrivateIndex].ptr = pw;
-
-    return TRUE;
-}
-
-static void
-putFiniWindow (CompPlugin *p, 
-               CompWindow *w)
-{
-    PUT_WINDOW (w);
-    free (pw);
-}
-
-static Bool
-putInit (CompPlugin *p)
-{
-    displayPrivateIndex = allocateDisplayPrivateIndex ();
-    if (displayPrivateIndex < 0)
-        return FALSE;
-
-    return TRUE;
-}
-
-static void
-putFini (CompPlugin *p)
-{
-    if (displayPrivateIndex >= 0)
-        freeDisplayPrivateIndex (displayPrivateIndex);
-}
-
-static int
-putGetVersion (CompPlugin *plugin, 
-               int        version)
-{
-     return ABIVERSION;
-}
-
-CompPluginVTable putVTable = {
-    "put",
-    N_("Put"),
-    N_("Put window"),
-    putGetVersion,
-    putInit,
-    putFini,
-    putInitDisplay,
-    putFiniDisplay,
-    putInitScreen,
-    putFiniScreen,
-    putInitWindow,
-    putFiniWindow,
-    putGetDisplayOptions,
-    putSetDisplayOption,
-    putGetScreenOptions,
-    putSetScreenOption,
-    0,
-    0,
-    0,
-    0
-};
-
-CompPluginVTable *
-getCompPluginInfo (void)
-{
-    return &putVTable;
-}
-
-
diff -Nurp extra-plugins.orig/quickchange/quickchange.c extra-plugins/quickchange/quickchange.c
--- extra-plugins.orig/quickchange/quickchange.c	2007-04-03 02:33:25.000000000 +0000
+++ extra-plugins/quickchange/quickchange.c	2007-05-10 13:19:06.000000000 +0000
@@ -142,8 +142,6 @@ quickchangeDisplayInitOptions (Quickchan
 
     o = &qd->opt[QUICKCHANGE_DISPLAY_OPTION_CUBE_SIZE_UP];
     o->name	        = "cube_size_up";
-    o->shortDesc        = N_("Increase cube horizontal size (ie. number of faces)");
-    o->longDesc	        = N_("Increase cube horizontal size (ie. number of faces)");
     o->type	        = CompOptionTypeAction;
     o->value.action.initiate            = quickchangeCubeHSizeUp;
     o->value.action.terminate           = FALSE;
@@ -156,8 +154,6 @@ quickchangeDisplayInitOptions (Quickchan
 
     o = &qd->opt[QUICKCHANGE_DISPLAY_OPTION_CUBE_SIZE_DOWN];
     o->name	        = "cube_size_down";
-    o->shortDesc        = N_("Decrease cube horizontal size (ie. number of faces)");
-    o->longDesc	        = N_("Decrease cube horizontal size (ie. number of faces)");
     o->type	        = CompOptionTypeAction;
     o->value.action.initiate            = quickchangeCubeHSizeDown;
     o->value.action.terminate           = FALSE;
diff -Nurp extra-plugins.orig/reflex/reflex.c~ extra-plugins/reflex/reflex.c~
--- extra-plugins.orig/reflex/reflex.c~	2007-04-03 13:25:29.000000000 +0000
+++ extra-plugins/reflex/reflex.c~	1970-01-01 00:00:00.000000000 +0000
@@ -1,386 +0,0 @@
-/*
- * Compiz reflection effect plugin
- *
- * mblur.c
- *
- * Copyright : (C) 2007 by Dennis Kasprzyk
- * E-mail    : onestone@beryl-project.org
- *
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#include <stdlib.h>
-#include <string.h>
-#include <stdio.h>
-
-#include <X11/Xatom.h>
-#include <X11/extensions/Xrender.h>
-
-#include <compiz.h>
-
-#include "reflex_options.h"
-
-
-static int displayPrivateIndex = 0;
-
-typedef struct _ReflexDisplay
-{
-	int screenPrivateIndex;
-} ReflexDisplay;
-
-
-typedef struct _ReflexScreen
-{
-	int windowPrivateIndex;
-
-	DrawWindowTextureProc drawWindowTexture;
-
-	Bool imageLoaded;
-	CompTexture image;
-	unsigned int width;
-	unsigned int height;
-
-	int function;
-} ReflexScreen;
-
-#define GET_REFLEX_DISPLAY(d)                                  \
-    ((ReflexDisplay *) (d)->privates[displayPrivateIndex].ptr)
-
-#define REFLEX_DISPLAY(d)                                      \
-    ReflexDisplay *rd = GET_REFLEX_DISPLAY (d)
-
-#define GET_REFLEX_SCREEN(s, rd)                               \
-    ((ReflexScreen *) (s)->privates[(rd)->screenPrivateIndex].ptr)
-
-#define REFLEX_SCREEN(s)                                       \
-    ReflexScreen *rs = GET_REFLEX_SCREEN (s, GET_REFLEX_DISPLAY (s->display))
-
-static int
-getReflexFragmentFunction (CompScreen * s, CompTexture * texture,
-						   int param, int unit)
-{
-	CompFunctionData *data;
-
-	REFLEX_SCREEN (s);
-
-	int target;
-	char *targetString;
-
-	if (texture->target == GL_TEXTURE_2D)
-	{
-		target = COMP_FETCH_TARGET_2D;
-	}
-	else
-	{
-		target = COMP_FETCH_TARGET_RECT;
-	}
-
-	if (rs->image.target == GL_TEXTURE_2D)
-	{
-		targetString = "2D";
-	}
-	else
-	{
-		targetString = "RECT";
-	}
-
-
-	if (rs->function)
-		return rs->function;
-
-	data = createFunctionData ();
-	if (data)
-	{
-		Bool ok = TRUE;
-		int handle = 0;
-		char str[1024];
-
-		ok &= addTempHeaderOpToFunctionData (data, "image");
-		ok &= addTempHeaderOpToFunctionData (data, "coord");
-		ok &= addTempHeaderOpToFunctionData (data, "div");
-		ok &= addTempHeaderOpToFunctionData (data, "mask");
-
-		ok &= addFetchOpToFunctionData (data, "output", NULL, target);
-		ok &= addColorOpToFunctionData (data, "output", "output");
-
-		snprintf (str, 1024,
-				  "MUL coord, fragment.position, program.env[%d];"
-				  "ADD coord, coord, program.env[%d];", param, param + 1);
-		ok &= addDataOpToFunctionData (data, str);
-
-		snprintf (str, 1024,
-				  "TEX image, coord, texture[%d], %s;", unit, targetString);
-		ok &= addDataOpToFunctionData (data, str);
-
-		snprintf (str, 1024,
-				  "MUL_SAT mask, output.a, program.env[%d].r;"
-				  "SUB div.a, 1.0, output.a;"
-				  "MUL image, image, div.a;"
-				  "MUL image, image, mask.a;"
-				  "ADD output, output, image;", param + 2);
-		ok &= addDataOpToFunctionData (data, str);
-
-		if (!ok)
-		{
-			destroyFunctionData (data);
-			return 0;
-		}
-
-		handle = createFragmentFunction (s, "reflex", data);
-
-		rs->function = handle;
-
-		destroyFunctionData (data);
-
-		return handle;
-	}
-
-	return 0;
-}
-
-static void
-reflexScreenOptionChanged (CompScreen * s,
-						   CompOption * opt, ReflexScreenOptions num)
-{
-	REFLEX_SCREEN (s);
-	switch (num)
-	{
-	case ReflexScreenOptionFile:
-		if (rs->imageLoaded)
-		{
-			finiTexture (s, &rs->image);
-			initTexture (s, &rs->image);
-		}
-		rs->imageLoaded =
-			readImageToTexture (s, &rs->image, reflexGetFile (s), &rs->width,
-								&rs->height);
-		damageScreen (s);
-		break;
-	default:
-		damageScreen (s);
-		break;
-	}
-}
-
-static void
-reflexDrawWindowTexture (CompWindow * w,
-						 CompTexture * texture,
-						 const FragmentAttrib * attrib, unsigned int mask)
-{
-	CompScreen *s = w->screen;
-	REFLEX_SCREEN (s);
-
-	Bool enabled = (texture == w->texture) ?
-		reflexGetWindow (s) : reflexGetDecoration (s);
-
-	if (enabled && matchEval (reflexGetMatch (s), w) && rs->imageLoaded &&
-		w->screen->fragmentProgram)
-	{
-		FragmentAttrib fa = *attrib;
-		int function;
-		int unit = 0;
-		int param;
-		float tx, ty, dx, mx;
-
-		mx = w->attrib.x + (w->width / 2);
-		mx /= s->width / 2.0;
-		mx -= 1.0;
-		mx *= -0.065;
-
-		if (rs->image.target == GL_TEXTURE_2D)
-		{
-			tx = 1.0 / s->width;
-			ty = 1.0 / s->height;
-			dx = mx;
-		}
-		else
-		{
-			tx = 1.0 / s->width * rs->width;
-			ty = 1.0 / s->height * rs->height;
-			dx = mx * rs->width;
-		}
-
-
-
-		unit = allocFragmentTextureUnits (&fa, 1);
-		param = allocFragmentParameters (&fa, 3);
-
-		function =
-			getReflexFragmentFunction (w->screen, texture, param, unit);
-		if (function)
-		{
-			addFragmentFunction (&fa, function);
-			(*s->activeTexture) (GL_TEXTURE0_ARB + unit);
-			enableTexture (s, &rs->image, COMP_TEXTURE_FILTER_GOOD);
-			(*s->activeTexture) (GL_TEXTURE0_ARB);
-			(*s->programEnvParameter4f) (GL_FRAGMENT_PROGRAM_ARB, param,
-										 tx, ty, 0.0f, 0.0f);
-			(*s->programEnvParameter4f) (GL_FRAGMENT_PROGRAM_ARB, param + 1,
-										 dx, 0.0f, 0.0f, 0.0f);
-			(*s->programEnvParameter4f) (GL_FRAGMENT_PROGRAM_ARB, param + 2,
-										 reflexGetThreshold (s), 0.0f, 0.0f,
-										 0.0f);
-		}
-		UNWRAP (rs, w->screen, drawWindowTexture);
-		(*w->screen->drawWindowTexture) (w, texture, &fa, mask);
-		WRAP (rs, w->screen, drawWindowTexture, reflexDrawWindowTexture);
-
-
-		if (unit)
-		{
-			(*s->activeTexture) (GL_TEXTURE0_ARB + unit);
-			disableTexture (s, &rs->image);
-			(*s->activeTexture) (GL_TEXTURE0_ARB);
-		}
-	}
-	else
-	{
-		UNWRAP (rs, w->screen, drawWindowTexture);
-		(*w->screen->drawWindowTexture) (w, texture, attrib, mask);
-		WRAP (rs, w->screen, drawWindowTexture, reflexDrawWindowTexture);
-	}
-}
-
-
-
-static Bool
-reflexInitDisplay (CompPlugin * p, CompDisplay * d)
-{
-	ReflexDisplay *rd;
-
-	rd = malloc (sizeof (ReflexDisplay));
-	if (!rd)
-		return FALSE;
-
-	rd->screenPrivateIndex = allocateScreenPrivateIndex (d);
-	if (rd->screenPrivateIndex < 0)
-	{
-		free (rd);
-		return FALSE;
-	}
-
-	d->privates[displayPrivateIndex].ptr = rd;
-
-	return TRUE;
-}
-
-static void
-reflexFiniDisplay (CompPlugin * p, CompDisplay * d)
-{
-	REFLEX_DISPLAY (d);
-	freeScreenPrivateIndex (d, rd->screenPrivateIndex);
-
-	free (rd);
-}
-
-
-static Bool
-reflexInitScreen (CompPlugin * p, CompScreen * s)
-{
-	ReflexScreen *rs;
-
-	REFLEX_DISPLAY (s->display);
-
-	rs = malloc (sizeof (ReflexScreen));
-	if (!rs)
-		return FALSE;
-
-	rs->windowPrivateIndex = allocateWindowPrivateIndex (s);
-	if (rs->windowPrivateIndex < 0)
-	{
-		free (rs);
-		return FALSE;
-	}
-
-	initTexture (s, &rs->image);
-
-	rs->imageLoaded = readImageToTexture (s, &rs->image, reflexGetFile (s),
-										  &rs->width, &rs->height);
-	reflexSetFileNotify (s, reflexScreenOptionChanged);
-
-	s->privates[rd->screenPrivateIndex].ptr = rs;
-
-	rs->function = 0;
-
-	WRAP (rs, s, drawWindowTexture, reflexDrawWindowTexture);
-
-	return TRUE;
-}
-
-
-static void
-reflexFiniScreen (CompPlugin * p, CompScreen * s)
-{
-	REFLEX_SCREEN (s);
-
-	freeWindowPrivateIndex (s, rs->windowPrivateIndex);
-
-	UNWRAP (rs, s, drawWindowTexture);
-
-	if (rs->function)
-		destroyFragmentFunction (s, rs->function);
-
-	free (rs);
-}
-
-static Bool
-reflexInit (CompPlugin * p)
-{
-	displayPrivateIndex = allocateDisplayPrivateIndex ();
-	if (displayPrivateIndex < 0)
-		return FALSE;
-
-	return TRUE;
-}
-
-static void
-reflexFini (CompPlugin * p)
-{
-	if (displayPrivateIndex >= 0)
-		freeDisplayPrivateIndex (displayPrivateIndex);
-}
-
-static int
-reflexGetVersion (CompPlugin * plugin, int version)
-{
-	return ABIVERSION;
-}
-
-CompPluginVTable reflexVTable = {
-	"reflex",
-	N_("Reflection"),
-	N_("Draws reflections"),
-	reflexGetVersion,
-	reflexInit,
-	reflexFini,
-	reflexInitDisplay,
-	reflexFiniDisplay,
-	reflexInitScreen,
-	reflexFiniScreen,
-	0,
-	0,
-	0,
-	0,
-	0,
-	0,
-	0,
-	0,
-	0,
-	0
-};
-
-CompPluginVTable *
-getCompPluginInfo (void)
-{
-	return &reflexVTable;
-}
diff -Nurp extra-plugins.orig/reflex/reflex_options.c extra-plugins/reflex/reflex_options.c
--- extra-plugins.orig/reflex/reflex_options.c	2007-04-03 13:25:29.000000000 +0000
+++ extra-plugins/reflex/reflex_options.c	2007-05-10 13:27:37.000000000 +0000
@@ -165,8 +165,6 @@ static void reflexOptionsScreenInitOptio
 
 	o = &os->opt[ReflexScreenOptionFile];
 	o->name = "file";
-	o->shortDesc = N_("Reflection Image");
-	o->longDesc = N_("Reflection Image file");
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(REFLEX_FILE_DEFAULT);
 	o->rest.s.string = NULL;
@@ -174,30 +172,22 @@ static void reflexOptionsScreenInitOptio
 
 	o = &os->opt[ReflexScreenOptionMatch];
 	o->name = "match";
-	o->shortDesc = N_("Window match");
-	o->longDesc = N_("Reflection Window Match");
 	o->type = CompOptionTypeMatch;
 	matchInit (&o->value.match);
 	matchAddFromString (&o->value.match, REFLEX_MATCH_DEFAULT);
 
 	o = &os->opt[ReflexScreenOptionWindow];
 	o->name = "window";
-	o->shortDesc = N_("Reflection for Windows");
-	o->longDesc = N_("Draw Reflection for windows.");
 	o->type = CompOptionTypeBool;
 	o->value.b = REFLEX_WINDOW_DEFAULT;
 
 	o = &os->opt[ReflexScreenOptionDecoration];
 	o->name = "decoration";
-	o->shortDesc = N_("Reflection for Decorations");
-	o->longDesc = N_("Draw Reflection for decorations.");
 	o->type = CompOptionTypeBool;
 	o->value.b = REFLEX_DECORATION_DEFAULT;
 
 	o = &os->opt[ReflexScreenOptionThreshold];
 	o->name = "threshold";
-	o->shortDesc = N_("Alpha Dependence Threshold");
-	o->longDesc = N_("Alpha dependence threshold.");
 	o->type = CompOptionTypeInt;
 	o->value.i = REFLEX_THRESHOLD_DEFAULT;
 	o->rest.i.min = REFLEX_THRESHOLD_MIN;
diff -Nurp extra-plugins.orig/resize/resize.c extra-plugins/resize/resize.c
--- extra-plugins.orig/resize/resize.c	2007-04-03 02:34:27.000000000 +0000
+++ extra-plugins/resize/resize.c	2007-05-10 13:35:39.000000000 +0000
@@ -1050,8 +1050,6 @@ resizeDisplayInitOptions (ResizeDisplay 
 
     o = &rd->opt[RESIZE_DISPLAY_OPTION_INITIATE];
     o->name			     = "initiate";
-    o->shortDesc		     = N_("Initiate Window Resize");
-    o->longDesc			     = N_("Start resizing window");
     o->type			     = CompOptionTypeAction;
     o->value.action.initiate	     = resizeInitiate;
     o->value.action.terminate	     = resizeTerminate;
@@ -1070,16 +1068,11 @@ resizeDisplayInitOptions (ResizeDisplay 
 
     o = &rd->opt[RESIZE_DISPLAY_OPTION_WARP_POINTER];
     o->name = "warp_pointer";
-    o->shortDesc = N_("Warp pointer when starting a resize with mouse initiate combo.");
-    o->longDesc = N_("If this is set, the pointer will be warped to the "
-                "closest corner when you press start a resize.");
     o->type = CompOptionTypeBool;
     o->value.b = RESIZE_WARP_POINTER_DEFAULT;
 
     o = &rd->opt[RESIZE_DISPLAY_OPTION_OPACITY];
     o->name = "opacity";
-    o->shortDesc = N_("Opacity");
-    o->longDesc = N_("Opacity level of resizing windows");
     o->type = CompOptionTypeInt;
     o->value.i = RESIZE_OPACITY_DEFAULT;
     o->rest.i.min = RESIZE_OPACITY_MIN;
@@ -1087,9 +1080,6 @@ resizeDisplayInitOptions (ResizeDisplay 
 
     o = &rd->opt[RESIZE_DISPLAY_OPTION_OPACIFY_MIN_OPACITY];
     o->name = "opacify_min_opacity";
-    o->shortDesc = N_("Minimum opacity for opacify");
-    o->longDesc =
-        N_("Opacify only windows whose opacity is higher than this value");
     o->type = CompOptionTypeInt;
     o->value.i = RESIZE_OPACIFY_MIN_OPACITY_DEFAULT;
     o->rest.i.min = RESIZE_OPACIFY_MIN_OPACITY_MIN;
@@ -1097,18 +1087,11 @@ resizeDisplayInitOptions (ResizeDisplay 
 
     o = &rd->opt[RESIZE_DISPLAY_OPTION_SYNC_WINDOW];
     o->name = "sync_window";
-    o->shortDesc = N_("Repaints the window on each resize step");
-    o->longDesc = N_("If this is set to true the window will repaint itself "
-                "during resize, which may cause some lag.");
     o->type = CompOptionTypeBool;
     o->value.b = RESIZE_SYNC_WINDOW_DEFAULT;
 
     o = &rd->opt[RESIZE_DISPLAY_OPTION_MODE];
     o->name = "resize_mode";
-    o->shortDesc = N_("Resize Display Mode");
-    o->longDesc =
-        N_("Select between normal, stretched texture, outline and filled "
-                            "outline mode.");
     o->type = CompOptionTypeString;
     o->value.s = strdup (resizeModes[RESIZE_MODE_DEFAULT]);
     o->rest.s.string = resizeModes;
@@ -1116,8 +1099,6 @@ resizeDisplayInitOptions (ResizeDisplay 
 
     o = &rd->opt[RESIZE_DISPLAY_OPTION_BORDER_COLOR];
     o->name = "border_color";
-    o->shortDesc = N_("Outline Color");
-    o->longDesc = N_("Outline color for outline and filled outline mode");
     o->type = CompOptionTypeColor;
     o->value.c[0] = 0x2fff;
     o->value.c[1] = 0x2fff;
@@ -1126,8 +1107,6 @@ resizeDisplayInitOptions (ResizeDisplay 
 
     o = &rd->opt[RESIZE_DISPLAY_OPTION_FILL_COLOR];
     o->name = "fill_color";
-    o->shortDesc = N_("Fill Color");
-    o->longDesc = N_("Fill color for filled outline mode");
     o->type = CompOptionTypeColor;
     o->value.c[0] = 0x2fff;
     o->value.c[1] = 0x2fff;
diff -Nurp extra-plugins.orig/resize/resize_shader.h extra-plugins/resize/resize_shader.h
--- extra-plugins.orig/resize/resize_shader.h	1970-01-01 00:00:00.000000000 +0000
+++ extra-plugins/resize/resize_shader.h	2007-05-10 13:35:23.000000000 +0000
@@ -0,0 +1,15 @@
+/**
+ *
+ * This file is autogenerated from :
+ *  
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ **/
+#ifndef resize_SHADER_H
+#define resize_SHADER_H
+
+#endif
diff -Nurp extra-plugins.orig/ring/ring_options.c extra-plugins/ring/ring_options.c
--- extra-plugins.orig/ring/ring_options.c	2007-04-03 13:43:21.000000000 +0000
+++ extra-plugins/ring/ring_options.c	2007-05-10 13:20:23.000000000 +0000
@@ -764,8 +764,6 @@ static void ringOptionsScreenInitOptions
 
 	o = &os->opt[RingScreenOptionSpeed];
 	o->name = "speed";
-	o->shortDesc = N_("Speed");
-	o->longDesc = N_("Ring speed");
 	o->type = CompOptionTypeFloat;
 	o->value.f = RING_SPEED_DEFAULT;
 	o->rest.f.min = RING_SPEED_MIN;
@@ -774,8 +772,6 @@ static void ringOptionsScreenInitOptions
 
 	o = &os->opt[RingScreenOptionTimestep];
 	o->name = "timestep";
-	o->shortDesc = N_("Timestep");
-	o->longDesc = N_("Ring timestep");
 	o->type = CompOptionTypeFloat;
 	o->value.f = RING_TIMESTEP_DEFAULT;
 	o->rest.f.min = RING_TIMESTEP_MIN;
@@ -784,23 +780,17 @@ static void ringOptionsScreenInitOptions
 
 	o = &os->opt[RingScreenOptionWindowMatch];
 	o->name = "window_match";
-	o->shortDesc = N_("Ring Windows");
-	o->longDesc = N_("Windows that should be shown in ring");
 	o->type = CompOptionTypeMatch;
 	matchInit (&o->value.match);
 	matchAddFromString (&o->value.match, RING_WINDOW_MATCH_DEFAULT);
 
 	o = &os->opt[RingScreenOptionDarkenBack];
 	o->name = "darken_back";
-	o->shortDesc = N_("Darken Background");
-	o->longDesc = N_("Darken background when showing the ring");
 	o->type = CompOptionTypeBool;
 	o->value.b = RING_DARKEN_BACK_DEFAULT;
 
 	o = &os->opt[RingScreenOptionInactiveOpacity];
 	o->name = "inactive_opacity";
-	o->shortDesc = N_("Inactive Window Opacity");
-	o->longDesc = N_("Amount of opacity (in percent) for windows in the ring which are not selected");
 	o->type = CompOptionTypeInt;
 	o->value.i = RING_INACTIVE_OPACITY_DEFAULT;
 	o->rest.i.min = RING_INACTIVE_OPACITY_MIN;
@@ -808,8 +798,6 @@ static void ringOptionsScreenInitOptions
 
 	o = &os->opt[RingScreenOptionOverlayIcon];
 	o->name = "overlay_icon";
-	o->shortDesc = N_("Overlay Icon");
-	o->longDesc = N_("Overlay an icon on windows in the ring");
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(ringOverlayIcon[RING_OVERLAY_ICON_DEFAULT]);
 	o->rest.s.string = (char **)ringOverlayIcon;
@@ -817,22 +805,16 @@ static void ringOptionsScreenInitOptions
 
 	o = &os->opt[RingScreenOptionMinimized];
 	o->name = "minimized";
-	o->shortDesc = N_("Show Minimized");
-	o->longDesc = N_("Show minimized windows");
 	o->type = CompOptionTypeBool;
 	o->value.b = RING_MINIMIZED_DEFAULT;
 
 	o = &os->opt[RingScreenOptionSelectWithMouse];
 	o->name = "select_with_mouse";
-	o->shortDesc = N_("Allow Mouse Selection");
-	o->longDesc = N_("Allow the selection of windows by just clicking on them while the switcher is active.");
 	o->type = CompOptionTypeBool;
 	o->value.b = RING_SELECT_WITH_MOUSE_DEFAULT;
 
 	o = &os->opt[RingScreenOptionRingWidth];
 	o->name = "ring_width";
-	o->shortDesc = N_("Ring Width");
-	o->longDesc = N_("Ring width (in percent of the screen width)");
 	o->type = CompOptionTypeInt;
 	o->value.i = RING_RING_WIDTH_DEFAULT;
 	o->rest.i.min = RING_RING_WIDTH_MIN;
@@ -840,8 +822,6 @@ static void ringOptionsScreenInitOptions
 
 	o = &os->opt[RingScreenOptionRingHeight];
 	o->name = "ring_height";
-	o->shortDesc = N_("Ring Height");
-	o->longDesc = N_("Ring height (in percent of the screen height)");
 	o->type = CompOptionTypeInt;
 	o->value.i = RING_RING_HEIGHT_DEFAULT;
 	o->rest.i.min = RING_RING_HEIGHT_MIN;
@@ -849,8 +829,6 @@ static void ringOptionsScreenInitOptions
 
 	o = &os->opt[RingScreenOptionThumbWidth];
 	o->name = "thumb_width";
-	o->shortDesc = N_("Thumbnail Width");
-	o->longDesc = N_("Maximum horizontal size of a thumbnail in the ring");
 	o->type = CompOptionTypeInt;
 	o->value.i = RING_THUMB_WIDTH_DEFAULT;
 	o->rest.i.min = RING_THUMB_WIDTH_MIN;
@@ -858,8 +836,6 @@ static void ringOptionsScreenInitOptions
 
 	o = &os->opt[RingScreenOptionThumbHeight];
 	o->name = "thumb_height";
-	o->shortDesc = N_("Thumbnail Height");
-	o->longDesc = N_("MaximVertical size of a thumbnail in the ring");
 	o->type = CompOptionTypeInt;
 	o->value.i = RING_THUMB_HEIGHT_DEFAULT;
 	o->rest.i.min = RING_THUMB_HEIGHT_MIN;
@@ -867,8 +843,6 @@ static void ringOptionsScreenInitOptions
 
 	o = &os->opt[RingScreenOptionMinBrightness];
 	o->name = "min_brightness";
-	o->shortDesc = N_("Minimum Brightness Factor");
-	o->longDesc = N_("Changes the minimum brightness factor for windows in the ring. The farer away windows are, the less bright are they.");
 	o->type = CompOptionTypeFloat;
 	o->value.f = RING_MIN_BRIGHTNESS_DEFAULT;
 	o->rest.f.min = RING_MIN_BRIGHTNESS_MIN;
@@ -877,8 +851,6 @@ static void ringOptionsScreenInitOptions
 
 	o = &os->opt[RingScreenOptionMinScale];
 	o->name = "min_scale";
-	o->shortDesc = N_("Minimum Scale Factor");
-	o->longDesc = N_("Changes the minimum scale factor for windows in the ring. The farer away windows are, the smaller are they.");
 	o->type = CompOptionTypeFloat;
 	o->value.f = RING_MIN_SCALE_DEFAULT;
 	o->rest.f.min = RING_MIN_SCALE_MIN;
@@ -887,15 +859,11 @@ static void ringOptionsScreenInitOptions
 
 	o = &os->opt[RingScreenOptionWindowTitle];
 	o->name = "window_title";
-	o->shortDesc = N_("Show Window Title");
-	o->longDesc = N_("Show window title if currently selected window.");
 	o->type = CompOptionTypeBool;
 	o->value.b = RING_WINDOW_TITLE_DEFAULT;
 
 	o = &os->opt[RingScreenOptionTitleFontSize];
 	o->name = "title_font_size";
-	o->shortDesc = N_("Font Size");
-	o->longDesc = N_("Font size for the window title");
 	o->type = CompOptionTypeInt;
 	o->value.i = RING_TITLE_FONT_SIZE_DEFAULT;
 	o->rest.i.min = RING_TITLE_FONT_SIZE_MIN;
@@ -903,15 +871,11 @@ static void ringOptionsScreenInitOptions
 
 	o = &os->opt[RingScreenOptionTitleFontBold];
 	o->name = "title_font_bold";
-	o->shortDesc = N_("Bold Font");
-	o->longDesc = N_("Selects if the window title should be displayed in bold font or not.");
 	o->type = CompOptionTypeBool;
 	o->value.b = RING_TITLE_FONT_BOLD_DEFAULT;
 
 	o = &os->opt[RingScreenOptionTitleBackColor];
 	o->name = "title_back_color";
-	o->shortDesc = N_("Background Color");
-	o->longDesc = N_("Background color for the window title");
 	o->type = CompOptionTypeColor;
 	o->value.c[0] = Ring_TITLE_BACK_COLOR_RED_DEFAULT;
 	o->value.c[1] = Ring_TITLE_BACK_COLOR_GREEN_DEFAULT;
@@ -920,8 +884,6 @@ static void ringOptionsScreenInitOptions
 
 	o = &os->opt[RingScreenOptionTitleFontColor];
 	o->name = "title_font_color";
-	o->shortDesc = N_("Font Color");
-	o->longDesc = N_("Font color for the window title");
 	o->type = CompOptionTypeColor;
 	o->value.c[0] = Ring_TITLE_FONT_COLOR_RED_DEFAULT;
 	o->value.c[1] = Ring_TITLE_FONT_COLOR_GREEN_DEFAULT;
@@ -930,8 +892,6 @@ static void ringOptionsScreenInitOptions
 
 	o = &os->opt[RingScreenOptionTitleTextPlacement];
 	o->name = "title_text_placement";
-	o->shortDesc = N_("Text Placement");
-	o->longDesc = N_("Selects where to place the window title.");
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(ringTitleTextPlacement[RING_TITLE_TEXT_PLACEMENT_DEFAULT]);
 	o->rest.s.string = (char **)ringTitleTextPlacement;
@@ -947,8 +907,6 @@ static void ringOptionsDisplayInitOption
 
 	o = &od->opt[RingDisplayOptionNext];
 	o->name = "next";
-	o->shortDesc = N_("Next Window");
-	o->longDesc = N_("Show switcher if not visible and select next window.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
@@ -965,8 +923,6 @@ XStringToKeysym(RING_NEXT_KEY_DEFAULT));
 
 	o = &od->opt[RingDisplayOptionPrev];
 	o->name = "prev";
-	o->shortDesc = N_("Previous Window");
-	o->longDesc = N_("Show switcher if not visible and select previous window.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
@@ -983,8 +939,6 @@ XStringToKeysym(RING_PREV_KEY_DEFAULT));
 
 	o = &od->opt[RingDisplayOptionNextAll];
 	o->name = "next_all";
-	o->shortDesc = N_("Next Window (All Workspaces)");
-	o->longDesc = N_("Show switcher if not visible and select next window out of all windows.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
@@ -1001,8 +955,6 @@ XStringToKeysym(RING_NEXT_ALL_KEY_DEFAUL
 
 	o = &od->opt[RingDisplayOptionPrevAll];
 	o->name = "prev_all";
-	o->shortDesc = N_("Previous Window (All Workspaces)");
-	o->longDesc = N_("Show switcher if not visible and select previous window out of all windows.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
@@ -1019,8 +971,6 @@ XStringToKeysym(RING_PREV_ALL_KEY_DEFAUL
 
 	o = &od->opt[RingDisplayOptionNextGroup];
 	o->name = "next_group";
-	o->shortDesc = N_("Next Window (Group)");
-	o->longDesc = N_("Show switcher if not visible and select next window of the current application.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
@@ -1031,8 +981,6 @@ XStringToKeysym(RING_PREV_ALL_KEY_DEFAUL
 
 	o = &od->opt[RingDisplayOptionPrevGroup];
 	o->name = "prev_group";
-	o->shortDesc = N_("Previous Window (Group)");
-	o->longDesc = N_("Show switcher if not visible and select previous window of the current application.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
diff -Nurp extra-plugins.orig/screensaver/screensaver.c extra-plugins/screensaver/screensaver.c
--- extra-plugins.orig/screensaver/screensaver.c	2007-04-03 14:10:22.000000000 +0000
+++ extra-plugins/screensaver/screensaver.c	2007-05-10 13:29:10.000000000 +0000
@@ -528,8 +528,6 @@ saverDisplayInitOptions (SaverDisplay * 
     
     o = &sd->opt[SCREENSAVER_OPTION_NUM_MODE];
     o->name = "mode";
-    o->shortDesc = N_("Screensaver Mode");
-    o->longDesc = N_("Select a screensaver mode.\nThis option is still under development, anyone know what dancing windows could be?");
     o->type = CompOptionTypeString;
     o->value.s =
                     strdup(saverModes[SCREENSAVER_OPTION_MODE_DEFAULT]);
@@ -539,8 +537,6 @@ saverDisplayInitOptions (SaverDisplay * 
 
     o = &sd->opt[SCREENSAVER_OPTION_NUM_DELAY];
     o->name                 = "delay";
-    o->shortDesc        = N_("Delay");
-    o->longDesc             = N_("The delay between two actions (two rotate commands).\nChoose a time in ms between 100 and 10000 (= 10 sec)");
     o->type                 = CompOptionTypeInt;
     o->value.i              = SCREENSAVER_OPTION_DELAY_DEFAULT;
     o->rest.i.min       = SCREENSAVER_OPTION_DELAY_MIN;
@@ -549,8 +545,6 @@ saverDisplayInitOptions (SaverDisplay * 
 
     o = &sd->opt[SCREENSAVER_OPTION_NUM_HOTKEY];
     o->name                 = "hotkey";
-    o->shortDesc        = N_("The Screensaver hotkey");
-    o->longDesc             = N_("Define a hotkey which initate the screensaver");
     o->type = CompOptionTypeAction;
     o->value.action.initiate = saverToggleInite;
     o->value.action.terminate = 0;
@@ -566,45 +560,33 @@ saverDisplayInitOptions (SaverDisplay * 
 
     o = &sd->opt[SCREENSAVER_OPTION_NUM_SLOW];
     o->name                 = "slow_mode";
-    o->shortDesc        = N_("Use Slow-Mode");
-    o->longDesc             = N_("Use Slow-Mode while rotate the cube, the same as Shift+F10");
     o->type                 = CompOptionTypeBool;
     o->value.b              = SCREENSAVER_OPTION_SLOW_DEFAULT;
 
 
     o = &sd->opt[SCREENSAVER_OPTION_NUM_NEG];
     o->name                 = "negative";
-    o->shortDesc        = N_("Use Negative");
-    o->longDesc             = N_("Negative the Cube randomly.\nMake sure that the neg plugin is active");
     o->type                 = CompOptionTypeBool;
     o->value.b              = SCREENSAVER_OPTION_NEG_DEFAULT;
 
     o = &sd->opt[SCREENSAVER_OPTION_NUM_RAIN];
     o->name                 = "rain";
-    o->shortDesc        = N_("Use Rain");
-    o->longDesc             = N_("Activate the rain plugin.\nMake sure that the water plugin is active");
     o->type                 = CompOptionTypeBool;
     o->value.b              = SCREENSAVER_OPTION_NEG_DEFAULT;
 
     o = &sd->opt[SCREENSAVER_OPTION_NUM_SNOW];
     o->name                 = "snow";
-    o->shortDesc        = N_("Use Snow");
-    o->longDesc             = N_("Activate the snow plugin.\nMake sure that the snow plugin is active");
     o->type                 = CompOptionTypeBool;
     o->value.b              = SCREENSAVER_OPTION_NEG_DEFAULT;
     
     o = &sd->opt[SCREENSAVER_OPTION_NUM_TRANS];
     o->name                 = "trans";
-    o->shortDesc        = N_("Use Transparenz (Experimental)");
-    o->longDesc             = N_("Activate the cube transparenz.\nNot stable, yet.");
     o->type                 = CompOptionTypeBool;
     o->value.b              = SCREENSAVER_OPTION_TRANS_DEFAULT;
 
 
     o = &sd->opt[SCREENSAVER_OPTION_NUM_NEG_RAND];
     o->name                 = "neg_rand";
-    o->shortDesc        = N_("Neg Rand");
-    o->longDesc             = N_("Choose the probability for negtive the cube.\n1 = 1/1 | 2 = 1/2 | 3 = 1/3 ... 10 = 1/10");
     o->type                 = CompOptionTypeInt;
     o->value.i              = SCREENSAVER_OPTION_NEG_RAND_DEFAULT;
     o->rest.i.min       = SCREENSAVER_OPTION_NEG_RAND_MIN;
@@ -613,16 +595,12 @@ saverDisplayInitOptions (SaverDisplay * 
 #ifndef NO_X_EXTENSION
     o = &sd->opt[SCREENSAVER_OPTION_NUM_IDLETIMER];
     o->name                 = "idle_timer";
-    o->shortDesc        = N_("Idle Timer");
-    o->longDesc             = N_("Uncheck this option to deactivate the Idle timer (same as 0 in IdleTimer)");
     o->type                 = CompOptionTypeBool;
     o->value.b              = SCREENSAVER_OPTION_IDLETIMER_DEFAULT;
 
 
     o = &sd->opt[SCREENSAVER_OPTION_NUM_IDLE];
     o->name                 = "idle_time";
-    o->shortDesc        = N_("Idle time");
-    o->longDesc             = N_("Choose a time in min between 0(=never ativate) and 60,\nafter this time (without user_input) the screensaver is activated");
     o->type                 = CompOptionTypeInt;
     o->value.i              = SCREENSAVER_OPTION_IDLE_DEFAULT;
     o->rest.i.min       = SCREENSAVER_OPTION_IDLE_MIN;
@@ -631,16 +609,12 @@ saverDisplayInitOptions (SaverDisplay * 
 
     o = &sd->opt[SCREENSAVER_OPTION_NUM_IGNORE_TOP_BOTTOM];
     o->name                 = "prevent";
-    o->shortDesc        = N_("Prevent from flip to top or bottom");
-    o->longDesc             = N_("By activating this option will make the cube flip only to the sides\not to the top or to the bottom");
     o->type                 = CompOptionTypeBool;
     o->value.b              = SCREENSAVER_OPTION_IGNORE_TOP_BOTTOM_DEFAULT;
 
 
     o = &sd->opt[SCREENSAVER_OPTION_NUM_STARTUP];
     o->name = "startup";
-    o->shortDesc = N_("Startup Action");
-    o->longDesc = N_("This command will execute on startup\nExample: xwinwrap -ni -argb -fs -s -st -sp -a -nf -- /usr/lib/misc/xscreensaver/glmatrix -root -window-id WID\nThis will activate the xscreensaver glmatrix while the cube is running\nThe example command was tested and should work, the path to glmatrix may be different\nBut be warned! This is an very unstable function because I cannot guarantee that the called function will be killed after the screensaver ends.");
     o->type = CompOptionTypeString;
     o->value.s = strdup (SCREENSAVER_OPTION_STARTUP_DEFAULT);
     o->rest.s.string = 0;
@@ -648,8 +622,6 @@ saverDisplayInitOptions (SaverDisplay * 
     
     o = &sd->opt[SCREENSAVER_OPTION_NUM_SHUTDOWN];
     o->name = "shutdown";
-    o->shortDesc = N_("Shutdown Action");
-    o->longDesc = N_("This command will execute on shutdown\nExample: killall glmatrix\nThis is useful if the the plugin cannot kill the started programm from startup itself");
     o->type = CompOptionTypeString;
     o->value.s = strdup (SCREENSAVER_OPTION_SHUTDOWN_DEFAULT);
     o->rest.s.string = 0;
diff -Nurp extra-plugins.orig/showdesktop/showdesktop_options.c extra-plugins/showdesktop/showdesktop_options.c
--- extra-plugins.orig/showdesktop/showdesktop_options.c	2007-04-03 13:44:07.000000000 +0000
+++ extra-plugins/showdesktop/showdesktop_options.c	2007-05-10 13:36:00.000000000 +0000
@@ -211,8 +211,6 @@ static void showdesktopOptionsScreenInit
 
 	o = &os->opt[ShowdesktopScreenOptionSpeed];
 	o->name = "speed";
-	o->shortDesc = N_("Speed");
-	o->longDesc = N_("Window movement speed");
 	o->type = CompOptionTypeFloat;
 	o->value.f = SHOWDESKTOP_SPEED_DEFAULT;
 	o->rest.f.min = SHOWDESKTOP_SPEED_MIN;
@@ -221,8 +219,6 @@ static void showdesktopOptionsScreenInit
 
 	o = &os->opt[ShowdesktopScreenOptionTimestep];
 	o->name = "timestep";
-	o->shortDesc = N_("Timestep");
-	o->longDesc = N_("Window movement timestep");
 	o->type = CompOptionTypeFloat;
 	o->value.f = SHOWDESKTOP_TIMESTEP_DEFAULT;
 	o->rest.f.min = SHOWDESKTOP_TIMESTEP_MIN;
@@ -231,8 +227,6 @@ static void showdesktopOptionsScreenInit
 
 	o = &os->opt[ShowdesktopScreenOptionDirection];
 	o->name = "direction";
-	o->shortDesc = N_("Movement Direction");
-	o->longDesc = N_("Direction of window movement");
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(showdesktopDirection[SHOWDESKTOP_DIRECTION_DEFAULT]);
 	o->rest.s.string = (char **)showdesktopDirection;
@@ -240,16 +234,12 @@ static void showdesktopOptionsScreenInit
 
 	o = &os->opt[ShowdesktopScreenOptionWindowMatch];
 	o->name = "window_match";
-	o->shortDesc = N_("Window Types");
-	o->longDesc = N_("Window types that should be moved out of sight when entering showdesktop mode");
 	o->type = CompOptionTypeMatch;
 	matchInit (&o->value.match);
 	matchAddFromString (&o->value.match, SHOWDESKTOP_WINDOW_MATCH_DEFAULT);
 
 	o = &os->opt[ShowdesktopScreenOptionWindowOpacity];
 	o->name = "window_opacity";
-	o->shortDesc = N_("Window Opacity");
-	o->longDesc = N_("Window opacity when showdesktop'd");
 	o->type = CompOptionTypeFloat;
 	o->value.f = SHOWDESKTOP_WINDOW_OPACITY_DEFAULT;
 	o->rest.f.min = SHOWDESKTOP_WINDOW_OPACITY_MIN;
@@ -258,8 +248,6 @@ static void showdesktopOptionsScreenInit
 
 	o = &os->opt[ShowdesktopScreenOptionWindowPartSize];
 	o->name = "window_part_size";
-	o->shortDesc = N_("Window Part Size");
-	o->longDesc = N_("Window part size when showdesktop'd");
 	o->type = CompOptionTypeInt;
 	o->value.i = SHOWDESKTOP_WINDOW_PART_SIZE_DEFAULT;
 	o->rest.i.min = SHOWDESKTOP_WINDOW_PART_SIZE_MIN;
diff -Nurp extra-plugins.orig/snap/snap_options.c extra-plugins/snap/snap_options.c
--- extra-plugins.orig/snap/snap_options.c	2007-04-03 13:44:20.000000000 +0000
+++ extra-plugins/snap/snap_options.c	2007-05-10 13:20:52.000000000 +0000
@@ -208,8 +208,6 @@ static void snapOptionsScreenInitOptions
 
 	o = &os->opt[SnapScreenOptionSnapType];
 	o->name = "snap_type";
-	o->shortDesc = N_("Snap Type");
-	o->longDesc = N_("Choose 'Resistance', 'Attraction' or 'Full Mode'.");
 	o->type = CompOptionTypeList;
 	o->value.list.type = CompOptionTypeString;
 	o->value.list.nValue = N_SNAP_SNAP_TYPE_DEFAULT;
@@ -221,8 +219,6 @@ static void snapOptionsScreenInitOptions
 
 	o = &os->opt[SnapScreenOptionEdgesCategories];
 	o->name = "edges_categories";
-	o->shortDesc = N_("Edges");
-	o->longDesc = N_("Snap to 'Screen Edges', 'Windows Edges' or 'Both'.");
 	o->type = CompOptionTypeList;
 	o->value.list.type = CompOptionTypeString;
 	o->value.list.nValue = N_SNAP_EDGES_CATEGORIES_DEFAULT;
@@ -234,8 +230,6 @@ static void snapOptionsScreenInitOptions
 
 	o = &os->opt[SnapScreenOptionResistanceDistance];
 	o->name = "resistance_distance";
-	o->shortDesc = N_("Edge Resistance Distance");
-	o->longDesc = N_("The distance until edge resistance takes place.");
 	o->type = CompOptionTypeInt;
 	o->value.i = SNAP_RESISTANCE_DISTANCE_DEFAULT;
 	o->rest.i.min = SNAP_RESISTANCE_DISTANCE_MIN;
@@ -243,8 +237,6 @@ static void snapOptionsScreenInitOptions
 
 	o = &os->opt[SnapScreenOptionAttractionDistance];
 	o->name = "attraction_distance";
-	o->shortDesc = N_("Edge Attraction Distance");
-	o->longDesc = N_("The distance until edge attraction takes place.");
 	o->type = CompOptionTypeInt;
 	o->value.i = SNAP_ATTRACTION_DISTANCE_DEFAULT;
 	o->rest.i.min = SNAP_ATTRACTION_DISTANCE_MIN;
@@ -260,8 +252,6 @@ static void snapOptionsDisplayInitOption
 
 	o = &od->opt[SnapDisplayOptionAvoidSnap];
 	o->name = "avoid_snap";
-	o->shortDesc = N_("Avoid Snap Modifier");
-	o->longDesc = N_("Use this bindings to avoid snapping.");
 	o->type = CompOptionTypeList;
 	o->value.list.type = CompOptionTypeString;
 	o->value.list.nValue = N_SNAP_AVOID_SNAP_DEFAULT;
diff -Nurp extra-plugins.orig/snow/snow.c extra-plugins/snow/snow.c
--- extra-plugins.orig/snow/snow.c	2007-04-03 02:37:42.000000000 +0000
+++ extra-plugins/snow/snow.c	2007-05-10 13:29:44.000000000 +0000
@@ -768,8 +768,6 @@ static void snowDisplayInitOptions(SnowD
 
 	o = &sd->opt[SNOW_DISPLAY_OPTION_NUM_SNOWFLAKES];
 	o->name = "num_snowflakes";
-	o->shortDesc = N_("Number of Snowflakes");
-	o->longDesc = N_("Number of Snowflakes");
 	o->type = CompOptionTypeFloat;
 	o->value.f = SNOW_DISPLAY_OPTION_NUM_SNOWFLAKES_DEFAULT;
 	o->rest.f.min = 0;
@@ -778,8 +776,6 @@ static void snowDisplayInitOptions(SnowD
 
 	o = &sd->opt[SNOW_DISPLAY_OPTION_SNOW_SIZE];
 	o->name = "snow_size";
-	o->shortDesc = N_("Size of snowflakes");
-	o->longDesc = N_("Size of snowflakes");
 	o->type = CompOptionTypeFloat;
 	o->value.f = SNOW_DISPLAY_OPTION_SNOW_SIZE_DEFAULT;
 	o->rest.f.min = 0;
@@ -788,8 +784,6 @@ static void snowDisplayInitOptions(SnowD
 
 	o = &sd->opt[SNOW_DISPLAY_OPTION_SNOW_SPEED];
 	o->name = "snow_speed";
-	o->shortDesc = N_("Speed of falling snow");
-	o->longDesc = N_("Speed of falling snow");
 	o->type = CompOptionTypeFloat;
 	o->value.f = SNOW_DISPLAY_OPTION_SNOW_SPEED_DEFAULT;
 	o->rest.f.min = 0;
@@ -798,10 +792,6 @@ static void snowDisplayInitOptions(SnowD
 
 	o = &sd->opt[SNOW_DISPLAY_OPTION_SNOW_UPDATE_DELAY];
 	o->name = "snow_update_delay";
-	o->shortDesc = N_("Update Delay");
-	o->longDesc =
-			N_
-			("Delay in ms between screen updates. Deacreasing this value may make snow fall more smoothly, but will also increase CPU usage.");
 	o->type = CompOptionTypeInt;
 	o->value.i = SNOW_DISPLAY_OPTION_SNOW_UPDATE_DELAY_DEFAULT;
 	o->rest.i.min = 10;
@@ -809,10 +799,6 @@ static void snowDisplayInitOptions(SnowD
 
 	o = &sd->opt[SNOW_DISPLAY_OPTION_SCREEN_BOXING];
 	o->name = "screen_boxing";
-	o->shortDesc = N_("Screen Boxing");
-	o->longDesc =
-			N_
-			("How far outside the screen resolution snowflakes can be before being removed. Needed because of FOV.");
 	o->type = CompOptionTypeFloat;
 	o->value.f = SNOW_DISPLAY_OPTION_SCREEN_BOXING_DEFAULT;
 	o->rest.f.min = -2000;
@@ -821,10 +807,6 @@ static void snowDisplayInitOptions(SnowD
 
 	o = &sd->opt[SNOW_DISPLAY_OPTION_SCREEN_DEPTH];
 	o->name = "screen_depth";
-	o->shortDesc = N_("Screen Depth");
-	o->longDesc =
-			N_
-			("How deep into the screen snowflakes can be drawn before being removed.");
 	o->type = CompOptionTypeFloat;
 	o->value.f = SNOW_DISPLAY_OPTION_SCREEN_DEPTH_DEFAULT;
 	o->rest.f.min = 0;
@@ -833,8 +815,6 @@ static void snowDisplayInitOptions(SnowD
 
 	o = &sd->opt[SNOW_DISPLAY_OPTION_SNOW_TEXTURES];
 	o->name = "snow_textures";
-	o->shortDesc = N_("Snow Textures");
-	o->longDesc = N_("Snow textures");
 	o->type = CompOptionTypeList;
 	o->value.list.type = CompOptionTypeString;
 	o->value.list.nValue = N_SNOW_TEXTURES;
@@ -848,8 +828,6 @@ static void snowDisplayInitOptions(SnowD
 
 	o = &sd->opt[SNOW_DISPLAY_OPTION_INITIATE];
 	o->name = "initiate";
-	o->shortDesc = N_("snow toggle key");
-	o->longDesc = N_("snow toggle key");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = snowToggle;
 	o->value.action.terminate = 0;
@@ -863,22 +841,16 @@ static void snowDisplayInitOptions(SnowD
 
 	o = &sd->opt[SNOW_DISPLAY_OPTION_ON_TOP];
 	o->name = "snow_over_windows";
-	o->shortDesc = N_("Snow over windows.");
-	o->longDesc = N_("Snow is drawn above windows.");
 	o->type = CompOptionTypeBool;
 	o->value.b = SNOW_DISPLAY_OPTION_ON_TOP_DEFAULT;
 
 	o = &sd->opt[SNOW_DISPLAY_OPTION_ROTATION];
 	o->name = "snow_rotation";
-	o->shortDesc = N_("Rotate flakes");
-	o->longDesc = N_("Flakes rotate when checked.");
 	o->type = CompOptionTypeBool;
 	o->value.b = SNOW_DISPLAY_OPTION_ROTATION_DEFAULT;
 
 	o = &sd->opt[SNOW_DISPLAY_OPTION_SNOW_DIRECTION];
 	o->name = "snow_direction";
-	o->shortDesc = N_("Snow Direction");
-	o->longDesc = N_("Select direction in which the snow should fly.");
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(snowDirections[SNOW_DISPLAY_OPTION_DIRECTION_DEFAULT]);
 	o->rest.s.string = snowDirections;
@@ -886,17 +858,11 @@ static void snowDisplayInitOptions(SnowD
 
 	o = &sd->opt[SNOW_DISPLAY_OPTION_USE_BLENDING];
 	o->name = "use_blending";
-	o->shortDesc = N_("Enable Blending");
-	o->longDesc = N_("Enables alpha blending of snowflakes");
 	o->type = CompOptionTypeBool;
 	o->value.b = SNOW_DISPLAY_OPTION_USE_BLENDING_DEFAULT;
 
 	o = &sd->opt[SNOW_DISPLAY_OPTION_USE_TEXTURES];
 	o->name = "use_textures";
-	o->shortDesc = N_("Enable Textures");
-	o->longDesc =
-			N_
-			("Enables textured snowflakes. Otherwise color gradients are used.");
 	o->type = CompOptionTypeBool;
 	o->value.b = SNOW_DISPLAY_OPTION_USE_TEXTURES_DEFAULT;
 }
diff -Nurp extra-plugins.orig/snow/snow_shader.h extra-plugins/snow/snow_shader.h
--- extra-plugins.orig/snow/snow_shader.h	1970-01-01 00:00:00.000000000 +0000
+++ extra-plugins/snow/snow_shader.h	2007-05-10 13:29:22.000000000 +0000
@@ -0,0 +1,15 @@
+/**
+ *
+ * This file is autogenerated from :
+ *  
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ **/
+#ifndef snow_SHADER_H
+#define snow_SHADER_H
+
+#endif
diff -Nurp extra-plugins.orig/splash/splash_options.c extra-plugins/splash/splash_options.c
--- extra-plugins.orig/splash/splash_options.c	2007-04-03 13:46:24.000000000 +0000
+++ extra-plugins/splash/splash_options.c	2007-05-10 13:36:25.000000000 +0000
@@ -247,8 +247,6 @@ CompOption * splashGetDisplayOption(Comp
 
 	o = &od->opt[SplashDisplayOptionInitiate];
 	o->name = "initiate";
-	o->shortDesc = N_("Initiate Splash");
-	o->longDesc = N_("Start Splash.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
@@ -265,15 +263,11 @@ XStringToKeysym(SPLASH_INITIATE_KEY_DEFA
 
 	o = &od->opt[SplashDisplayOptionFirststart];
 	o->name = "firststart";
-	o->shortDesc = N_("Show on first start");
-	o->longDesc = N_("Show splash on first start.");
 	o->type = CompOptionTypeBool;
 	o->value.b = SPLASH_FIRSTSTART_DEFAULT;
 
 	o = &od->opt[SplashDisplayOptionBackground];
 	o->name = "background";
-	o->shortDesc = N_("Background File");
-	o->longDesc = N_("Background image File.");
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(SPLASH_BACKGROUND_DEFAULT);
 	o->rest.s.string = NULL;
@@ -281,8 +275,6 @@ XStringToKeysym(SPLASH_INITIATE_KEY_DEFA
 
 	o = &od->opt[SplashDisplayOptionLogo];
 	o->name = "logo";
-	o->shortDesc = N_("Logo File");
-	o->longDesc = N_("Logo image File.");
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(SPLASH_LOGO_DEFAULT);
 	o->rest.s.string = NULL;
@@ -290,8 +282,6 @@ XStringToKeysym(SPLASH_INITIATE_KEY_DEFA
 
 	o = &od->opt[SplashDisplayOptionFadeTime];
 	o->name = "fade_time";
-	o->shortDesc = N_("Fade Time");
-	o->longDesc = N_("Fade In/Out Time.");
 	o->type = CompOptionTypeFloat;
 	o->value.f = SPLASH_FADE_TIME_DEFAULT;
 	o->rest.f.min = SPLASH_FADE_TIME_MIN;
@@ -300,8 +290,6 @@ XStringToKeysym(SPLASH_INITIATE_KEY_DEFA
 
 	o = &od->opt[SplashDisplayOptionDisplayTime];
 	o->name = "display_time";
-	o->shortDesc = N_("Display Time");
-	o->longDesc = N_("Display In/Out Time.");
 	o->type = CompOptionTypeFloat;
 	o->value.f = SPLASH_DISPLAY_TIME_DEFAULT;
 	o->rest.f.min = SPLASH_DISPLAY_TIME_MIN;
@@ -310,8 +298,6 @@ XStringToKeysym(SPLASH_INITIATE_KEY_DEFA
 
 	o = &od->opt[SplashDisplayOptionSaturation];
 	o->name = "saturation";
-	o->shortDesc = N_("Saturation");
-	o->longDesc = N_("Background saturation.");
 	o->type = CompOptionTypeFloat;
 	o->value.f = SPLASH_SATURATION_DEFAULT;
 	o->rest.f.min = SPLASH_SATURATION_MIN;
@@ -320,8 +306,6 @@ XStringToKeysym(SPLASH_INITIATE_KEY_DEFA
 
 	o = &od->opt[SplashDisplayOptionBrightness];
 	o->name = "brightness";
-	o->shortDesc = N_("Brightness");
-	o->longDesc = N_("Background brightness.");
 	o->type = CompOptionTypeFloat;
 	o->value.f = SPLASH_BRIGHTNESS_DEFAULT;
 	o->rest.f.min = SPLASH_BRIGHTNESS_MIN;
diff -Nurp extra-plugins.orig/thumbnail/thumbnail_options.c extra-plugins/thumbnail/thumbnail_options.c
--- extra-plugins.orig/thumbnail/thumbnail_options.c	2007-04-03 13:46:53.000000000 +0000
+++ extra-plugins/thumbnail/thumbnail_options.c	2007-05-10 13:21:24.000000000 +0000
@@ -388,8 +388,6 @@ static void thumbOptionsScreenInitOption
 
 	o = &os->opt[ThumbScreenOptionThumbSize];
 	o->name = "thumb_size";
-	o->shortDesc = N_("Thumbnail Window Size");
-	o->longDesc = N_("Thumbnail window size.");
 	o->type = CompOptionTypeInt;
 	o->value.i = THUMB_THUMB_SIZE_DEFAULT;
 	o->rest.i.min = THUMB_THUMB_SIZE_MIN;
@@ -397,8 +395,6 @@ static void thumbOptionsScreenInitOption
 
 	o = &os->opt[ThumbScreenOptionShowDelay];
 	o->name = "show_delay";
-	o->shortDesc = N_("Show Delay");
-	o->longDesc = N_("Time (in ms) before Thumbnail is shown.");
 	o->type = CompOptionTypeInt;
 	o->value.i = THUMB_SHOW_DELAY_DEFAULT;
 	o->rest.i.min = THUMB_SHOW_DELAY_MIN;
@@ -406,8 +402,6 @@ static void thumbOptionsScreenInitOption
 
 	o = &os->opt[ThumbScreenOptionBorder];
 	o->name = "border";
-	o->shortDesc = N_("Thumbnail Border Size");
-	o->longDesc = N_("Size of Thumbnail Border.");
 	o->type = CompOptionTypeInt;
 	o->value.i = THUMB_BORDER_DEFAULT;
 	o->rest.i.min = THUMB_BORDER_MIN;
@@ -415,8 +409,6 @@ static void thumbOptionsScreenInitOption
 
 	o = &os->opt[ThumbScreenOptionThumbColor];
 	o->name = "thumb_color";
-	o->shortDesc = N_("Thumbnail Border Glow Color");
-	o->longDesc = N_("Thumbnail Background and Border Glow Color.");
 	o->type = CompOptionTypeColor;
 	o->value.c[0] = Thumb_THUMB_COLOR_RED_DEFAULT;
 	o->value.c[1] = Thumb_THUMB_COLOR_GREEN_DEFAULT;
@@ -425,8 +417,6 @@ static void thumbOptionsScreenInitOption
 
 	o = &os->opt[ThumbScreenOptionFadeSpeed];
 	o->name = "fade_speed";
-	o->shortDesc = N_("Fade In/Out Duration");
-	o->longDesc = N_("Fade In/Out Duration in seconds.");
 	o->type = CompOptionTypeFloat;
 	o->value.f = THUMB_FADE_SPEED_DEFAULT;
 	o->rest.f.min = THUMB_FADE_SPEED_MIN;
@@ -435,50 +425,36 @@ static void thumbOptionsScreenInitOption
 
 	o = &os->opt[ThumbScreenOptionCurrentViewport];
 	o->name = "current_viewport";
-	o->shortDesc = N_("Taskbar Shows Only Windows of Current Viewport");
-	o->longDesc = N_("Set it if the Taskbar shows only Windows of Current Viewport.");
 	o->type = CompOptionTypeBool;
 	o->value.b = THUMB_CURRENT_VIEWPORT_DEFAULT;
 
 	o = &os->opt[ThumbScreenOptionAlwaysOnTop];
 	o->name = "always_on_top";
-	o->shortDesc = N_("Thumbnails Always on Top");
-	o->longDesc = N_("Paint Thumbnails Always on Top.");
 	o->type = CompOptionTypeBool;
 	o->value.b = THUMB_ALWAYS_ON_TOP_DEFAULT;
 
 	o = &os->opt[ThumbScreenOptionWindowLike];
 	o->name = "window_like";
-	o->shortDesc = N_("Paint Window Like Background");
-	o->longDesc = N_("Paint Window Like Background instead of Glow.");
 	o->type = CompOptionTypeBool;
 	o->value.b = THUMB_WINDOW_LIKE_DEFAULT;
 
 	o = &os->opt[ThumbScreenOptionMipmap];
 	o->name = "mipmap";
-	o->shortDesc = N_("Generate Mipmaps");
-	o->longDesc = N_("Generate mipmaps when possible for higher quality scaling.");
 	o->type = CompOptionTypeBool;
 	o->value.b = THUMB_MIPMAP_DEFAULT;
 
 	o = &os->opt[ThumbScreenOptionTitleEnabled];
 	o->name = "title_enabled";
-	o->shortDesc = N_("Enable Titles");
-	o->longDesc = N_("Show Window Title in Thumbnail.");
 	o->type = CompOptionTypeBool;
 	o->value.b = THUMB_TITLE_ENABLED_DEFAULT;
 
 	o = &os->opt[ThumbScreenOptionFontBold];
 	o->name = "font_bold";
-	o->shortDesc = N_("Bold Font");
-	o->longDesc = N_("Should be the window title Bold.");
 	o->type = CompOptionTypeBool;
 	o->value.b = THUMB_FONT_BOLD_DEFAULT;
 
 	o = &os->opt[ThumbScreenOptionFontSize];
 	o->name = "font_size";
-	o->shortDesc = N_("Font Size");
-	o->longDesc = N_("Window title Font Size.");
 	o->type = CompOptionTypeInt;
 	o->value.i = THUMB_FONT_SIZE_DEFAULT;
 	o->rest.i.min = THUMB_FONT_SIZE_MIN;
@@ -486,8 +462,6 @@ static void thumbOptionsScreenInitOption
 
 	o = &os->opt[ThumbScreenOptionFontColor];
 	o->name = "font_color";
-	o->shortDesc = N_("Font Color");
-	o->longDesc = N_("Window title Font Color.");
 	o->type = CompOptionTypeColor;
 	o->value.c[0] = Thumb_FONT_COLOR_RED_DEFAULT;
 	o->value.c[1] = Thumb_FONT_COLOR_GREEN_DEFAULT;
diff -Nurp extra-plugins.orig/tile/tile.c extra-plugins/tile/tile.c
--- extra-plugins.orig/tile/tile.c	2007-04-03 13:47:17.000000000 +0000
+++ extra-plugins/tile/tile.c	2007-05-10 13:31:01.000000000 +0000
@@ -109,7 +109,6 @@ typedef struct _TileWindow {
 	int originalHeight;
 } TileWindow;
 
-static Bool placeWindow(CompWindow *w, int x, int y, int width, int height);
 static Bool isTileWindow(CompWindow *w);
 static Bool setWindowFutureSize(CompWindow *w);
 
@@ -603,62 +602,6 @@ static void constrainMinMax(CompWindow *
 	*newHeight = height;
 }
 
-// Moves window to [x,y] and resizes to width x height if no animation or starts animation
-static Bool placeWindow(CompWindow *w, int x, int y, int width, int height)
-{
-	// window existence check
-	if (!w)
-		return FALSE;
-
-	// this checks if the window isnt smaller than minimum size it has defined
-	constrainMinMax(w, width, height, &width, &height);
-
-	// check if the window isnt already where its going to be
-	if (x == w->attrib.x && y == w->attrib.y && width == w->attrib.width && height == w->attrib.height)
-		return TRUE;
-
-	TILE_WINDOW(w);
-	TILE_SCREEN(w->screen);
-
-	// set previous coordinates for animation
-	tw->previousX = w->attrib.x;
-	tw->previousY = w->attrib.y;
-	tw->previousWidth = w->attrib.width;
-	tw->previousHeight = w->attrib.height;
-
-	// set future coordinates for animation
-	tw->futureX = x;
-	tw->futureY = y;
-	tw->futureWidth = width;
-	tw->futureHeight = height;
-
-	tw->resizedAlready = False; // window is not resized now
-
-	switch (tileGetAnimateType(w->screen->display))
-	{
-		case AnimateTypeNone:
-			setWindowFutureSize(w);
-			break;
-		case AnimateTypeOutline:
-		case AnimateTypeSlide:
-		case AnimateTypeZoom:
-		case AnimateTypeDrop:
-			setWindowFutureSize(w);
-			/* fall-through */
-		case AnimateTypeFade:
-			ts->isResizing = TRUE;
-			tw->isResizing = TRUE;
-			ts->msResizing = 0;
-			ts->oneDuration = tileGetAnimationDuration(w->screen->display) / 
-				              THIS_VIEWPORT(w->screen).tiledCount;
-			break;
-		default:
-			break;
-	}
-
-	return TRUE;
-}
-
 static Bool setWindowFutureSize(CompWindow *w)
 {
 	TILE_WINDOW(w);
diff -Nurp extra-plugins.orig/tile/tile_options.c extra-plugins/tile/tile_options.c
--- extra-plugins.orig/tile/tile_options.c	2007-04-03 13:47:17.000000000 +0000
+++ extra-plugins/tile/tile_options.c	2007-05-10 13:31:32.000000000 +0000
@@ -428,8 +428,6 @@ CompOption * tileGetDisplayOption(CompDi
 
 	o = &od->opt[TileDisplayOptionAnimateType];
 	o->name = "animate_type";
-	o->shortDesc = N_("Tiling Animation Type");
-	o->longDesc = N_("Selects the animation used while tiling");
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(tileAnimateType[TILE_ANIMATE_TYPE_DEFAULT]);
 	o->rest.s.string = (char **)tileAnimateType;
@@ -437,8 +435,6 @@ CompOption * tileGetDisplayOption(CompDi
 
 	o = &od->opt[TileDisplayOptionAnimationDuration];
 	o->name = "animation_duration";
-	o->shortDesc = N_("Animation Duration");
-	o->longDesc = N_("Duration (in ms) of the tiling animation");
 	o->type = CompOptionTypeInt;
 	o->value.i = TILE_ANIMATION_DURATION_DEFAULT;
 	o->rest.i.min = TILE_ANIMATION_DURATION_MIN;
@@ -446,8 +442,6 @@ CompOption * tileGetDisplayOption(CompDi
 
 	o = &od->opt[TileDisplayOptionTileToggleType];
 	o->name = "tile_toggle_type";
-	o->shortDesc = N_("Tiling Method For Toggle");
-	o->longDesc = N_("Choose the tiling type you want when using toggle.");
 	o->type = CompOptionTypeString;
 	o->value.s = strdup(tileTileToggleType[TILE_TILE_TOGGLE_TYPE_DEFAULT]);
 	o->rest.s.string = (char **)tileTileToggleType;
@@ -455,15 +449,11 @@ CompOption * tileGetDisplayOption(CompDi
 
 	o = &od->opt[TileDisplayOptionTileJoin];
 	o->name = "tile_join";
-	o->shortDesc = N_("Join Windows (EXPERIMENTAL)");
-	o->longDesc = N_("Tries to join the windows together when horizontal, vertical or left tiling is enabled so that when you resize a window surrounding windows resize accordingly. This may cause problems if you dont leave them enough space.");
 	o->type = CompOptionTypeBool;
 	o->value.b = TILE_TILE_JOIN_DEFAULT;
 
 	o = &od->opt[TileDisplayOptionTileDelta];
 	o->name = "tile_delta";
-	o->shortDesc = N_("Cascade Delta");
-	o->longDesc = N_("Distance between windows when using cascade");
 	o->type = CompOptionTypeInt;
 	o->value.i = TILE_TILE_DELTA_DEFAULT;
 	o->rest.i.min = TILE_TILE_DELTA_MIN;
@@ -471,8 +461,6 @@ CompOption * tileGetDisplayOption(CompDi
 
 	o = &od->opt[TileDisplayOptionTileLeftOccupancy];
 	o->name = "tile_left_occupancy";
-	o->shortDesc = N_("Left Occupancy");
-	o->longDesc = N_("Occupancy percentage for window placed left. This number is percentage of screen width, which the active window will have it as width when tiled. Applies to Left tiling type.");
 	o->type = CompOptionTypeInt;
 	o->value.i = TILE_TILE_LEFT_OCCUPANCY_DEFAULT;
 	o->rest.i.min = TILE_TILE_LEFT_OCCUPANCY_MIN;
@@ -480,16 +468,12 @@ CompOption * tileGetDisplayOption(CompDi
 
 	o = &od->opt[TileDisplayOptionExcludeMatch];
 	o->name = "exclude_match";
-	o->shortDesc = N_("Excluded Windows");
-	o->longDesc = N_("Windows which should be excluded from tiling");
 	o->type = CompOptionTypeMatch;
 	matchInit (&o->value.match);
 	matchAddFromString (&o->value.match, TILE_EXCLUDE_MATCH_DEFAULT);
 
 	o = &od->opt[TileDisplayOptionTileVertically];
 	o->name = "tile_vertically";
-	o->shortDesc = N_("Tile Windows Vertically");
-	o->longDesc = N_("Move and resize all visible windows so that they have full height, same width and occupy whole screen.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
@@ -500,8 +484,6 @@ CompOption * tileGetDisplayOption(CompDi
 
 	o = &od->opt[TileDisplayOptionTileHorizontally];
 	o->name = "tile_horizontally";
-	o->shortDesc = N_("Tile Windows Horizontally");
-	o->longDesc = N_("Move and resize all visible windows so that they have full width, same height and occupy whole screen.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
@@ -512,8 +494,6 @@ CompOption * tileGetDisplayOption(CompDi
 
 	o = &od->opt[TileDisplayOptionTileTile];
 	o->name = "tile_tile";
-	o->shortDesc = N_("Tile Windows");
-	o->longDesc = N_("Move and resize all visible windows both vertically and horizontally, so that the occupy whole screen and are in a grid.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
@@ -530,8 +510,6 @@ XStringToKeysym(TILE_TILE_TILE_KEY_DEFAU
 
 	o = &od->opt[TileDisplayOptionTileCascade];
 	o->name = "tile_cascade";
-	o->shortDesc = N_("Cascade Windows");
-	o->longDesc = N_("Move and resize all visible windows with the delta value set for cascading.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
@@ -548,8 +526,6 @@ XStringToKeysym(TILE_TILE_CASCADE_KEY_DE
 
 	o = &od->opt[TileDisplayOptionTileRestore];
 	o->name = "tile_restore";
-	o->shortDesc = N_("Restore Windows");
-	o->longDesc = N_("Restore windows to their original position they had before tiling.");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
@@ -566,8 +542,6 @@ XStringToKeysym(TILE_TILE_RESTORE_KEY_DE
 
 	o = &od->opt[TileDisplayOptionTileToggle];
 	o->name = "tile_toggle";
-	o->shortDesc = N_("Toggle Tiling");
-	o->longDesc = N_("Toggle between tile and restore");
 	o->type = CompOptionTypeAction;
 	o->value.action.initiate = NULL;
 	o->value.action.terminate = NULL;
diff -Nurp extra-plugins.orig/trailfocus/trailfocus.c extra-plugins/trailfocus/trailfocus.c
--- extra-plugins.orig/trailfocus/trailfocus.c	2007-04-03 14:12:01.000000000 +0000
+++ extra-plugins/trailfocus/trailfocus.c	2007-05-10 13:36:48.000000000 +0000
@@ -260,8 +260,6 @@ trailFocusScreenInitOptions (TrailFocusS
     /* Options for this plugin */
     o = &tfs->opt[TRAILFOCUS_SCREEN_OPTION_MINIMUM_OPACITY_LEVEL];
     o->name = "minimum_window_opacity_level";
-    o->shortDesc = "Opacity level of completely unfocused windows";
-    o->longDesc = "Opacity level of completely unfocused windows";
     o->type = CompOptionTypeInt;
     o->value.i = 90;
     o->rest.i.min = 25;
@@ -270,8 +268,6 @@ trailFocusScreenInitOptions (TrailFocusS
 
     o = &tfs->opt[TRAILFOCUS_SCREEN_OPTION_MAXIMUM_OPACITY_LEVEL];
     o->name = "maximum_window_opacity_level";
-    o->shortDesc = "Opacity level of completely focused windows";
-    o->longDesc = "Opacity level of completely focused windows";
     o->type = CompOptionTypeInt;
     o->value.i = 100;
     o->rest.i.min = 25;
@@ -280,8 +276,6 @@ trailFocusScreenInitOptions (TrailFocusS
 
     o = &tfs->opt[TRAILFOCUS_SCREEN_OPTION_MINIMUM_SATURATION_LEVEL];
     o->name = "minimum_window_saturation_level";
-    o->shortDesc = "Saturation level of completely unfocused windows";
-    o->longDesc = "Saturation level of completely unfocused windows";
     o->type = CompOptionTypeInt;
     o->value.i = 100;
     o->rest.i.min = 0;
@@ -290,8 +284,6 @@ trailFocusScreenInitOptions (TrailFocusS
 
     o = &tfs->opt[TRAILFOCUS_SCREEN_OPTION_MAXIMUM_SATURATION_LEVEL];
     o->name = "maximum_window_saturation_level";
-    o->shortDesc = "Saturation level of completely focused windows";
-    o->longDesc = "Saturation level of completely focused windows";
     o->type = CompOptionTypeInt;
     o->value.i = 100;
     o->rest.i.min = 0;
@@ -300,8 +292,6 @@ trailFocusScreenInitOptions (TrailFocusS
 
     o = &tfs->opt[TRAILFOCUS_SCREEN_OPTION_MINIMUM_BRIGHTNESS_LEVEL];
     o->name = "minimum_window_brightness_level";
-    o->shortDesc = "Brightness level of unfocused windows";
-    o->longDesc = "Brightness level of unfocused windows";
     o->type = CompOptionTypeInt;
     o->value.i = 90;
     o->rest.i.min = 0;
@@ -310,8 +300,6 @@ trailFocusScreenInitOptions (TrailFocusS
 
     o = &tfs->opt[TRAILFOCUS_SCREEN_OPTION_MAXIMUM_BRIGHTNESS_LEVEL];
     o->name = "maximum_window_brightness_level";
-    o->shortDesc = "Brightness level of focused windows";
-    o->longDesc = "Brightness level of focused windows";
     o->type = CompOptionTypeInt;
     o->value.i = 100;
     o->rest.i.min = 0;
@@ -321,8 +309,6 @@ trailFocusScreenInitOptions (TrailFocusS
 
     o = &tfs->opt[TRAILFOCUS_SCREEN_OPTION_MAXIMUM_TRAIL_COUNT];
     o->name = "maximum_trail_count";
-    o->shortDesc = "Number of recently used windows to keep track of";
-    o->longDesc = "Number of recently used windows to keep track of";
     o->type = CompOptionTypeInt;
     o->value.i = 6;
     o->rest.i.min = 1;
@@ -331,8 +317,6 @@ trailFocusScreenInitOptions (TrailFocusS
 
     o = &tfs->opt[TRAILFOCUS_SCREEN_OPTION_WINDOW_TYPE];
     o->name = "window_types";
-    o->shortDesc = "Trailfocus window types";
-    o->longDesc = "Trailfocus window types";
     o->type = CompOptionTypeList;
     o->value.list.type = CompOptionTypeString;
     o->value.list.nValue = LIST_SIZE (DefaultWinType);
@@ -346,22 +330,16 @@ trailFocusScreenInitOptions (TrailFocusS
 
     o = &tfs->opt[TRAILFOCUS_SCREEN_OPTION_IGNORE_SKIPTASKBAR];
     o->name = "ignore_skiptaskbar";
-    o->shortDesc = N_("Ignore \"SkipTaskbar\" Windows");
-    o->longDesc = N_("Ignore \"SkipTaskbar\" Windows");
     o->type = CompOptionTypeBool;
     o->value.b = TRAILFOCUS_SCREEN_OPTION_IGNORE_SKIPTASKBAR_DEFAULT;
 
     o = &tfs->opt[TRAILFOCUS_SCREEN_OPTION_IGNORE_SKIPPAGER];
     o->name = "ignore_skippager";
-    o->shortDesc = N_("Ignore \"SkipPager\" Windows");
-    o->longDesc = N_("Ignore \"SkipPager\" Windows");
     o->type = CompOptionTypeBool;
     o->value.b = TRAILFOCUS_SCREEN_OPTION_IGNORE_SKIPPAGER_DEFAULT;
 
     o = &tfs->opt[TRAILFOCUS_SCREEN_OPTION_DISABLE_ON_SCREENGRAB_OF];
     o->name = "disable_on_screengrab";
-    o->shortDesc = "Disable on screengrab of";
-    o->longDesc = "Disable Trailfocus on screengrab of";
     o->type = CompOptionTypeList;
     o->value.list.type = CompOptionTypeString;
     o->value.list.nValue = LIST_SIZE (DisableOnScreengrabDefault);
diff -Nurp extra-plugins.orig/trailfocus/trailfocus_shader.h extra-plugins/trailfocus/trailfocus_shader.h
--- extra-plugins.orig/trailfocus/trailfocus_shader.h	1970-01-01 00:00:00.000000000 +0000
+++ extra-plugins/trailfocus/trailfocus_shader.h	2007-05-10 13:36:32.000000000 +0000
@@ -0,0 +1,15 @@
+/**
+ *
+ * This file is autogenerated from :
+ *  
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ **/
+#ifndef trailfocus_SHADER_H
+#define trailfocus_SHADER_H
+
+#endif
diff -Nurp extra-plugins.orig/vignettes/vignettes.c extra-plugins/vignettes/vignettes.c
--- extra-plugins.orig/vignettes/vignettes.c	2007-04-13 13:24:48.000000000 +0000
+++ extra-plugins/vignettes/vignettes.c	2007-05-10 13:21:41.000000000 +0000
@@ -535,8 +535,6 @@ vignettesDisplayInitOptions (VignettesDi
 
     o = &md->opt[VIGNETTES_DISPLAY_OPTION_CREATE];
     o->name = "create";
-    o->shortDesc = N_("Create a vignette");
-    o->longDesc	 = N_("Create a new vignette from a window");
     o->type = CompOptionTypeAction;
     o->value.action.initiate = vignettesActionCreate;
     o->value.action.terminate = 0;
@@ -546,8 +544,6 @@ vignettesDisplayInitOptions (VignettesDi
 	
 	o = &md->opt[VIGNETTES_DISPLAY_OPTION_RELEASE];
     o->name = "release";
-    o->shortDesc = N_("Release a vignette");
-    o->longDesc	 = N_("Release a vignette");
     o->type = CompOptionTypeAction;
     o->value.action.initiate = vignettesActionRelease;
     o->value.action.terminate = 0;
diff -Nurp extra-plugins.orig/vignettes/vignettes_shader.h extra-plugins/vignettes/vignettes_shader.h
--- extra-plugins.orig/vignettes/vignettes_shader.h	1970-01-01 00:00:00.000000000 +0000
+++ extra-plugins/vignettes/vignettes_shader.h	2007-05-10 13:21:32.000000000 +0000
@@ -0,0 +1,15 @@
+/**
+ *
+ * This file is autogenerated from :
+ *  
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ **/
+#ifndef vignettes_SHADER_H
+#define vignettes_SHADER_H
+
+#endif
diff -Nurp extra-plugins.orig/wall/wall.c extra-plugins/wall/wall.c
--- extra-plugins.orig/wall/wall.c	2007-04-17 00:07:36.000000000 +0000
+++ extra-plugins/wall/wall.c	1970-01-01 00:00:00.000000000 +0000
@@ -1,2619 +0,0 @@
-/**
- *
- * Beryl wall plugin
- *
- * wall.c
- *
- * Copyright (c) 2006 Robert Carr <racarr@beryl-project.org>
- *
- * Authors:
- * Robert Carr <racarr@beryl-project.org>
- * Dennis Kasprzyk <onestone@beryl-project.org>
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- **/
-/*
-Wall Features:
-	Drag and drop of viewports (low priority) No spring physics as in group DnD, simple slide back and fade and the viewports are swapped, or physically swap the viewports, no more than two viewports should ever be moving.
-
-	Move with window keyboard shortcuts (high priority)
-
-	Snapping to wall edges (medium priority)
-
-	Animation that zooms from current viewport out and back in to new viewport (medium priority) - Cornelius is already working on this
-
-    ****************************************************************************************************
-    *	If you plan on adding a feature not on the above list please bring it up for discussion first. *
-    ****************************************************************************************************
-
-Known Bugs:
-	Current behavior with input zoom is screwy... (disable input zoom?)
-
-*/
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <math.h>
-#include <sys/time.h>
-
-#include <compiz.h>
-#include "wall_options.h"
-
-#include <GL/glu.h>
-
-#include <cairo-xlib-xrender.h>
-#include <cairo.h>
-
-#define PI 3.14159265359f
-
-#define WIN_X(w) ((w)->attrib.x - (w)->input.left)
-#define WIN_Y(w) ((w)->attrib.y - (w)->input.top)
-#define WIN_W(w) ((w)->width + (w)->input.left + (w)->input.right)
-#define WIN_H(w) ((w)->height + (w)->input.top + (w)->input.bottom)
-
-static int displayPrivateIndex;
-
-/* Enums */
-typedef enum
-{
-	Up = 0,
-	Left,
-	Down,
-	Right
-} Direction;
-
-enum DnDState
-{
-	DnDNone = 0,
-	DnDDuring,
-	DnDStart
-};
-
-typedef struct _WallCairoContext 
-{
-	Pixmap pixmap;
-	CompTexture texture;
-	cairo_surface_t *surface;
-	cairo_t *cr;
-	int width;
-	int height;
-} WallCairoContext;
-
-typedef struct _WallDisplay
-{
-	int screenPrivateIndex;
-	HandleEventProc handleEvent;
-} WallDisplay;
-
-typedef struct _WallScreen
-{
-	int windowPrivateIndex;
-
-	DonePaintScreenProc donePaintScreen;
-	PaintScreenProc paintScreen;
-	PreparePaintScreenProc preparePaintScreen;
-	PaintTransformedScreenProc paintTransformedScreen;
-	PaintWindowProc paintWindow;
-	DamageWindowRectProc damageWindowRect;
-//	SetClipPlanesProc setClipPlanes;
-	SetScreenOptionProc setScreenOption;
-
-	Bool activatedEdges;
-
-	int moveStep;
-	float expoCam;				// Used for expo zoom animation
-	Bool expoActive;
-
-	float size;					// Used to store zoom out amount of miniview, if someone added bindings to change this miniview would be resizable, greater size = smaller miniview
-
-	Bool moving;				// Used to track miniview movement
-	Bool expoMode;				// In expo mode?
-
-	int pointerX;				// Updated in donePaintScreen with XQueryPointer if pointer location is neccesary i.e. moving miniview
-	int pointerY;
-
-	int grabIndex;				// For expo grab
-
-	GLint viewport[4];
-
-	int dndState;
-	CompWindow *dndWindow;		// Window being dragged in expo mode
-	int prevCursorX, prevCursorY;
-	int newCursorX, newCursorY;
-	CompWindow *stickyWindow;
-	int origVX;
-	int origVY;
-	int rorigx;
-	int rorigy;
-	int mouseOverViewX;
-	int mouseOverViewY;
-
-	int destx;
-	int desty;
-	int curx;
-	int cury;
-
-	int timer;
-
-	Bool anyClick;
-	int boxTimeout;
-
-	Window moveWindow;
-
-	Bool miniScreen;
-	WindowPaintAttrib mSAttribs;
-	float mSzCamera;
-
-	float firstViewportX;
-	float firstViewportY;
-	float viewportWidth;
-	float viewportHeight;
-	float viewportBorder;
-	
-	int moveWindowX;
-	int moveWindowY;
-
-	WallCairoContext *switcherContext;
-	WallCairoContext *thumbContext;
-	WallCairoContext *highlightContext;
-	WallCairoContext *arrowContext;
-
-} WallScreen;
-
-typedef struct _WallWindow
-{
-	Bool hovered;				// Is a window hovered over in expo mode?
-	Bool skipNotify;
-	int origx;
-	int origy;
-} WallWindow;
-
-typedef struct _xyz_tuple
-{
-	float x, y, z;
-} Point3d;
-
-
-/* Helpers */
-#define GET_WALL_DISPLAY(d) \
-		((WallDisplay *) (d)->privates[displayPrivateIndex].ptr)
-#define WALL_DISPLAY(d) \
-		WallDisplay *wd = GET_WALL_DISPLAY(d);
-
-#define GET_WALL_SCREEN(s, wd) \
-		((WallScreen *) (s)->privates[(wd)->screenPrivateIndex].ptr)
-#define WALL_SCREEN(s) \
-		WallScreen *ws = GET_WALL_SCREEN(s, GET_WALL_DISPLAY(s->display))
-
-#define GET_WALL_WINDOW(w, ws)                                     \
-        ((WallWindow *) (w)->privates[(ws)->windowPrivateIndex].ptr)
-#define WALL_WINDOW(w)    \
-        WallWindow *ww = GET_WALL_WINDOW  (w,                     \
-                GET_WALL_SCREEN  (w->screen,             \
-                        GET_WALL_DISPLAY (w->screen->display)))
-
-#define GET_SCREEN \
- 	CompScreen *s;\
-	Window xid; \
-	xid = getIntOptionNamed(option, nOption, "root", 0); \
-	s = findScreenAtDisplay(d, xid); \
-        if (!s) \
-            return FALSE;
-
-#define sigmoid(x) (1.0f/(1.0f+exp(-5.5f*2*((x)-0.5))))
-#define sigmoidProgress(x) ((sigmoid(x) - sigmoid(0)) / \
-							(sigmoid(1) - sigmoid(0)))
-
-
-/* functions pending for core inclusion */
-#include <stdarg.h>
-static Bool
-screenGrabExist (CompScreen *s, ...)
-{
-    va_list ap;
-    char    *name;
-    int	    i;
-
-    for (i = 0; i < s->maxGrab; i++)
-    {
-		if (s->grabs[i].active)
-		{
-			va_start (ap, s);
-
-			name = va_arg (ap, char *);
-			while (name)
-			{
-				if (strcmp (name, s->grabs[i].name) == 0)
-					break;
-
-				name = va_arg (ap, char *);
-			}
-
-			va_end (ap);
-
-			if (name)
-				return TRUE;
-		}
-    }
-
-    return FALSE;
-}
-
-static Bool 
-pointerOnlyOnDesktop(CompScreen * s, int pointerX, int pointerY)
-{
-	CompWindow *w;
-
-	for (w = s->windows; w; w = w->next)
-	{
-		if ((w->invisible && !w->shaded) || w->id == s->root
-			|| w->type & CompWindowTypeDesktopMask)
-			continue;
-		if (w->shaded)
-		{
-			if (pointerX >= (w->attrib.x - w->input.left)
-				&& pointerX <=
-				(w->attrib.x + w->attrib.width +
-				 w->input.right)
-				&& pointerY >= (w->attrib.y - w->input.top)
-				&& pointerY <= (w->attrib.y + w->input.bottom))
-				return FALSE;
-		}
-		else
-		{
-			if (pointerX >= (w->attrib.x - w->input.left)
-				&& pointerX <=
-				(w->attrib.x + w->attrib.width +
-				 w->input.right)
-				&& pointerY >= (w->attrib.y - w->input.top)
-				&& pointerY <=
-				(w->attrib.y + w->attrib.height + w->input.bottom))
-				return FALSE;
-		}
-	}
-
-	return TRUE;
-}
-
-
-static void wallDrawSwitcherBackground(CompScreen *s)
-{
-	WALL_SCREEN(s);
-
-	cairo_t * cr = ws->switcherContext->cr;
-	
-	cairo_save(cr);
-	cairo_set_operator(cr, CAIRO_OPERATOR_CLEAR);
-	cairo_paint(cr);
-	cairo_restore(cr);
-	cairo_set_operator(cr, CAIRO_OPERATOR_OVER);
-	cairo_save(cr);
-
-	int hsize = s->hsize;
-	int vsize = s->vsize;
-	
-	float border = 10.0f;
-	float outline = 2.0f;
-	
-	float width = (float) ws->switcherContext->width;
-	width -= outline;
-	float height = (float) ws->switcherContext->height;
-	height -= outline;
-
-	cairo_pattern_t *pattern;
-
-	cairo_translate(cr, outline/2.0f, outline/2.0f);
-
-	// set the pattern for the switcher's background
-	pattern = cairo_pattern_create_linear(0, 0, width, height);
-	cairo_pattern_add_color_stop_rgba(pattern, 0.00f, 0.80, 0.80, 0.90, 0.85);
-	cairo_pattern_add_color_stop_rgba(pattern, 0.65f, 0.95, 0.95, 1.0f, 0.85);
-	cairo_pattern_add_color_stop_rgba(pattern, 0.85f, 0.85, 0.85, 0.85, 0.85);
-	cairo_set_source(cr, pattern);
-
-	// draw the border's shape
-	cairo_arc(cr, border, border, border, PI, 1.5f*PI);
-	cairo_arc(cr, border+width-2*border, border, border, 1.5f*PI, 2.0*PI);
-	cairo_arc(cr, width-border, height-border, border, 0,  PI/2.0f);
-	cairo_arc(cr, border, height-border, border,  PI/2.0f, PI);
-	cairo_close_path(cr);
-
-	// apply pattern to background...
-	cairo_fill_preserve(cr);
-	
-	// ... and draw an outline
-	cairo_set_line_width(cr, outline);
-	cairo_set_source_rgba(cr, 0.2,0.2,0.2,0.85);
-	cairo_stroke(cr);
-
-	cairo_pattern_destroy(pattern);
-
-	int viewportWidth  = floor((width  - border*(s->hsize+1))/hsize);
-	int viewportHeight = floor((height - border*(s->vsize+1))/vsize);
-	ws->viewportWidth = viewportWidth;
-	ws->viewportHeight = viewportHeight;
-	ws->viewportBorder = border;
-	
-	cairo_translate(cr, border, border);
-	
-	int i, j;
-	float vpX, vpY;
-
-	for (i = 0; i < hsize; i++)
-	{
-		for (j = 0; j < vsize; j++)
-		{
-			vpX = i*(viewportWidth + border + outline/2.0f);
-			vpY = j*(viewportHeight + border + outline/2.0f);
-
-			// this cuts a hole into our background
-			cairo_set_operator(cr, CAIRO_OPERATOR_OVER);
-			cairo_set_source_rgba(cr, 0.0, 0.0, 0.0, 1.0);
-			cairo_rectangle(cr, vpX, vpY, viewportWidth, viewportHeight);
-			cairo_fill_preserve(cr);
-			cairo_set_operator(cr, CAIRO_OPERATOR_XOR);
-			cairo_fill(cr);
-		}
-	}
-	
-	cairo_restore(cr);
-	
-}
-
-static void wallDrawThumb(CompScreen *s)
-{
-	WALL_SCREEN(s);
-
-	cairo_t * cr = ws->thumbContext->cr;
-	
-	cairo_save(cr);
-	cairo_set_operator(cr, CAIRO_OPERATOR_CLEAR);
-	cairo_paint(cr);
-	cairo_restore(cr);
-	cairo_set_operator(cr, CAIRO_OPERATOR_OVER);
-	cairo_save(cr);
-
-	float border = 10.0f;
-	float outline = 2.0f;
-
-	float width  = (float) ws->thumbContext->width;
-	float height = (float) ws->thumbContext->height;
-
-	ws->viewportWidth = width;
-	ws->viewportHeight = height;
-	ws->viewportBorder = border;
-	
-	width -= outline;
-	height -= outline;
-
-	cairo_translate(cr, outline/2.0f, outline/2.0f);
-	cairo_pattern_t *pattern;
-
-	pattern = cairo_pattern_create_linear(0, 0, width, height);
-	cairo_pattern_add_color_stop_rgba(pattern, 0.0f, 0.2, 0.2, 0.2 ,0.35);
-	cairo_pattern_add_color_stop_rgba(pattern, 1.0f, 0.25, 0.25, 0.25, 0.25);
-
-	// apply the patter for thumb background
-	cairo_set_source(cr, pattern);
-	cairo_rectangle(cr, 0, 0, width, height);
-	cairo_fill_preserve(cr);
-
-	cairo_set_line_width(cr, outline);
-	cairo_set_source_rgba(cr, 0.2, 0.2, 0.2, 0.65);
-	cairo_stroke(cr);
-
-	cairo_pattern_destroy(pattern);
-
-	cairo_restore(cr);
-	
-}
-
-static void wallDrawHighlight(CompScreen *s)
-{
-	WALL_SCREEN(s);
-
-	cairo_t * cr = ws->highlightContext->cr;
-	
-	cairo_save(cr);
-	cairo_set_operator(cr, CAIRO_OPERATOR_CLEAR);
-	cairo_paint(cr);
-	cairo_restore(cr);
-	cairo_set_operator(cr, CAIRO_OPERATOR_OVER);
-	cairo_save(cr);
-
-	float outline = 2.0f;
-
-	float width  = (float) ws->highlightContext->width;
-	float height = (float) ws->highlightContext->height;
-	
-	width -= outline;
-	height -= outline;
-
-	cairo_translate(cr, outline/2.0f, outline/2.0f);
-	cairo_pattern_t *pattern;
-
-	pattern = cairo_pattern_create_linear(0, 0, width, height);
-	cairo_pattern_add_color_stop_rgba(pattern, 0.0f, 1.0f, 1.0f, 1.0f ,0.95);
-	cairo_pattern_add_color_stop_rgba(pattern, 1.0f, 0.875, 0.875, 0.875, 0.65);
-
-	// apply the patter for thumb background
-	cairo_set_source(cr, pattern);
-	cairo_rectangle(cr, 0, 0, width, height);
-	cairo_fill_preserve(cr);
-
-	cairo_set_line_width(cr, outline);
-	cairo_set_source_rgba(cr, 0.2, 0.2, 0.2, 0.65);
-	cairo_stroke(cr);
-
-	cairo_pattern_destroy(pattern);
-
-	cairo_restore(cr);
-	
-}
-
-static void wallDrawArrow(CompScreen *s)
-{
-	WALL_SCREEN(s);
-
-	cairo_t * cr = ws->arrowContext->cr;
-	
-	cairo_save(cr);
-	cairo_set_operator(cr, CAIRO_OPERATOR_CLEAR);
-	cairo_paint(cr);
-	cairo_restore(cr);
-	cairo_set_operator(cr, CAIRO_OPERATOR_OVER);
-	cairo_save(cr);
-
-	float outline = 2.0f;
-
-	float width  = (float) ws->arrowContext->width;
-	float height = (float) ws->arrowContext->height;
-	
-	width -= outline;
-	height -= outline;
-
-	cairo_translate(cr, outline/2.0f, outline/2.0f);
-
-	// apply the patter for thumb background
-
-	cairo_set_line_width(cr, outline);
-
-	// draw top part of the arrow
-	cairo_set_source_rgba(cr, 0.9, 0.9, 0.9, 0.85);
-	cairo_move_to(cr, 15, 0);
-	cairo_line_to(cr, 30, 30);
-	cairo_line_to(cr, 15, 24.5);
-	cairo_line_to(cr, 15, 0);
-	cairo_fill(cr);
-
-	// draw bottom part of the arrow
-	cairo_set_source_rgba(cr, 0.86, 0.86, 0.86, 0.85);
-	cairo_move_to(cr, 15, 0);
-	cairo_line_to(cr, 0, 30);
-	cairo_line_to(cr, 15, 24.5);
-	cairo_line_to(cr, 15, 0);
-	cairo_fill(cr);
-
-	// draw the arrow outline
-	cairo_set_source_rgba(cr, 0.2,0.2,0.2,0.65);
-	cairo_move_to(cr, 15, 0);
-	cairo_line_to(cr, 30, 30);
-	cairo_line_to(cr, 15, 24.5);
-	cairo_line_to(cr, 0, 30);
-	cairo_line_to(cr, 15, 0);
-	cairo_stroke(cr);
-
-	cairo_restore(cr);
-	
-}
-
-static void wallSetupCairoContext(CompScreen *s, WallCairoContext *context)
-{
-	XRenderPictFormat * format;
-	Screen * screen;
-	
-	screen = ScreenOfDisplay(s->display->display, s->screenNum);
-	
-	int width, height;
-	width = context->width;
-	height = context->height;
-
-	initTexture(s, &context->texture);
-
-	format = XRenderFindStandardFormat(s->display->display, PictStandardARGB32);
-	
-	context->pixmap = XCreatePixmap(s->display->display, s->root, width, height, 32);
-	
-	if (!bindPixmapToTexture(s, &context->texture, context->pixmap, width, height, 32))
-		printf("Couldn't create cairo context for switcher");
-	
-	context->surface = cairo_xlib_surface_create_with_xrender_format(s->display->display, context->pixmap, screen, format, width, height);
-	context->cr = cairo_create(context->surface);
-
-	cairo_t *cr = context->cr;
-	cairo_save(cr);
-	cairo_set_operator(cr, CAIRO_OPERATOR_CLEAR);
-	cairo_paint(cr);
-	cairo_restore(cr);
-	cairo_set_operator(cr, CAIRO_OPERATOR_OVER);
-}
-
-static void wallDestroyCairoContext(CompScreen *s, WallCairoContext *context)
-{
-	if (context->cr)
-		cairo_destroy(context->cr);
-
-	if (context->surface)
-		cairo_surface_destroy(context->surface);
-
-	finiTexture(s, &context->texture);
-	
-	if (context->pixmap)
-		XFreePixmap(s->display->display, context->pixmap);
-}
-
-/* TODO: make setClipPlanes wrappable in core */
-#if 0
-static void wallSetClipPlanes (CompScreen *s, int output)
-{
-	WALL_SCREEN(s);
-	
-	if (ws->moving || ws->expoCam > 0.0)
-	{
-
- 		float XScale = (float)s->width / s->outputDev[output].width;
-		float YScale = (float)s->height / s->outputDev[output].height;
-
-		float XOffset =
-				(s->width / 2.0f -
-				 (s->outputDev[output].region.extents.x1 +
-				  s->outputDev[output].region.extents.x2) / 2.0f) /
-				(float)s->outputDev[output].width;
-
-		float YOffset =
-				(s->height / 2.0f -
-				 (s->outputDev[output].region.extents.y1 +
-				  s->outputDev[output].region.extents.y2) / 2.0f) /
-				(float)s->outputDev[output].height;
-		
-		glTranslatef(XOffset, -YOffset, 0.0f);
-		glScalef( XScale, YScale, 1.0f);
-	}
-
-	
-	UNWRAP(ws, s, setClipPlanes);
-	(*s->setClipPlanes) (s, output);
-	WRAP(ws, s, setClipPlanes, wallSetClipPlanes);
-
-}
-#endif
-
-static Bool wallCheckDestination(CompScreen * s, int destX, int destY)
-{
-	if (s->x - destX < 0)
-		return FALSE;
-
-	if (s->x - destX >= s->hsize)
-		return FALSE;
-
-	if (s->y - destY >= s->vsize)
-		return FALSE;
-
-	if (s->y - destY < 0)
-		return FALSE;
-
-	return TRUE;
-}
-
-static void wallReleaseMoveWindow (CompScreen * s)
-{
-	CompWindow *w;
-	WALL_SCREEN(s);
-
-	w = findWindowAtScreen (s, ws->moveWindow);
-	if (w)
-		syncWindowPosition (w);
-	ws->moveWindow = 0;
-}
-
-static Bool wallMoveViewport(CompScreen * s, int x, int y, Window moveWindow)
-{
-	int newDestX = MAXSHORT;
-	int newDestY = MAXSHORT;
-
-	if (!x && !y)
-		return FALSE;
-
-	WALL_SCREEN(s);
-	if (ws->moving)
-			return FALSE;
-
-	if (!ws->expoMode)
-	{
-		if (!ws->timer)
-		{
-			ws->curx = 0;
-			ws->cury = 0;
-
-			newDestX = x;
-			newDestY = y;
-		}
-
-		if (wallCheckDestination(s, newDestX, newDestY))
-		{
-	
-			float newTimeout = wallGetSlideDuration(s->display) * 1000.0f * 
-				               (float)(MAX(abs(newDestY), abs(newDestX)));
-
-			ws->destx = newDestX;
-			ws->desty = newDestY;
-			ws->moving = TRUE;
-			ws->timer = (int)newTimeout - ws->timer;
-			if (ws->moveWindow != moveWindow)
-			{
-				CompWindow *w;
-				wallReleaseMoveWindow (s);
-				w = findWindowAtScreen(s, moveWindow);
-				if (w)
-				{
-					if (!(w->type & (CompWindowTypeDesktopMask |
-									 CompWindowTypeDockMask)))
-					{
-						if (!(w->state & CompWindowStateStickyMask))
-						{
-							ws->moveWindow = w->id;
-							ws->moveWindowX = w->attrib.x;
-							ws->moveWindowY = w->attrib.y;
-							raiseWindow (w);
-						}
-					}
-				}
-			}
-		}
-	}
-
-	if (ws->moving)
-	{
-		if (wallGetShowSwitcher(s->display))
-			ws->boxTimeout = wallGetPreviewTimeout(s->display) * 1000;
-		else
-			ws->boxTimeout = 0;
-
-		if (!otherScreenGrabExist(s, "move", "scale", "group-drag", "wall", 0))
-		{
-			if (ws->grabIndex)
-				removeScreenGrab(s, ws->grabIndex, NULL);
-			ws->grabIndex = pushScreenGrab(s, s->invisibleCursor, "wall");
-		}
-		else
-		{
-			ws->moving = FALSE;
-			ws->destx = 0;
-			ws->desty = 0;
-			ws->timer = 0;
-		}
-	}
-
-	damageScreen(s);
-
-
-	return ws->moving;
-}
-
-static void wallHandleEvent(CompDisplay * d, XEvent * event)
-{
-	WALL_DISPLAY(d);
-	CompScreen *s;
-
-	WallScreen *ws;
-
-	switch (event->type)
-	{
-	case ButtonPress:
-		s = findScreenAtDisplay(d, event->xbutton.root);
-		ws = GET_WALL_SCREEN(s, wd);
-		if (ws->expoMode)
-		{
-			ws->anyClick = TRUE;
-			damageScreen(s);
-			if (event->xbutton.button == Button1)
-				ws->dndState = DnDStart;
-			else if (event->xbutton.button != Button5)
-			{
-				CompWindow *w;
-
-				for (w = s->windows; w; w = w->next)
-					syncWindowPosition(w);
-				if (ws->grabIndex)
-				{
-					removeScreenGrab(s, ws->grabIndex, 0);
-					ws->grabIndex = 0;
-				}
-				if (ws->stickyWindow)
-				{
-					WALL_WINDOW(ws->stickyWindow);
-					moveWindow(ws->stickyWindow,
-							   s->workArea.x + ww->origx -
-							   ws->stickyWindow->input.left - 20,
-							   s->workArea.y + ww->origy -
-							   ws->stickyWindow->input.top - 20, TRUE, TRUE);
-					syncWindowPosition(ws->stickyWindow);
-				}
-				damageScreen(s);
-				ws->origVX = ws->mouseOverViewX;
-				ws->origVY = ws->mouseOverViewY;
-				ws->expoMode = FALSE;
-
-				while (s->x != ws->mouseOverViewX)
-					moveScreenViewport(s, 1, 0, TRUE);
-				while (s->y != ws->mouseOverViewY)
-					moveScreenViewport(s, 0, 1, TRUE);
-
-				focusDefaultWindow(s->display);
-			}
-			damageScreen(s);
-		}
-		break;
-	case ButtonRelease:
-		s = findScreenAtDisplay(d, event->xbutton.root);
-		ws = GET_WALL_SCREEN(s, wd);
-
-		if (ws->dndState == DnDDuring || ws->dndState == DnDStart)
-		{
-			if (ws->dndWindow)
-			{
-				syncWindowPosition(ws->dndWindow);
-				(*s->windowUngrabNotify)(ws->dndWindow);
-				/* update window attibutes to make sure a 
-				   moved maximized window is properly snapped
-				   to the work area */
-				updateWindowAttributes(ws->dndWindow, 
-					CompStackingUpdateModeNone);
-			}
-
-			ws->dndState = DnDNone;
-			ws->dndWindow = NULL;
-		}
-		break; 
-	case ClientMessage:
-		if (event->xclient.message_type == d->winActiveAtom)
-		{
-			CompWindow *w;
-
-			w = findWindowAtDisplay(d, event->xclient.window);
-			if (w)
-			{
-				int dx, dy;
-
-				s = w->screen;
-
-				/* window must be placed */
-				if (!w->placed)
-					break;
-
-				if (otherScreenGrabExist
-					(s, "switcher", "scale", 0))
-					break;
-
-				defaultViewportForWindow(w, &dx, &dy);
-				dx -= s->x;
-				dy -= s->y;
-				if (dx || dy)
-					wallMoveViewport(s, -dx, -dy, None);
-			}
-		}
-		else if (event->xclient.message_type == d->desktopViewportAtom)
-		{
-			int dx, dy;
-
-			s = findScreenAtDisplay(d, event->xclient.window);
-			if (!s)
-				break;
-
-			if (otherScreenGrabExist
-				(s, "switcher", "scale", 0))
-				break;
-
-			dx = event->xclient.data.l[0] / s->width - s->x;
-			dy = event->xclient.data.l[1] / s->height - s->y;
-
-			if (!dx && !dy)
-				break;
-			wallMoveViewport(s, -dx, -dy, None);
-		}
-		break;
-	}
-
-	UNWRAP(wd, d, handleEvent);
-	(*d->handleEvent) (d, event);
-	WRAP(wd, d, handleEvent, wallHandleEvent);
-}
-
-static Bool wallNext(CompDisplay * d, CompAction * action,
-					 CompActionState state, CompOption * option, int nOption)
-{
-	GET_SCREEN;
-	WALL_SCREEN(s);
-
-	if (ws->expoCam == 0.0f)
-	{
-		if ((s->x == s->hsize - 1) && (s->y == s->vsize - 1))
-			wallMoveViewport(s, s->hsize - 1, s->vsize - 1, None);
-		else if (s->x == s->hsize - 1)
-			wallMoveViewport(s, s->hsize - 1, -1, None);
-		else
-			wallMoveViewport(s, -1, 0, None);
-	}
-
-	return TRUE;
-}
-
-static Bool wallPrev(CompDisplay * d, CompAction * action,
-					 CompActionState state, CompOption * option, int nOption)
-{
-	GET_SCREEN;
-	WALL_SCREEN(s);
-
-	if (ws->expoCam == 0.0f)
-	{
-		if ((s->x == 0) && (s->y == 0))
-			wallMoveViewport(s, -(s->hsize - 1), -(s->vsize - 1), None);
-		else if (s->x == 0)
-			wallMoveViewport(s, -(s->hsize - 1), 1, None);
-		else
-			wallMoveViewport(s, 1, 0, None);
-	}
-
-	return TRUE;
-}
-
-static Bool wallUpWheel(CompDisplay * d, CompAction * action,
-						CompActionState state, CompOption * option,
-						int nOption)
-{
-	GET_SCREEN;
-	int winX, winY;
-	int rootX, rootY;
-	unsigned int mask_return;
-	Window root_return;
-	Window child_return;
-
-	XQueryPointer(s->display->display, s->root,
-				  &root_return, &child_return,
-				  &rootX, &rootY, &winX, &winY, &mask_return);
-
-	if (pointerOnlyOnDesktop(s, rootX, rootY))
-	{
-		wallPrev(d, action, state, option, nOption);
-		return TRUE;
-	}
-
-	return FALSE;
-}
-
-static Bool wallDownWheel(CompDisplay * d, CompAction * action,
-						  CompActionState state, CompOption * option,
-						  int nOption)
-{
-	GET_SCREEN;
-	int winX, winY;
-	int rootX, rootY;
-	unsigned int mask_return;
-	Window root_return;
-	Window child_return;
-
-	XQueryPointer(s->display->display, s->root,
-				  &root_return, &child_return,
-				  &rootX, &rootY, &winX, &winY, &mask_return);
-
-	if (pointerOnlyOnDesktop(s, rootX, rootY))
-	{
-		wallNext(d, action, state, option, nOption);
-		return TRUE;
-	}
-
-	return FALSE;
-}
-
-static Bool wallInitiate(CompScreen *s, int dx, int dy, Window win)
-{
-	int amountX = -dx;
-	int amountY = -dy;
-
-	if (wallGetAllowWraparound(s->display))
-	{
-		if ((s->x + dx) < 0)
-			amountX = -(s->hsize + dx);
-		else if ((s->x + dx) >= s->hsize)
-			amountX = s->hsize - dx;
-
-		if ((s->y + dy) < 0)
-			amountY = -(s->vsize + dy);
-		else if ((s->y + dy) >= s->vsize)
-			amountY = s->vsize - dy;
-	}
-
-	wallMoveViewport(s, amountX, amountY, win);
-
-	return TRUE;
-}
-
-static Bool wallInitiateFlip(CompScreen *s, Direction direction, Bool dnd)
-{
-	int dx, dy;
-
-	if (dnd)
-	{
-		if (!wallGetEdgeflipDnd(s))
-			return FALSE;
-
-		if (otherScreenGrabExist(s, "wall", 0))
-			return FALSE;
-	}
-	else if (screenGrabExist(s, "move", 0))
-	{
-		if (!wallGetEdgeflipMove(s))
-			return FALSE;
-	}
-	else if (screenGrabExist(s, "group-drag", 0))
-	{
-		if (!wallGetEdgeflipDnd(s))
-			return FALSE;
-	}
-	else if (!wallGetEdgeflipPointer(s))
-		return FALSE;
-
-	switch (direction)
-	{
-		case Left:
-			dx = 1; dy = 0;
-			break;
-		case Right:
-			dx = -1; dy = 0;
-			break;
-		case Up:
-			dx = 0; dy = 1;
-			break;
-		case Down:
-			dx = 0; dy = -1;
-			break;
-		default:
-			dx = 0;	dy = 0;
-			break;
-	}
-
-	if (wallMoveViewport(s, dx, dy, None))
-	{
-		int offsetX, offsetY;
-		int warpX, warpY;
-
-		if (dx > 0) {
-			offsetX = s->width - 10;
-			warpX = pointerX + s->width;
-		} else if (dx < 0) {
-			offsetX = 1- s->width;
-			warpX = pointerX - s->width;
-		} else {
-			offsetX = 0;
-			warpX = lastPointerX;
-		}
-
-		if (dy > 0) {
-			offsetY = s->height - 10;
-			warpY = pointerY + s->height;
-		} else if (dy < 0) {
-			offsetY = 1- s->height;
-			warpY = pointerY - s->height;
-		} else {
-			offsetY = 0;
-			warpY = lastPointerY;
-		}
-
-		warpPointer(s->display, offsetX, offsetY);
-		lastPointerX = warpX;
-		lastPointerY = warpY;
-	}
-
-	return TRUE;
-}
-
-static Bool wallLeft(CompDisplay * d, CompAction * action,
-					 CompActionState state, CompOption * option, int nOption)
-{
-	GET_SCREEN;
-
-	return wallInitiate(s, -1, 0, None);
-}
-
-static Bool wallRight(CompDisplay * d, CompAction * action,
-					  CompActionState state, CompOption * option, int nOption)
-{
-	GET_SCREEN;
-
-	return wallInitiate(s, 1, 0, None);
-}
-
-static Bool wallUp(CompDisplay * d, CompAction * action,
-				   CompActionState state, CompOption * option, int nOption)
-{
-	GET_SCREEN;
-
-	return wallInitiate(s, 0, -1, None);
-}
-
-static Bool wallDown(CompDisplay * d, CompAction * action,
-					 CompActionState state, CompOption * option, int nOption)
-{
-	GET_SCREEN;
-
-	return wallInitiate(s, 0, 1, None);
-}
-
-static Bool wallFlipLeft(CompDisplay * d, CompAction * action,
-					     CompActionState state, CompOption * option, int nOption)
-{
-	GET_SCREEN;
-
-	return wallInitiateFlip(s, Left, (state & CompActionStateInitEdgeDnd));
-}
-
-static Bool wallFlipRight(CompDisplay * d, CompAction * action,
-					      CompActionState state, CompOption * option, int nOption)
-{
-	GET_SCREEN;
-
-	return wallInitiateFlip(s, Right, (state & CompActionStateInitEdgeDnd));
-}
-
-static Bool wallFlipUp(CompDisplay * d, CompAction * action,
-				       CompActionState state, CompOption * option, int nOption)
-{
-	GET_SCREEN;
-
-	return wallInitiateFlip(s, Up, (state & CompActionStateInitEdgeDnd));
-}
-
-static Bool wallFlipDown(CompDisplay * d, CompAction * action,
-					     CompActionState state, CompOption * option, int nOption)
-{
-	GET_SCREEN;
-
-	return wallInitiateFlip(s, Down, (state & CompActionStateInitEdgeDnd));
-}
-
-static Bool wallLeftWithWindow (CompDisplay *d, CompAction * action,
-								CompActionState state, CompOption * option,
-								int nOption)
-{
-	GET_SCREEN;
-	Window win = getIntOptionNamed (option, nOption, "window", 0);
-
-	return wallInitiate(s, -1, 0, win);
-}
-
-static Bool wallRightWithWindow (CompDisplay *d, CompAction * action,
-								 CompActionState state, CompOption * option,
-								 int nOption)
-{
-	GET_SCREEN;
-	Window win = getIntOptionNamed (option, nOption, "window", 0);
-
-	return wallInitiate(s, 1, 0, win);
-}
-
-static Bool wallUpWithWindow (CompDisplay *d, CompAction * action,
-							  CompActionState state, CompOption * option,
-							  int nOption)
-{
-	GET_SCREEN;
-	Window win = getIntOptionNamed (option, nOption, "window", 0);
-
-	return wallInitiate(s, 0, -1, win);
-}
-
-static Bool wallDownWithWindow (CompDisplay *d, CompAction * action,
-								CompActionState state, CompOption * option,
-								int nOption)
-{
-	GET_SCREEN;
-	Window win = getIntOptionNamed (option, nOption, "window", 0);
-
-	return wallInitiate(s, 0, 1, win);
-}
-
-static Bool wallExpo(CompDisplay * d, CompAction * action,
-					 CompActionState state, CompOption * option, int nOption)
-{
-	GET_SCREEN;
-	WALL_SCREEN(s);
-
-	if (otherScreenGrabExist(s, "expo", 0))
-		return FALSE;
-
-	ws->expoMode = !ws->expoMode;
-	ws->anyClick = FALSE;
-	if (ws->expoMode)
-		ws->grabIndex =	pushScreenGrab(s, None, "expo");
-	else if (ws->grabIndex)
-		removeScreenGrab(s, ws->grabIndex, 0);
-
-	if (ws->stickyWindow)
-	{
-		WALL_WINDOW(ws->stickyWindow);
-		moveWindow(ws->stickyWindow,
-				   s->workArea.x + ww->origx - ws->stickyWindow->input.left -
-				   20,
-				   s->workArea.y + ww->origy - ws->stickyWindow->input.top -
-				   20, TRUE, TRUE);
-		syncWindowPosition(ws->stickyWindow);
-	}
-
-	ws->stickyWindow = 0;
-
-	if (ws->dndWindow)
-		syncWindowPosition(ws->dndWindow);
-	ws->dndState = DnDNone;
-	ws->dndWindow = 0;
-
-	if (!ws->expoMode && ws->origVX >= 0 && ws->origVY >= 0)
-	{
-		while (s->x != ws->origVX)
-			moveScreenViewport(s, 1, 0, TRUE);
-		while (s->y != ws->origVY)
-			moveScreenViewport(s, 0, 1, TRUE);
-	}
-	if (ws->expoMode)
-	{
-		ws->origVX = -1;
-		ws->origVY = -1;
-		ws->rorigx = s->x;
-		ws->rorigy = s->y;
-	}
-	damageScreen(s);
-
-	focusDefaultWindow(s->display);
-
-	return TRUE;
-}
-
-static Bool wallSticky(CompDisplay * d, CompAction * action,
-					   CompActionState state, CompOption * option,
-					   int nOption)
-{
-	GET_SCREEN;
-	WALL_SCREEN(s);
-	if (ws->stickyWindow)
-	{
-		WALL_WINDOW(ws->stickyWindow);
-		moveWindow(ws->stickyWindow,
-				   s->workArea.x + ww->origx - ws->stickyWindow->input.left -
-				   20,
-				   s->workArea.y + ww->origy - ws->stickyWindow->input.top -
-				   20, TRUE, TRUE);
-		syncWindowPosition(ws->stickyWindow);
-		ws->dndWindow = NULL;
-		ws->dndState = DnDNone;
-	}
-	if (ws->expoMode)
-	{
-		CompWindow *w = findWindowAtDisplay(d, d->activeWindow);
-
-		if (w)
-			syncWindowPosition(w);
-		if (w && !ws->stickyWindow)
-			ws->stickyWindow = w;
-		else if (ws->stickyWindow)
-			ws->stickyWindow = 0;
-	}
-
-	if (ws->stickyWindow)
-	{
-		WALL_WINDOW(ws->stickyWindow);
-		ww->origx = ws->stickyWindow->serverX;
-		ww->origy = ws->stickyWindow->serverY;
-		moveWindow(ws->stickyWindow,
-				   -ws->stickyWindow->serverX + ws->stickyWindow->input.left +
-				   s->workArea.x,
-				   s->workArea.y + -ws->stickyWindow->serverY +
-				   ws->stickyWindow->input.top + 20, TRUE, TRUE);
-		syncWindowPosition(ws->stickyWindow);
-		ws->dndState = DnDNone;
-		ws->dndWindow = NULL;
-
-		raiseWindow(ws->stickyWindow);
-		moveInputFocusToWindow(ws->stickyWindow);
-	}
-
-	return FALSE;
-}
-
-//Other way around
-static void invertTransformedVertex(CompScreen * s, const ScreenPaintAttrib * sAttrib,
-						   const CompTransform *transform,
-						   int output, int vertex[2])
-{
-	//Projection Matrix.
-	WALL_SCREEN(s);
-
-	CompTransform     sTransform = *transform;
-
-	(s->applyScreenTransform) (s, sAttrib, output, &sTransform);
-	transformToScreenSpace (s, output, -sAttrib->zTranslate, &sTransform);
-
-	glGetIntegerv(GL_VIEWPORT, ws->viewport);
-
-	GLdouble p1[3];
-	GLdouble p2[3];
-	GLdouble v[3];
-	GLdouble alpha;
-	int i;
-
-	GLdouble mvm[16];
-	GLdouble pm[16];
-
-	for (i = 0; i < 16; i++)
-	{
-		mvm[i] = sTransform.m[i];
-		pm[i] = s->projection[i];
-	}
-
- 	gluUnProject(vertex[0], s->height - vertex[1], 0, mvm, pm,
-				 ws->viewport, &p1[0], &p1[1], &p1[2]);
-	gluUnProject(vertex[0], s->height - vertex[1], -1.0, mvm, pm,
-				 ws->viewport, &p2[0], &p2[1], &p2[2]);
-
-	for (i = 0; i < 3; i++)
-		v[i] = p1[i] - p2[i];
-
-	alpha = -p1[2] / v[2];
-
-	vertex[0] = ceil(p1[0] + (alpha * v[0]));
-	vertex[1] = ceil(p1[1] + (alpha * v[1]));
-}
-
-
-static Bool wallDamageWindowRect(CompWindow *w, Bool initial, BoxPtr rect)
-{
-	WALL_SCREEN(w->screen);
-	Bool status;
-
-	UNWRAP(ws, w->screen, damageWindowRect);
-	status = (*w->screen->damageWindowRect) (w, initial, rect);
-	WRAP(ws, w->screen, damageWindowRect, wallDamageWindowRect);
-
-	if (ws->expoCam > 0.0f)
-		damageScreen(w->screen);
-
-	return status;
-}
-
-static void wallDrawCairoTextureOnScreen(CompScreen *s, int output, Region region)
-{
-	WALL_SCREEN(s);
-
-	glPushMatrix();
-	prepareXCoords(s, output, -DEFAULT_Z_CAMERA);
-	glDisableClientState(GL_TEXTURE_COORD_ARRAY);
-	glEnable(GL_BLEND);
-
-	float centerx = s->outputDev[output].region.extents.x1 + (s->outputDev[output].width/2.0f);
-	float centery = s->outputDev[output].region.extents.y1 + (s->outputDev[output].height/2.0f);
-
-	float width  = (float) ws->switcherContext->width;
-	float height = (float) ws->switcherContext->height;
-
-	float topleftx = centerx-floor(width/2.0f);
-	float toplefty = centery-floor(height/2.0f);
-
-	float border = 10.0f;
-
-	ws->firstViewportX = topleftx + border;
-	ws->firstViewportY = toplefty + border;
-
-	if (!ws->moving)
-	{
-		double left = (float)ws->boxTimeout / (wallGetPreviewTimeout(s->display) * 1000.0f) ;
-
-		if (left < 0)
-			left = 0.0f;
-		else if (left > 0.5)
-			left = 1.0f;
-		else
-			left = 2 * left;
-
-		screenTexEnvMode (s, GL_MODULATE);
-		
-		glColor4f(left,left,left,left);
-		
-		glTranslatef(0.0f,0.0f,-(1-left));
-		
-		ws->mSzCamera = -(1-left);	
-	}
-	else
-		ws->mSzCamera = 0.0f;
-
-	// draw background
-	enableTexture(s, &ws->switcherContext->texture, COMP_TEXTURE_FILTER_FAST);
-
-	CompMatrix matrix = ws->switcherContext->texture.matrix;
-	matrix.x0 -= topleftx * matrix.xx;
-	matrix.y0 -= toplefty * matrix.yy;
-
-	BOX box;
-	box.x1 = topleftx;
-	box.x2 = box.x1 + width;
-	box.y1 = toplefty;
-	box.y2 = box.y1 + height;
-
-	glBegin(GL_QUADS);
-	glTexCoord2f(COMP_TEX_COORD_X(&matrix, box.x1), COMP_TEX_COORD_Y(&matrix, box.y2));
-	glVertex2i(box.x1, box.y2);
-	glTexCoord2f(COMP_TEX_COORD_X(&matrix, box.x2), COMP_TEX_COORD_Y(&matrix, box.y2));
-	glVertex2i(box.x2, box.y2);
-	glTexCoord2f(COMP_TEX_COORD_X(&matrix, box.x2), COMP_TEX_COORD_Y(&matrix, box.y1));
-	glVertex2i(box.x2, box.y1);
-	glTexCoord2f(COMP_TEX_COORD_X(&matrix, box.x1), COMP_TEX_COORD_Y(&matrix, box.y1));
-	glVertex2i(box.x1, box.y1);	
-	glEnd();
-
-	disableTexture(s, &ws->switcherContext->texture);
-
-	// draw thumb
-	width = (float) ws->thumbContext->width;
-	height = (float) ws->thumbContext->height;
-	
-	int i, j;
-
-	enableTexture(s, &ws->thumbContext->texture, COMP_TEXTURE_FILTER_FAST);
-	glBegin(GL_QUADS);
-	for (i = 0; i < s->hsize; i++)
-	{
-		for (j = 0; j < s->vsize; j++)
-		{
-			if (i == (s->x - ws->destx) && j == (s->y - ws->desty) && ws->moving)
-				continue;
-
-			box.x1 = i*(width+border);
-			box.x1 += topleftx + border;
-			box.x2 = box.x1 + width;
-			box.y1 = j*(height+border);
-			box.y1 += toplefty + border;
-			box.y2 = box.y1 + height;
-
-			matrix = ws->thumbContext->texture.matrix;
-			matrix.x0 -= box.x1 * matrix.xx;
-			matrix.y0 -= box.y1 * matrix.yy;
-
-			glTexCoord2f(COMP_TEX_COORD_X(&matrix, box.x1), COMP_TEX_COORD_Y(&matrix, box.y2));
-			glVertex2i(box.x1, box.y2);
-			glTexCoord2f(COMP_TEX_COORD_X(&matrix, box.x2), COMP_TEX_COORD_Y(&matrix, box.y2));
-			glVertex2i(box.x2, box.y2);
-			glTexCoord2f(COMP_TEX_COORD_X(&matrix, box.x2), COMP_TEX_COORD_Y(&matrix, box.y1));
-			glVertex2i(box.x2, box.y1);
-			glTexCoord2f(COMP_TEX_COORD_X(&matrix, box.x1), COMP_TEX_COORD_Y(&matrix, box.y1));
-			glVertex2i(box.x1, box.y1);	
-		}
-	}
-	glEnd();
-	disableTexture(s, &ws->thumbContext->texture);
-
-	if (ws->moving) {
-
-		// draw highlight
-		int posX, posY;
-		posX = s->x - ws->destx;
-		posY = s->y - ws->desty;
-
-		box.x1 = posX*(width+border);
-		box.x1 += topleftx + border;
-		box.x2 = box.x1 + width;
-		box.y1 = posY*(height+border);
-		box.y1 += toplefty + border;
-		box.y2 = box.y1 + height;
-
-		matrix = ws->highlightContext->texture.matrix;
-		matrix.x0 -= box.x1 * matrix.xx;
-		matrix.y0 -= box.y1 * matrix.yy;
-
-		enableTexture(s, &ws->highlightContext->texture, COMP_TEXTURE_FILTER_FAST);
-		glBegin(GL_QUADS);
-		glTexCoord2f(COMP_TEX_COORD_X(&matrix, box.x1), COMP_TEX_COORD_Y(&matrix, box.y2));
-		glVertex2i(box.x1, box.y2);
-		glTexCoord2f(COMP_TEX_COORD_X(&matrix, box.x2), COMP_TEX_COORD_Y(&matrix, box.y2));
-		glVertex2i(box.x2, box.y2);
-		glTexCoord2f(COMP_TEX_COORD_X(&matrix, box.x2), COMP_TEX_COORD_Y(&matrix, box.y1));
-		glVertex2i(box.x2, box.y1);
-		glTexCoord2f(COMP_TEX_COORD_X(&matrix, box.x1), COMP_TEX_COORD_Y(&matrix, box.y1));
-		glVertex2i(box.x1, box.y1);
-		glEnd();
-		disableTexture(s, &ws->highlightContext->texture);
-
-
-		// draw arrow
-		enableTexture(s, &ws->arrowContext->texture, COMP_TEXTURE_FILTER_GOOD);
-
-		float angle = 0.0f;
-		
-		if (ws->destx < 0 && ws->desty == 0)
-			angle = 90.0f;
-
-		else if (ws->destx > 0 && ws->desty == 0)
-			angle = 270.0f;
-
-		else if (ws->desty < 0)	{
-			angle = 180.0f;
-			
-			if (ws->destx > 0)
-				angle += 45.0f;
-			else if (ws->destx < 0)
-				angle -= 45.0f;
-		}
-
-		else if (ws->desty > 0)	{
-			if (ws->destx > 0)
-				angle = -45.0f;
-			else if (ws->destx < 0)
-				angle = 45.0f;
-		}
-
-		int aW, aH;
-		aW = ws->arrowContext->width;
-		aH = ws->arrowContext->height;
-
-		// if we have a viewport preview we just paint the arrow outside the switcher
-		if (wallGetMiniscreen(s->display))
-		{
-			width  = (float) ws->switcherContext->width;
-			height = (float) ws->switcherContext->height;
-
-			switch((int)angle) {
-				// top left
-				case -45:
-					box.x1 = topleftx - aW;
-					box.x1 -= border;
-					box.y1 = toplefty - aH;
-					box.y1 -= border;
-					break;
-				// up
-				case 0:
-					box.x1 = topleftx + width/2.0f - aW/2.0f;
-					box.y1 = toplefty - aH;
-					box.y1 -= border;
-					break;
-				// top right
-				case 45:
-					box.x1 = topleftx + width;
-					box.x1 += border;
-					box.y1 = toplefty - aH;
-					box.y1 -= border;
-					break;
-				// right
-				case 90:
-					box.x1 = topleftx + width;
-					box.x1 += border;
-					box.y1 = toplefty + height/2.0f - aH/2.0f;
-					break;
-				// bottom right
-				case 135:
-					box.x1 = topleftx + width;
-					box.x1 += border;
-					box.y1 = toplefty + height;
-					box.y1 += border;
-					break;
-				// down
-				case 180:
-					box.x1 = topleftx + width/2.0f - aW/2.0f;
-					box.y1 = toplefty + height;
-					box.y1 += border;
-					break;
-				// bottom left
-				case 225:
-					box.x1 = topleftx - aW;
-					box.x1 -= border;
-					box.y1 = toplefty + height;
-					box.y1 += border;
-					break;
-				// left
-				case 270:
-					box.x1 = topleftx - aW;
-					box.x1 -= border;
-					box.y1 = toplefty + height/2.0f - aH/2.0f;
-					break;
-				default:
-					break;
-			}
-		} else { // arrow is visible (no preview is painted over it)
-			posX = s->x;
-			posY = s->y;
-
-			box.x1 = posX*(width+border);
-			box.x1 += topleftx + border;
-			box.x1 += width/2 - aW/2;
-			box.y1 = posY*(height+border);
-			box.y1 += toplefty + border;
-			box.y1 += height/2 - aH/2;
-		}
-
-		box.x2 = box.x1 + aW;
-		box.y2 = box.y1 + aH;
-
-		glTranslatef(box.x1 + aW/2, box.y1 + aH/2, 0.0f);
-		glRotatef(angle, 0.0f, 0.0f, 1.0f);
-		glTranslatef(-box.x1 - aW/2, -box.y1 - aH/2, 0.0f);
-
-		matrix = ws->arrowContext->texture.matrix;
-		matrix.x0 -= box.x1 * matrix.xx;
-		matrix.y0 -= box.y1 * matrix.yy;
-
-		glBegin(GL_QUADS);
-		glTexCoord2f(COMP_TEX_COORD_X(&matrix, box.x1), COMP_TEX_COORD_Y(&matrix, box.y2));
-		glVertex2i(box.x1, box.y2);
-		glTexCoord2f(COMP_TEX_COORD_X(&matrix, box.x2), COMP_TEX_COORD_Y(&matrix, box.y2));
-		glVertex2i(box.x2, box.y2);
-		glTexCoord2f(COMP_TEX_COORD_X(&matrix, box.x2), COMP_TEX_COORD_Y(&matrix, box.y1));
-		glVertex2i(box.x2, box.y1);
-		glTexCoord2f(COMP_TEX_COORD_X(&matrix, box.x1), COMP_TEX_COORD_Y(&matrix, box.y1));
-		glVertex2i(box.x1, box.y1);	
-		glEnd();
-
-		disableTexture(s, &ws->arrowContext->texture);
-	}
-
-	glDisable(GL_BLEND);
-	glEnableClientState(GL_TEXTURE_COORD_ARRAY);
-	glPopMatrix();
-	screenTexEnvMode (s, GL_REPLACE);
-	glColor4usv(defaultColor);
-
-}
-
-
-
-static Bool wallPaintScreen(CompScreen * s,
-							const ScreenPaintAttrib * sAttrib,
-							const CompTransform    *transform,
-							Region region, int output, unsigned int mask)
-{
-	Bool status;
-
-	WALL_SCREEN(s);
-
-	ws->miniScreen = FALSE;
-
-	if (ws->expoCam > 0.0 || ws->moving)	// Miniview or expo?
-	{
-		mask |= PAINT_SCREEN_TRANSFORMED_MASK;
-	}
-
-	UNWRAP(ws, s, paintScreen);
-	status = (*s->paintScreen) (s, sAttrib, transform, region, output, mask);
-	WRAP(ws, s, paintScreen, wallPaintScreen);
-
-	if (ws->expoMode)
-	{
-		CompTransform     sTransform = *transform;
-
-		transformToScreenSpace (s, output, -DEFAULT_Z_CAMERA, &sTransform);
-
-		if (ws->stickyWindow)
-			s->paintWindow(ws->stickyWindow, &ws->stickyWindow->paint,
-						   &sTransform, &infiniteRegion, 0);
-
-	}
-	
-	if ((ws->moving || ws->boxTimeout) && wallGetShowSwitcher(s->display) && 
-		(output == s->currentOutputDev))
-	{
-		wallDrawCairoTextureOnScreen(s, output, region);
-
-		if (wallGetMiniscreen(s->display))
-		{
-			int i, j;
-			int origVX = s->x;
-			int origVY = s->y;
-
-			moveScreenViewport(s, s->x, s->y, FALSE);
-
-			for (j = 0; j < s->vsize; j++)
-			{
-				for (i = 0; i < s->hsize; i++)
-				{
-					ws->miniScreen = TRUE;
-					float mx = ws->firstViewportX + (i * (ws->viewportWidth + ws->viewportBorder));
-					float my = ws->firstViewportY + (j * (ws->viewportHeight + ws->viewportBorder));
-					float mw = ws->viewportWidth;
-					float mh = ws->viewportHeight;
-
-					ws->mSAttribs.xTranslate =
-							mx / s->outputDev[output].width;
-					ws->mSAttribs.yTranslate =
-							-my / s->outputDev[output].height;
-
-					ws->mSAttribs.xScale = mw / s->width;
-					ws->mSAttribs.yScale = mh / s->height;
-					ws->mSAttribs.opacity = OPAQUE * (1.0 + ws->mSzCamera);
-					ws->mSAttribs.brightness = 0.4f * BRIGHT;
-					ws->mSAttribs.saturation = COLOR;
-
-					if (i == origVX - ws->destx && j == origVY - ws->desty &&
-						ws->moving)
-					{
-						ws->mSAttribs.brightness = BRIGHT;
-					}
-					if (ws->boxTimeout && !ws->moving && i == origVX &&
-						j == origVY)
-						ws->mSAttribs.brightness = BRIGHT;
-
-
-					(*s->paintTransformedScreen) (s, sAttrib, transform, region,
-												  output, mask | PAINT_SCREEN_TRANSFORMED_MASK);
-					ws->miniScreen = FALSE;
-
-					moveScreenViewport(s, -1, 0, FALSE);
-				}
-				moveScreenViewport(s, 0, -1, FALSE);
-			}
-			moveScreenViewport(s, -origVX, -origVY, FALSE);
-		}
-	}
-	return status;
-}
-
-static void moveWindowToViewportYPosition(CompWindow * w, int y, Bool sync)
-{
-	int ty, vHeight = w->screen->height * w->screen->hsize;
-
-	y += w->screen->y * w->screen->height;
-	y = MOD(y, vHeight);
-	y -= w->screen->y * w->screen->height;
-
-	ty = y - w->attrib.y;
-	if (ty)
-	{
-		int m, wy;
-
-		if (!w->managed)
-			return;
-
-		if (w->type & (CompWindowTypeDesktopMask | CompWindowTypeDockMask))
-			return;
-
-		if (w->state & CompWindowStateStickyMask)
-			return;
-
-		m = w->attrib.y + ty;
-		if (m - w->output.top < w->screen->height - vHeight)
-			wy = ty + vHeight;
-		else if (m + w->height + w->output.bottom > vHeight)
-			wy = ty - vHeight;
-		else
-			wy = ty;
-
-		if (w->saveMask & CWY)
-			w->saveWc.y += wy;
-
-		moveWindow(w, 0, wy, sync, TRUE);
-
-		if (sync)
-			syncWindowPosition(w);
-	}
-}
-
-static void wallGetDistanceForAnimation(CompScreen *s, double left, int output, float *rdx, float *rdy)
-{
-	WALL_SCREEN(s);
-
-	// 1.44 isn't a magic number, it can be easily derived from the
-	// following
-	// integral x^2=x^3/3, then solve for x = 1 as we want to translate by 1
-	// total, you get 1.44 and the (tx-1.44) is to translate the parabola
-	// right by 1.44 
-	float tx = (1 - left) * 1.4422495;
-	float dx = (tx - 1.4422495) * (tx - 1.4422495) / 2;
-		
-	dx = 1 - dx;
-	dx *= s->width / (float)s->outputDev[output].width;
-	dx *= ws->destx;
-
-	float dy = (tx - 1.4422495) * (tx - 1.4422495) / 2;
-	dy = 1 - dy;
-	dy *= (s->height) / (float)s->outputDev[output].height;
-	dy *= ws->desty;
-
-	if (rdx)
-		*rdx = dx;
-
-	if (rdy)
-		*rdy = dy;
-}
-
-static void wallPreparePaintScreen(CompScreen * s, int ms)
-{
-	WALL_SCREEN(s);
-
-	if (ws->expoMode)	// Do we need the mouse location?
-	{
-		int winX, winY;
-		int rootX, rootY;
-		unsigned int mask_return;
-		Window root_return;
-		Window child_return;
-
-		XQueryPointer(s->display->display, s->root,
-					  &root_return, &child_return,
-					  &rootX, &rootY, &winX, &winY, &mask_return);
-
-		ws->pointerX = rootX;
-		ws->pointerY = rootY;
-
-	}
-	if (!ws->moving && ws->boxTimeout)
-	{
-		ws->boxTimeout -= ms;
-	}
-
-	if (ws->expoMode)
-	{
-		ws->expoCam = MIN(1.0, ws->expoCam + ((float)ms / 500.0));
-	}
-	else
-	{
-		ws->expoCam = MAX(0.0, ws->expoCam - ((float)ms / 500.0));
-	}
-
-	if (ws->moving)
-	{
-		ws->timer -= ms;
-		if (ws->moveWindow)
-		{
-			CompWindow *w;
-		
-			double left = (float)ws->timer / (wallGetSlideDuration(s->display) * 1000.0f *
-											  MAX(abs(ws->destx), abs(ws->desty)));
-			
-			w = findWindowAtScreen(s, ws->moveWindow);
-			if (w)
-			{
-				float dx, dy;
-
-				wallGetDistanceForAnimation(s, left, s->currentOutputDev, &dx, &dy);
-				
-				moveWindow (w, ws->moveWindowX - w->attrib.x, ws->moveWindowY - w->attrib.y, TRUE, TRUE);
-				moveWindowToViewportPosition(w, ws->moveWindowX - s->width*dx, FALSE);
-				moveWindowToViewportYPosition(w, ws->moveWindowY - s->height*dy, FALSE);
-				syncWindowPosition(w);
-			}
-		}
-	}
-
-	if (ws->moving && ws->timer <= 0)
-	{
-		ws->moving = FALSE;
-		moveScreenViewport(s, ws->destx, ws->desty, TRUE);
-		ws->timer = 0;
-		if (ws->moveWindow)
-			wallReleaseMoveWindow(s);
-		else
-			focusDefaultWindow(s->display);
-
-		if (ws->grabIndex)
-		{
-			removeScreenGrab(s, ws->grabIndex, NULL);
-			ws->grabIndex = 0;
-		}
-	}
-
-	UNWRAP(ws, s, preparePaintScreen);
-	(*s->preparePaintScreen) (s, ms);
-	WRAP(ws, s, preparePaintScreen, wallPreparePaintScreen);
-}
-
-static void wallPaintTransformedScreen(CompScreen * s,
-									   const ScreenPaintAttrib * sAttrib,
-									   const CompTransform    *transform,
-									   Region region, int output,
-									   unsigned int mask)
-{
-	WALL_SCREEN(s);
-
-	CompTransform     sTransform = *transform;
-
-	if (ws->miniScreen)
-	{
-		// move each screen to the correct output position
-		matrixTranslate(&sTransform, -s->outputDev[output].region.extents.x1 /
-					 s->outputDev[output].width,
-					 s->outputDev[output].region.extents.y1 /
-					 s->outputDev[output].height, 0.0f);
-		matrixTranslate(&sTransform, 0.0f, 0.0f, -DEFAULT_Z_CAMERA);
-
-		matrixTranslate(&sTransform, ws->mSAttribs.xTranslate, ws->mSAttribs.yTranslate, ws->mSzCamera);
-
-		// move orgin to top left
-		matrixTranslate(&sTransform, -0.5f, 0.5f, 0.0f);
-
-		matrixScale(&sTransform, ws->mSAttribs.xScale, ws->mSAttribs.yScale, 1.0);
-
-		// revert prepareXCoords region shift. Now all screens display the same
-		matrixTranslate(&sTransform, 0.5f, 0.5f, DEFAULT_Z_CAMERA);
-		matrixTranslate(&sTransform, s->outputDev[output].region.extents.x1 /
-					 s->outputDev[output].width,
-					 -s->outputDev[output].region.extents.y2 /
-					 s->outputDev[output].height, 0.0f);
-
-		UNWRAP(ws, s, paintTransformedScreen);
-		(*s->paintTransformedScreen) (s, sAttrib, &sTransform, &s->region, output, mask);
-		WRAP(ws, s, paintTransformedScreen, wallPaintTransformedScreen);
-		return;
-	}
-
-	UNWRAP(ws, s, paintTransformedScreen);
-
-	ws->expoActive = FALSE;
-
-	if (ws->expoCam > 0)
-	    mask |= PAINT_SCREEN_CLEAR_MASK;
-
-	(*s->paintTransformedScreen) (s, sAttrib, &sTransform, region, output, mask);
-
-	mask &= ~PAINT_SCREEN_CLEAR_MASK;
-	
-	if (ws->expoCam > 0.0)
-	{
-		int oldFilter = s->display->textureFilter;
-
-		if (ws->expoCam == 1 && wallGetMipmaps(s->display))
-			s->display->textureFilter = GL_LINEAR_MIPMAP_LINEAR;
-
-		int origVX = s->x;
-		int origVY = s->y;
-
-		const float gapy = 0.01f * ws->expoCam; // amount of gap between viewports
-		const float gapx = 0.01f * s->height / s->width * ws->expoCam;
-
-		// Zoom animation stuff
-
-		Point3d vpCamPos = {0, 0, 0};   // camera position for the selected viewport
-		Point3d expoCamPos = {0, 0, 0}; // camera position during expo mode
-
-		float hss = (float)s->width / s->outputDev[output].width;
-		float vss = (float)s->height / s->outputDev[output].height;
-		
-		vpCamPos.x = s->hsize * hss * ((s->x + 0.5) / s->hsize - 0.5) + gapx * (s->x);
-		vpCamPos.y = -s->vsize * vss * ((s->y + 0.5) / s->vsize - 0.5) - gapy * (s->y);
-		vpCamPos.z = 0;
-
-		float biasz = 0;
-		if (wallGetRotate(s->display))
-			biasz = MAX(s->hsize, s->vsize) * 0.15;
-
-		expoCamPos.x = gapx * (s->hsize - 1) * 0.5;
-		expoCamPos.y = -gapy * (s->vsize - 1) * 0.5;
-		expoCamPos.z = -DEFAULT_Z_CAMERA +
-			DEFAULT_Z_CAMERA * (MAX(s->hsize +
-									(s->hsize - 1) * gapx /
-									(s->width / s->outputDev[output].width),
-									s->vsize +
-									(s->vsize - 1) * gapy /
-									(s->height / s->outputDev[output].height))
-								+ biasz);
-
-		float progress = sigmoidProgress(ws->expoCam);
-
-		// interpolate between vpCamPos and expoCamPos
-		float camx = vpCamPos.x * (1 - progress) + expoCamPos.x * progress;
-		float camy = vpCamPos.y * (1 - progress) + expoCamPos.y * progress;
-		float camz = vpCamPos.z * (1 - progress) + expoCamPos.z * progress;
-
-		// End of Zoom animation stuff
-
-
-		moveScreenViewport(s, s->x, s->y, FALSE);
-
-		float rotation = 0.0;
-
-		if (wallGetRotate(s->display))
-		{
-			if (wallGetExpoAnimation(s->display) == ExpoAnimationZoom)
-				rotation = 10.0 * sigmoidProgress(ws->expoCam);
-			else
-				rotation = 10.0 * ws->expoCam;
-		}
-		// ALL TRANSFORMATION ARE EXECUTED FROM BOTTOM TO TOP
-
-
-		// move each screen to the correct output position
-		matrixTranslate(&sTransform, -s->outputDev[output].region.extents.x1 /
-					 s->outputDev[output].width,
-					 s->outputDev[output].region.extents.y1 /
-					 s->outputDev[output].height, 0.0f);
-		matrixTranslate(&sTransform, 0.0f, 0.0f, -DEFAULT_Z_CAMERA);
-
-		// zoom out
-		switch (wallGetExpoAnimation(s->display))
-		{
-			case ExpoAnimationFadezoom:
-				matrixTranslate(&sTransform, 0.0f, 0.0f, 1.0f - 1.2 * ws->expoCam);
-				break;
-			case ExpoAnimationZoom:
-				matrixTranslate(&sTransform, -camx, -camy, -camz);
-				break;
-			default:
-				matrixTranslate(&sTransform, 0.0f, 0.0f, -1.4f + 1.2 * ws->expoCam);
-				break;
-		}
-
-		// move orgin to top left
-		matrixTranslate(&sTransform, -0.5f, 0.5f, 0.0f);
-
-		// translate wall to orgin
-		matrixTranslate(&sTransform, (s->width / s->outputDev[output].width) * 0.5,
-					 -(s->height / s->outputDev[output].height) * 0.5, 0.0f);
-
-		// rotate
-		matrixRotate(&sTransform, rotation, 0.0f, 1.0f, 0.0f);
-
-		if (wallGetExpoAnimation(s->display) != ExpoAnimationZoom)
-		{
-			// scale that all viewports fit the screen
-			float aspect = wallGetAspectRatio(s->display);
-			float scale = (1.0 / MAX(s->hsize, s->vsize)) * ws->expoCam;
-			float scaleX =
-					(aspect * scale) +
-					((1.- aspect) * ((1.0 / s->hsize) * ws->expoCam));
-			float scaleY =
-					(aspect * scale) +
-					((1.- aspect) * ((1.0 / s->vsize) * ws->expoCam));
-			matrixScale(&sTransform, scaleX, scaleY, 1.0);
-		}
-
-		// translate wall to center
-		matrixTranslate(&sTransform, -(s->width / s->outputDev[output].width) * s->hsize *
-					 0.5,
-					 (s->height / s->outputDev[output].height) * s->vsize *
-					 0.5, 0.0f);
-
-		// revert prepareXCoords region shift. Now all screens display the same
-		matrixTranslate(&sTransform, 0.5f, 0.5f, DEFAULT_Z_CAMERA);
-		matrixTranslate(&sTransform, s->outputDev[output].region.extents.x1 /
-					 s->outputDev[output].width,
-					 -s->outputDev[output].region.extents.y2 /
-					 s->outputDev[output].height, 0.0f);
-
-		int i, j;
-
-		ws->expoActive = TRUE;
-
-		for (j = 0; j < s->vsize; j++)
-		{
-
-			CompTransform  sTransform2 = sTransform;
-			for (i = 0; i < s->hsize; i++)
-			{
-				if (wallGetExpoAnimation(s->display) == ExpoAnimationVortex)
- 					matrixRotate(&sTransform2, 360 * ws->expoCam, 0.0f, 1.0f,
-							  2.0f * ws->expoCam);
-
-				(*s->paintTransformedScreen) (s, sAttrib, &sTransform2, &s->region, output,
-											  mask);
-
-
-				if ((ws->pointerX >= s->outputDev[output].region.extents.x1)
-					&& (ws->pointerX < s->outputDev[output].region.extents.x2)
-					&& (ws->pointerY >=
-						s->outputDev[output].region.extents.y1) &&
-					(ws->pointerY < s->outputDev[output].region.extents.y2))
-				{
-					int cursor[2] = { ws->pointerX, ws->pointerY };
-
-					invertTransformedVertex(s, sAttrib, &sTransform2, output, cursor);
-
-					if ((cursor[0] > 0) && (cursor[0] < s->width) &&
-						(cursor[1] > 0) && (cursor[1] < s->height))
-					{
-						ws->mouseOverViewX = i;
-						ws->mouseOverViewY = j;
-						ws->newCursorX = i * s->width + cursor[0];
-						ws->newCursorY = j * s->height + cursor[1];
-						if (ws->anyClick || ws->dndState != DnDNone)
-						{
-
-							ws->origVX = i;	// Used to save last viewport interaction was in
-							ws->origVY = j;
-							ws->anyClick = FALSE;
-						}
-					}
-				}
-
-
-				// not sure this will work with different resolutions
-				matrixTranslate(&sTransform2,(s->width / s->outputDev[output].width + gapx),
-							 0.0f, 0.0);
-
-				moveScreenViewport(s, -1, 0, FALSE);
-			}
-
-			// not sure this will work with different resolutions
- 			matrixTranslate(&sTransform, 0,
-						 (-s->height / s->outputDev[output].height - gapy),
-						 0.0f);
-
-			moveScreenViewport(s, 0, -1, FALSE);
-		}
-
-		ws->expoActive = FALSE;
-		moveScreenViewport(s, -origVX, -origVY, FALSE);
-
-		s->filter[SCREEN_TRANS_FILTER] = oldFilter;
-		s->display->textureFilter = oldFilter;
-	}
-	else if (ws->moving)
-	{
-		double left = (float)ws->timer / (wallGetSlideDuration(s->display) * 1000.0f *
-										  MAX(abs(ws->destx), abs(ws->desty)));
-		int origx = s->x;
-		int origy = s->y;
-
-		clearTargetOutput(s->display, GL_COLOR_BUFFER_BIT);
-
-		int i, j;
-		float dx, dy;
-
-		wallGetDistanceForAnimation(s, left, output, &dx, &dy);
-		matrixTranslate(&sTransform, dx, -dy, 0);
-
-		for (i = -abs(ws->destx); i < s->hsize; i++)	// TODO: Add a slight bit of intelligence to not be so ineffecient
-		{
-			for (j = -abs(ws->desty); j < s->vsize; j++)
-			{
-
-				matrixTranslate(&sTransform, i *
-							 (s->width / (float)s->outputDev[output].width),
-							 j * (s->height /
-								  (float)s->outputDev[output].height), 0);
-				moveScreenViewport(s, -i, j, FALSE);
-				(*s->paintTransformedScreen) (s,
-											  sAttrib, &sTransform,
-											  &s->region, output, mask);
-
-				matrixTranslate(&sTransform, -i *
-							 (s->width / (float)s->outputDev[output].width),
-							 -j * (s->height /
-								   (float)s->outputDev[output].height), 0);
-				moveScreenViewport(s, i, -j, FALSE);
-
-
-			}
-
-
-		}
-
-
-		while (s->x != origx)
-			moveScreenViewport(s, -1, 0, FALSE);
-		while (s->y != origy)
-			moveScreenViewport(s, 0, 1, FALSE);
-
-	}
-
-	WRAP(ws, s, paintTransformedScreen, wallPaintTransformedScreen);
-}
-
-static Bool
-wallPaintWindow(CompWindow * w,
-			   const WindowPaintAttrib *attrib,
-			   const CompTransform    *transform,
-			   Region region, unsigned int mask)
-{
-	WALL_SCREEN(w->screen);
-	Bool status;
-
-	WindowPaintAttrib pA = *attrib;
-
-	if (ws->expoCam > 0.0)
-	{
-
-		if (ws->expoActive)
-		{
-			if (wallGetExpoAnimation(w->screen->display) != ExpoAnimationZoom)
-				pA.opacity = attrib->opacity * ws->expoCam;
-
-			if (w == ws->stickyWindow)
-				pA.opacity = 0;
-
-			if (w->wmType & CompWindowTypeDockMask)
-			{
-				if (wallGetExpoAnimation(w->screen->display) == ExpoAnimationZoom &&
-					((w->screen->x == ws->origVX &&
-					  w->screen->y == ws->origVY) ||
-					 (w->screen->x == ws->rorigx &&
-					  w->screen->y == ws->rorigy &&
-					  ws->origVY < 0 &&
-					  ws->origVX < 0)))
-					pA.opacity = attrib->opacity * (1 - sigmoidProgress(ws->expoCam));
-				else
-					pA.opacity = 0;
-			}
-
-			if (w->screen->x == ws->origVX && w->screen->y == ws->origVY)
-			{
-				pA.brightness = attrib->brightness;
-			}
-			else if (w->screen->x == ws->rorigx && w->screen->y == ws->rorigy &&
-				ws->origVY < 0 && ws->origVX < 0)
-			{
-				pA.brightness = attrib->brightness;
-			}
-			else
-				pA.brightness = attrib->brightness * .75;
-
-/*
- * FIXME: Bugged with windows intersecting more than one border
-			int winx = w->attrib.x - w->input.left;
-			int winy = w->attrib.y - w->input.top;
-			if (winx > -1 && winx < w->screen->width)
-				if (winy > -1 && winy < w->screen->height)
-					mask |= PAINT_WINDOW_TRANSFORMED_MASK;
-*/
-		}
-		else
-		{
-			if (!(w == ws->stickyWindow))
-			{
-				if (wallGetExpoAnimation(w->screen->display) == ExpoAnimationZoom)
-					pA.brightness = 0;
-				else
-					pA.brightness = attrib->brightness * (1 - sigmoidProgress(ws->expoCam));
-			}
-		}
-	}
-
-	if (ws->miniScreen)
-	{
-		pA.opacity = attrib->opacity * ((float)ws->mSAttribs.opacity / OPAQUE);
-		pA.brightness =	attrib->brightness * 
-				((float)ws->mSAttribs.brightness / BRIGHT);
-		pA.saturation = attrib->saturation * 
-				((float)ws->mSAttribs.saturation / COLOR);
-	}
-
-	if (!pA.opacity || !pA.brightness)
-		mask |= PAINT_WINDOW_NO_CORE_INSTANCE_MASK;
-
-	UNWRAP(ws, w->screen, paintWindow);
-	status = (*w->screen->paintWindow) (w, &pA, transform, region, mask);
-	WRAP(ws, w->screen, paintWindow, wallPaintWindow);
-
-	return status;
-}
-
-static void wallDonePaintScreen(CompScreen * s)
-{
-	WALL_SCREEN(s);
-
-	if (ws->moving || ws->boxTimeout || (ws->expoCam > 0.0f && ws->expoCam < 1.0f) || ws->anyClick || ws->dndState != DnDNone)
-		damageScreen(s);
-
-	if (ws->boxTimeout < 0)
-	{
-		ws->boxTimeout = 0;
-		damageScreen(s);
-	}
-
-	UNWRAP(ws, s, donePaintScreen);
-	(*s->donePaintScreen) (s);
-	WRAP(ws, s, donePaintScreen, wallDonePaintScreen);
-
-	if (ws->dndState == DnDDuring)
-	{
-		int dx = ws->newCursorX - ws->prevCursorX;
-		int dy = ws->newCursorY - ws->prevCursorY;
-
-		if (ws->dndWindow && !ws->stickyWindow)
-			moveWindow(ws->dndWindow, dx, dy, TRUE, wallGetExpoImmediateMove(s->display)); 
-
-		ws->prevCursorX = ws->newCursorX;
-		ws->prevCursorY = ws->newCursorY;
-
-		damageScreen(s);
-	}
-
-	if (ws->dndState != DnDStart)
-		return;
-
-	int origView = s->x;
-	int origViewY = s->y;
-
-	// needs to be moved into handle event
-	moveScreenViewport(s, s->x, s->y, FALSE);
-
-	CompWindow *w;
-
-	for (w = s->reverseWindows; w; w = w->prev)
-	{
-		if (w->destroyed)
-			continue;
-
-		if (!w->shaded)
-		{
-			if (w->attrib.map_state != IsViewable || !w->damaged)
-				continue;
-		}
-
-		if (w->type & CompWindowTypeNormalMask)
-		{
-			if (ws->newCursorX < WIN_X(w) ||
-				ws->newCursorX > WIN_X(w) + WIN_W(w))
-				continue;
-			if (ws->newCursorY < WIN_Y(w) ||
-				ws->newCursorY > WIN_Y(w) + WIN_H(w))
-				continue;
-			ws->dndState = DnDDuring;
-			ws->dndWindow = w;
-			(*w->screen->windowGrabNotify) (w, ws->newCursorX, ws->newCursorY, 0,
-					CompWindowGrabMoveMask | CompWindowGrabButtonMask);
-			break;
-		}
-	}
-	if (ws->dndWindow)
-	{
-		raiseWindow(ws->dndWindow);
-		moveInputFocusToWindow(ws->dndWindow);
-	}
-
-	moveScreenViewport(s, -origView, -origViewY, FALSE);
-
-	for (w = s->windows; w; w = w->next)
-	{
-		WALL_WINDOW(w);
-		ww->hovered = FALSE;
-	}
-
-	if (ws->dndState == DnDStart)	// No window is hovered
-		ws->dndState = DnDNone;
-
-	ws->prevCursorX = ws->newCursorX;
-	ws->prevCursorY = ws->newCursorY;
-}
-
-static 
-Bool wallSetScreenOptionCore(CompScreen *screen, char *name, CompOptionValue *value)
-{
-	WALL_SCREEN(screen);
-	Bool status;
-
-	UNWRAP(ws, screen, setScreenOption);
-	status = (*screen->setScreenOption) (screen, name, value);
-	WRAP(ws, screen, setScreenOption, wallSetScreenOptionCore);
-
-
-	if (status) {
-		if (strcmp(name, "size") == 0 || strcmp(name, "vsize") == 0) {
-
-			float border = 10.0f;
-			float width = 70*screen->hsize  + (2 * border * (screen->hsize-1));
-			width *= (float)screen->width / (float)screen->height;
-			float height = 70*screen->vsize + (2 * border * (screen->vsize-1));
-
-			wallDestroyCairoContext(screen, ws->switcherContext);
-			ws->switcherContext = (WallCairoContext*) malloc(sizeof(WallCairoContext));
-			ws->switcherContext->width = (int) width;
-			ws->switcherContext->height = (int) height;
-			wallSetupCairoContext(screen, ws->switcherContext);
-			wallDrawSwitcherBackground(screen);
-
-			wallDestroyCairoContext(screen, ws->thumbContext);
-			ws->thumbContext = (WallCairoContext*) malloc(sizeof(WallCairoContext));
-			ws->thumbContext->width = (int) (width - border*(screen->hsize+1)) / screen->hsize;
-			ws->thumbContext->height = (int) (height - border*(screen->vsize+1)) / screen->vsize;
-			wallSetupCairoContext(screen, ws->thumbContext);
-			wallDrawThumb(screen);
-
-			wallDestroyCairoContext(screen, ws->highlightContext);
-			ws->highlightContext = (WallCairoContext*) malloc(sizeof(WallCairoContext));
-			ws->highlightContext->width = (int) (width - border*(screen->hsize+1)) / screen->hsize;
-			ws->highlightContext->height = (int) (height - border*(screen->vsize+1)) / screen->vsize;
-			wallSetupCairoContext(screen, ws->highlightContext);
-			wallDrawHighlight(screen);
-		}
-	}
-
-	return status;
-}
-
-#if 0
-static void
-wallInitFlipScreenEdges(CompScreen *s)
-{
-	WALL_DISPLAY(s->display);
-	WALL_SCREEN(s);
-
-	if (wallGetEdgeflipPointer(s) || wallGetEdgeflipMove(s) ||
-		wallGetEdgeflipDnd(s))
-	{
-		if (!ws->activatedEdges)
-		{
-			addScreenAction(s, wallGetFlipLeft(s->display));
-			addScreenAction(s, wallGetFlipRight(s->display));
-			addScreenAction(s, wallGetFlipUp(s->display));
-			addScreenAction(s, wallGetFlipDown(s->display));
-			ws->activatedEdges = TRUE;
-		}
-	}
-	else
-	{
-		if (ws->activatedEdges)
-		{
-			removeScreenAction(s, wallGetFlipLeft(s->display));
-			removeScreenAction(s, wallGetFlipRight(s->display));
-			removeScreenAction(s, wallGetFlipUp(s->display));
-			removeScreenAction(s, wallGetFlipDown(s->display));
-			ws->activatedEdges = FALSE;
-		}
-	}
-}
-#endif
-
-static Bool wallInitDisplay(CompPlugin * p, CompDisplay * d)
-{
-	WallDisplay *wd;
-
-	wd = malloc(sizeof(WallDisplay));
-	if (!wd)
-		return FALSE;
-
-	wd->screenPrivateIndex = allocateScreenPrivateIndex(d);
-
-	if (wd->screenPrivateIndex < 0)
-	{
-		free(wd);
-		return FALSE;
-	}
-
-	wallSetExpoInitiate(d, wallExpo);
-	wallSetStickyInitiate(d, wallSticky);
-	wallSetLeftInitiate(d, wallLeft);
-	wallSetRightInitiate(d, wallRight);
-	wallSetUpInitiate(d, wallUp);
-	wallSetDownInitiate(d, wallDown);
-	wallSetNextInitiate(d, wallNext);
-	wallSetPrevInitiate(d, wallPrev);
-	wallSetLeftWindowInitiate(d, wallLeftWithWindow);
-	wallSetRightWindowInitiate(d, wallRightWithWindow);
-	wallSetUpWindowInitiate(d, wallUpWithWindow);
-	wallSetDownWindowInitiate(d, wallDownWithWindow);
-	wallSetFlipLeftInitiate(d, wallFlipLeft);
-	wallSetFlipRightInitiate(d, wallFlipRight);
-	wallSetFlipUpInitiate(d, wallFlipUp);
-	wallSetFlipDownInitiate(d, wallFlipDown);
-	wallSetUpWheelInitiate(d, wallUpWheel);
-	wallSetDownWheelInitiate(d, wallDownWheel);
-
-	WRAP(wd, d, handleEvent, wallHandleEvent);
-	d->privates[displayPrivateIndex].ptr = wd;
-
-	return TRUE;
-}
-
-static void wallFiniDisplay(CompPlugin * p, CompDisplay * d)
-{
-	WALL_DISPLAY(d);
-
-	UNWRAP(wd, d, handleEvent);
-
-	freeScreenPrivateIndex(d, wd->screenPrivateIndex);
-	free(wd);
-}
-
-static Bool wallInitScreen(CompPlugin * p, CompScreen * s)
-{
-	WallScreen *ws;
-
-	WALL_DISPLAY(s->display);
-
-	ws = malloc(sizeof(WallScreen));
-
-	if (!ws)
-		return FALSE;
-
-//	s->projectionStyle = COMP_PERSPECTIVE_GLOBAL;
-
-	ws->windowPrivateIndex = allocateWindowPrivateIndex(s);
-
-	ws->boxTimeout = 0;
-	ws->timer = 0;
-	ws->anyClick = FALSE;
-
-	ws->destx = 0;
-	ws->desty = 0;
-
-	ws->moving = FALSE;
-
-	ws->activatedEdges = FALSE;
-
-	ws->mouseOverViewX = 0;
-	ws->mouseOverViewY = 0;
-	ws->origVX = 0;
-	ws->origVY = 0;
-
-	ws->grabIndex = 0;
-
-	ws->pointerX = 0;
-	ws->pointerY = 0;
-
-	ws->expoCam = 0.0f;
-	ws->expoMode = 0;
-
-	ws->stickyWindow = NULL;
-	ws->moveWindow = None;
-	ws->size = 3.0;				// Size is kind of misleading it's more like amount zoomed out for miniviews...
-
-	ws->dndState = DnDNone;
-	ws->dndWindow = NULL;
-
-	WRAP(ws, s, paintScreen, wallPaintScreen);
-	WRAP(ws, s, donePaintScreen, wallDonePaintScreen);
-	WRAP(ws, s, paintTransformedScreen, wallPaintTransformedScreen);
-	WRAP(ws, s, preparePaintScreen, wallPreparePaintScreen);
-	WRAP(ws, s, paintWindow, wallPaintWindow);
-	WRAP(ws, s, damageWindowRect, wallDamageWindowRect);
-//	WRAP(ws, s, setClipPlanes, wallSetClipPlanes);
-	WRAP(ws, s, setScreenOption, wallSetScreenOptionCore);
-
-	s->privates[wd->screenPrivateIndex].ptr = ws;
-//	wallInitFlipScreenEdges(s);
-
-	// calculate the width of the switcher window
-	float border = 10.0f;
-	float width = 70*s->hsize  + (2 * border * (s->hsize-1));
-	width *= (float)s->width / (float)s->height;
-	float height = 70*s->vsize + (2 * border * (s->vsize-1));
-
-	ws->switcherContext = (WallCairoContext*) malloc(sizeof(WallCairoContext));
-	ws->switcherContext->width = (int) width;
-	ws->switcherContext->height = (int) height;
-	wallSetupCairoContext(s, ws->switcherContext);
-	wallDrawSwitcherBackground(s);
-
-	ws->thumbContext = (WallCairoContext*) malloc(sizeof(WallCairoContext));
-	ws->thumbContext->width = (int) (width - border*(s->hsize+1)) / s->hsize;
-	ws->thumbContext->height = (int) (height - border*(s->vsize+1)) / s->vsize;
-	wallSetupCairoContext(s, ws->thumbContext);
-	wallDrawThumb(s);
-
-	ws->highlightContext = (WallCairoContext*) malloc(sizeof(WallCairoContext));
-	ws->highlightContext->width = (int) (width - border*(s->hsize+1)) / s->hsize;
-	ws->highlightContext->height = (int) (height - border*(s->vsize+1)) / s->vsize;
-	wallSetupCairoContext(s, ws->highlightContext);
-	wallDrawHighlight(s);
-
-	ws->arrowContext = (WallCairoContext*) malloc(sizeof(WallCairoContext));
-	ws->arrowContext->width = 32;
-	ws->arrowContext->height = 32;
-	wallSetupCairoContext(s, ws->arrowContext);
-	wallDrawArrow(s);
-
-	return TRUE;
-}
-
-static void wallFiniScreen(CompPlugin * p, CompScreen * s)
-{
-	WALL_SCREEN(s);
-
-	wallDestroyCairoContext(s, ws->switcherContext);
-	wallDestroyCairoContext(s, ws->thumbContext);
-	wallDestroyCairoContext(s, ws->highlightContext);
-	wallDestroyCairoContext(s, ws->arrowContext);
-
-#if 0
-	if (ws->activatedEdges)
-	{
-		removeScreenAction(s, wallGetFlipLeft(s->display));
-		removeScreenAction(s, wallGetFlipRight(s->display));
-		removeScreenAction(s, wallGetFlipUp(s->display));
-		removeScreenAction(s, wallGetFlipDown(s->display));
-	}
-#endif
-
-	UNWRAP(ws, s, paintScreen);
-	UNWRAP(ws, s, donePaintScreen);
-	UNWRAP(ws, s, paintTransformedScreen);
-	UNWRAP(ws, s, preparePaintScreen);
-	UNWRAP(ws, s, paintWindow);
-	UNWRAP(ws, s, damageWindowRect);
-//	UNWRAP(ws, s, setClipPlanes);
-	UNWRAP(ws, s, setScreenOption);
-
-	free(ws);
-}
-
-static Bool wallInitWindow(CompPlugin * p, CompWindow * w)
-{
-	WallWindow *ww;
-
-	WALL_SCREEN(w->screen);
-
-	ww = malloc(sizeof(WallWindow));
-	if (!ww)
-		return FALSE;
-
-	ww->skipNotify = ww->hovered = FALSE;
-	ww->origx = ww->origy = 0;
-
-	w->privates[ws->windowPrivateIndex].ptr = ww;
-
-	return TRUE;
-}
-
-static void wallFiniWindow(CompPlugin * p, CompWindow * w)
-{
-	WALL_WINDOW(w);
-
-	free(ww);
-}
-
-static Bool wallInit(CompPlugin * p)
-{
-	displayPrivateIndex = allocateDisplayPrivateIndex();
-
-	if (displayPrivateIndex < 0)
-		return FALSE;
-
-	return TRUE;
-}
-
-static void wallFini(CompPlugin * p)
-{
-	if (displayPrivateIndex >= 0)
-		freeDisplayPrivateIndex(displayPrivateIndex);
-}
-
-static int wallGetVersion(CompPlugin * p, int version)
-{
-	return ABIVERSION;
-}
-
-CompPluginFeature wallFeatures[] = {
-	{"largedesktop"}
-};
-
-CompPluginDep wallDeps[] = {
-	{CompPluginRuleAfter, "decoration"}
-};
-
-CompPluginVTable wallVTable = {
-	"wall",
-	N_("Desktop Wall"),
-	N_("Desktop Wall Plugin"),
-	wallGetVersion,
-	wallInit,
-	wallFini,
-	wallInitDisplay,
-	wallFiniDisplay,
-	wallInitScreen,
-	wallFiniScreen,
-	wallInitWindow,
-	wallFiniWindow,
-	NULL,
-	NULL,
-	NULL,
-	NULL,
-	wallDeps,
-	sizeof(wallDeps) / sizeof(wallDeps[0]),
-	wallFeatures,
-	sizeof(wallFeatures) / sizeof(wallFeatures[0])
-};
-
-CompPluginVTable *getCompPluginInfo(void)
-{
-	return &wallVTable;
-}
diff -Nurp extra-plugins.orig/wall/wall.options extra-plugins/wall/wall.options
--- extra-plugins.orig/wall/wall.options	2007-04-03 13:47:32.000000000 +0000
+++ extra-plugins/wall/wall.options	1970-01-01 00:00:00.000000000 +0000
@@ -1,179 +0,0 @@
-<plugin name="wall">
-    <display>
-	<group name="Misc. Settings">
-	    <option name="expo" type="action">
-		<short>Expo</short>
-		<long>Engage wall expo mode</long>
-		<key>Super+e</key>
-		<edge>topleft</edge>
-	    </option>
-	    <option name="rotate" type="bool">
-		<short>Rotate Wall</short>
-		<long>Rotate wall in expo mode</long>
-		<default>false</default>
-	    </option>
-	    <option name="slide_duration" type="float">
-		<short>Wall Sliding Duration</short>
-		<long>Duration (in s) for wall sliding viewport switching animation</long>
-		<default>0.3</default>
-		<min>0.1</min>
-		<max>5.0</max>
-		<precision>0.05</precision>
-	    </option>
-	    <option name="expo_animation" type="enum">
-		<short>Expo Animation</short>
-		<long>Animation used when switching to expo mode</long>
-		<value name="Zoom" default="true">Zoom</value>
-		<value name="FadeZoom">Fade + Zoom</value>
-		<value name="Vortex">Vortex</value>
-	    </option>
-	    <option name="sticky" type="action">
-		<short>Sticky</short>
-		<long>Engage wall sticky mode</long>
-		<key>Super+Alt+s</key>
-	    </option>
-	    <option name="mipmaps" type="bool">
-		<short>Mipmaps</short>
-		<long>Generate mipmaps in expo mode</long>
-		<default>false</default>
-	    </option>
-	    <option name="aspect_ratio" type="float">
-		<short>Expo Mode Aspect Ratio</short>
-		<long>Expo mode wall aspect ratio</long>
-		<default>1.0</default>
-		<min>0.0</min>
-		<max>10.0</max>
-		<precision>0.1</precision>
-	    </option>
-	    <option name="expo_immediate_move" type="bool">
-		<short>Immediate moves in expo mode</short>
-		<long>Selects if windows movements in expo mode should be immediate - this among other things disables wobbliness</long>
-		<default>false</default>
-	    </option>
-	</group>
-	<group name="Viewport Switching">
-	    <option name="show_switcher" type="bool">
-		<short>Show Viewport Switcher Preview</short>
-		<long>Show switcher window while switching viewports</long>
-		<default>true</default>
-	    </option>
-	    <option name="miniscreen" type="bool">
-		<short>Show Live Viewport Previews</short>
-		<long>Show live viewport previews in switcher window</long>
-		<default>false</default>
-	    </option>
-	    <option name="preview_timeout" type="float">
-		<short>Switch Target Preview Visibility Time</short>
-		<long>Duration (in s) the switch target preview should remain visible after switching ends.</long>
-		<default>0.4</default>
-		<min>0.0</min>
-		<max>2.0</max>
-		<precision>0.05</precision>
-	    </option>
-	    <option name="allow_wraparound" type="bool">
-		<short>Allow Wrap-Around</short>
-		<long>Allow wrap-around when moving the wall up/down/left/right</long>
-		<default>false</default>
-	    </option>
-	    <option name="left" type="action">
-		<short>Move Left</short>
-		<long>Move along the wall to the left</long>
-		<key>Control+Alt+Left</key>
-	    </option>
-	    <option name="right" type="action">
-		<short>Move Right</short>
-		<long>Move along the wall to the right</long>
-		<key>Control+Alt+Right</key>
-	    </option>
-	    <option name="up" type="action">
-		<short>Move Up</short>
-		<long>Move along the wall up</long>
-		<key>Control+Alt+Up</key>
-	    </option>
-	    <option name="down" type="action">
-		<short>Move Down</short>
-		<long>Move along the wall down</long>
-		<key>Control+Alt+Down</key>
-	    </option>
-	    <option name="next" type="action">
-		<short>Move Next</short>
-		<long>Move along the wall to the next viewport</long>
-		<key>Control+Alt+Next</key>
-	    </option>
-	    <option name="prev" type="action">
-		<short>Move Prev</short>
-		<long>Move along the wall to the previous viewport</long>
-		<key>Control+Alt+Prev</key>
-	    </option>
-	    <option name="left_window" type="action">
-		<short>Move Left With Window</short>
-		<long>Move with window along the wall to the left</long>
-		<key>Control+Alt+Shift+Left</key>
-	    </option>
-	    <option name="right_window" type="action">
-		<short>Move Right With Window</short>
-		<long>Move with window along the wall to the right</long>
-		<key>Control+Alt+Shift+Right</key>
-	    </option>
-	    <option name="up_window" type="action">
-		<short>Move Up With Window</short>
-		<long>Move with window along the wall up</long>
-		<key>Control+Alt+Shift+Up</key>
-	    </option>
-	    <option name="down_window" type="action">
-		<short>Move Down With Window</short>
-		<long>Move with window along the wall down</long>
-		<key>Control+Alt+Shift+Down</key>
-	    </option>
-	    <option name="up_wheel" type="action">
-		<short>Mousewheel Up</short>
-		<long>Mousewheel up</long>
-		<button>Button4</button>
-	    </option>
-	    <option name="down_wheel" type="action">
-		<short>Mousewheel Down</short>
-		<long>Mousewheel down</long>
-		<button>Button5</button>
-	    </option>
-	    <option name="flip_left" type="action">
-		<short>Flip Left</short>
-		<long>Flip left</long>
-		<edge>left</edge>
-	    </option>
-	    <option name="flip_right" type="action">
-		<short>Flip Right</short>
-		<long>Flip right</long>
-		<edge>right</edge>
-	    </option>
-	    <option name="flip_up" type="action">
-		<short>Flip Up</short>
-		<long>Flip up</long>
-		<edge>top</edge>
-	    </option>
-	    <option name="flip_down" type="action">
-		<short>Flip Down</short>
-		<long>Flip down</long>
-		<edge>bottom</edge>
-	    </option>
-	</group>
-    </display>
-    <screen>
-	<group name="Viewport Switching">
-	    <option name="edgeflip_pointer" type="bool">
-		<short>Edge Flip Pointer</short>
-		<long>Flip viewport when moving the pointer to a screen edge</long>
-		<default>false</default>
-	    </option>
-	    <option name="edgeflip_move" type="bool">
-		<short>Edge Flip Move</short>
-		<long>Flip viewport when moving a window to a screen edge</long>
-		<default>true</default>
-	    </option>
-	    <option name="edgeflip_dnd" type="bool">
-		<short>Edge Flip DnD</short>
-		<long>Flip viewport when dragging an object to a screen edge</long>
-		<default>false</default>
-	    </option>
-	</group>
-    </screen>
-</plugin>
diff -Nurp extra-plugins.orig/wall/wall_options.c extra-plugins/wall/wall_options.c
--- extra-plugins.orig/wall/wall_options.c	2007-04-03 13:47:32.000000000 +0000
+++ extra-plugins/wall/wall_options.c	1970-01-01 00:00:00.000000000 +0000
@@ -1,1822 +0,0 @@
-/*
- *
- * This file is autogenerated from :
- * wall.options with the Beryl/Compiz optionss parser (bcop)
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-
-#include <compiz.h>
-
-#define _WALL_OPTIONS_INTERNAL
-#include "wall_options.h"
-
-static int displayPrivateIndex;
-
-static CompPluginVTable *wallPluginVTable = NULL;
-CompPluginVTable wallOptionsVTable;
-
-#define GET_WALL_OPTIONS_DISPLAY(d) \
-	((WallOptionsDisplay *) (d)->privates[displayPrivateIndex].ptr)
-
-#define WALL_OPTIONS_DISPLAY(d) \
-	WallOptionsDisplay *od = GET_WALL_OPTIONS_DISPLAY (d)
-
-#define GET_WALL_OPTIONS_SCREEN(s, od)	\
-	((WallOptionsScreen *) (s)->privates[(od)->screenPrivateIndex].ptr)
-
-#define WALL_OPTIONS_SCREEN(s) \
-	WallOptionsScreen *os = GET_WALL_OPTIONS_SCREEN (s, GET_WALL_OPTIONS_DISPLAY (s->display))
-
-typedef struct _WallOptionsDisplay
-{
-	int screenPrivateIndex;
-
-	CompOption opt[WallDisplayOptionNum];
-	CompOption *mOpt;
-	wallDisplayOptionChangeNotifyProc notify[WallDisplayOptionNum];
-	WallExpoAnimationEnum expo_animation;
-} WallOptionsDisplay;
-
-typedef struct _WallOptionsScreen
-{
-	CompOption opt[WallScreenOptionNum];
-	CompOption *mOpt;
-	wallScreenOptionChangeNotifyProc notify[WallScreenOptionNum];
-} WallOptionsScreen;
-
-#define WALL_EXPO_KEY_MODIFIERS_DEFAULT CompSuperMask
-#define WALL_EXPO_KEY_DEFAULT "e"
-#define WALL_ROTATE_DEFAULT FALSE
-
-#define WALL_SLIDE_DURATION_DEFAULT   0.3f
-#define WALL_SLIDE_DURATION_MIN       0.1f
-#define WALL_SLIDE_DURATION_MAX       5.0f
-#define WALL_SLIDE_DURATION_PRECISION 0.05f
-
-static const char *wallExpoAnimation[] = {
-	N_("Zoom"),
-	N_("Fade + Zoom"),
-	N_("Vortex")
-};
-
-#define WALL_EXPO_ANIMATION_DEFAULT ExpoAnimationZoom
-
-#define WALL_STICKY_KEY_MODIFIERS_DEFAULT (CompSuperMask | CompAltMask)
-#define WALL_STICKY_KEY_DEFAULT "s"
-#define WALL_MIPMAPS_DEFAULT FALSE
-
-#define WALL_ASPECT_RATIO_DEFAULT   1.0f
-#define WALL_ASPECT_RATIO_MIN       0.0f
-#define WALL_ASPECT_RATIO_MAX       10.0f
-#define WALL_ASPECT_RATIO_PRECISION 0.1f
-
-#define WALL_EXPO_IMMEDIATE_MOVE_DEFAULT FALSE
-
-#define WALL_SHOW_SWITCHER_DEFAULT TRUE
-
-#define WALL_MINISCREEN_DEFAULT FALSE
-
-#define WALL_PREVIEW_TIMEOUT_DEFAULT   0.4f
-#define WALL_PREVIEW_TIMEOUT_MIN       0.0f
-#define WALL_PREVIEW_TIMEOUT_MAX       2.0f
-#define WALL_PREVIEW_TIMEOUT_PRECISION 0.05f
-
-#define WALL_ALLOW_WRAPAROUND_DEFAULT FALSE
-
-#define WALL_LEFT_KEY_MODIFIERS_DEFAULT (ControlMask | CompAltMask)
-#define WALL_LEFT_KEY_DEFAULT "Left"
-#define WALL_RIGHT_KEY_MODIFIERS_DEFAULT (ControlMask | CompAltMask)
-#define WALL_RIGHT_KEY_DEFAULT "Right"
-#define WALL_UP_KEY_MODIFIERS_DEFAULT (ControlMask | CompAltMask)
-#define WALL_UP_KEY_DEFAULT "Up"
-#define WALL_DOWN_KEY_MODIFIERS_DEFAULT (ControlMask | CompAltMask)
-#define WALL_DOWN_KEY_DEFAULT "Down"
-#define WALL_NEXT_KEY_MODIFIERS_DEFAULT (ControlMask | CompAltMask)
-#define WALL_NEXT_KEY_DEFAULT "Next"
-#define WALL_PREV_KEY_MODIFIERS_DEFAULT (ControlMask | CompAltMask)
-#define WALL_LEFT_WINDOW_KEY_MODIFIERS_DEFAULT (ControlMask | CompAltMask | ShiftMask)
-#define WALL_LEFT_WINDOW_KEY_DEFAULT "Left"
-#define WALL_RIGHT_WINDOW_KEY_MODIFIERS_DEFAULT (ControlMask | CompAltMask | ShiftMask)
-#define WALL_RIGHT_WINDOW_KEY_DEFAULT "Right"
-#define WALL_UP_WINDOW_KEY_MODIFIERS_DEFAULT (ControlMask | CompAltMask | ShiftMask)
-#define WALL_UP_WINDOW_KEY_DEFAULT "Up"
-#define WALL_DOWN_WINDOW_KEY_MODIFIERS_DEFAULT (ControlMask | CompAltMask | ShiftMask)
-#define WALL_DOWN_WINDOW_KEY_DEFAULT "Down"
-#define WALL_EDGEFLIP_POINTER_DEFAULT FALSE
-
-#define WALL_EDGEFLIP_MOVE_DEFAULT TRUE
-
-#define WALL_EDGEFLIP_DND_DEFAULT FALSE
-
-CompAction * wallGetExpo(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionExpo].value.action;
-}
-
-void wallSetExpoInitiate(CompDisplay *d, CompActionCallBackProc init)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionExpo].value.action.initiate = init;
-}
-
-void wallSetExpoTerminate(CompDisplay *d, CompActionCallBackProc term)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionExpo].value.action.terminate = term;
-}
-
-CompOption * wallGetExpoOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionExpo];
-}
-
-void wallSetExpoNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionExpo] = notify;
-}
-
-Bool wallGetRotate(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return od->opt[WallDisplayOptionRotate].value.b;
-}
-
-CompOption * wallGetRotateOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionRotate];
-}
-
-void wallSetRotateNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionRotate] = notify;
-}
-
-float wallGetSlideDuration(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return od->opt[WallDisplayOptionSlideDuration].value.f;
-}
-
-CompOption * wallGetSlideDurationOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionSlideDuration];
-}
-
-void wallSetSlideDurationNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionSlideDuration] = notify;
-}
-
-char * wallGetExpoAnimationAsString(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return od->opt[WallDisplayOptionExpoAnimation].value.s;
-}
-
-WallExpoAnimationEnum wallGetExpoAnimation(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return od->expo_animation;
-}
-
-CompOption * wallGetExpoAnimationOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionExpoAnimation];
-}
-
-void wallSetExpoAnimationNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionExpoAnimation] = notify;
-}
-
-CompAction * wallGetSticky(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionSticky].value.action;
-}
-
-void wallSetStickyInitiate(CompDisplay *d, CompActionCallBackProc init)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionSticky].value.action.initiate = init;
-}
-
-void wallSetStickyTerminate(CompDisplay *d, CompActionCallBackProc term)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionSticky].value.action.terminate = term;
-}
-
-CompOption * wallGetStickyOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionSticky];
-}
-
-void wallSetStickyNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionSticky] = notify;
-}
-
-Bool wallGetMipmaps(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return od->opt[WallDisplayOptionMipmaps].value.b;
-}
-
-CompOption * wallGetMipmapsOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionMipmaps];
-}
-
-void wallSetMipmapsNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionMipmaps] = notify;
-}
-
-float wallGetAspectRatio(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return od->opt[WallDisplayOptionAspectRatio].value.f;
-}
-
-CompOption * wallGetAspectRatioOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionAspectRatio];
-}
-
-void wallSetAspectRatioNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionAspectRatio] = notify;
-}
-
-Bool wallGetExpoImmediateMove(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return od->opt[WallDisplayOptionExpoImmediateMove].value.b;
-}
-
-CompOption * wallGetExpoImmediateMoveOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionExpoImmediateMove];
-}
-
-void wallSetExpoImmediateMoveNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionExpoImmediateMove] = notify;
-}
-
-Bool wallGetShowSwitcher(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return od->opt[WallDisplayOptionShowSwitcher].value.b;
-}
-
-CompOption * wallGetShowSwitcherOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionShowSwitcher];
-}
-
-void wallSetShowSwitcherNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionShowSwitcher] = notify;
-}
-
-Bool wallGetMiniscreen(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return od->opt[WallDisplayOptionMiniscreen].value.b;
-}
-
-CompOption * wallGetMiniscreenOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionMiniscreen];
-}
-
-void wallSetMiniscreenNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionMiniscreen] = notify;
-}
-
-float wallGetPreviewTimeout(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return od->opt[WallDisplayOptionPreviewTimeout].value.f;
-}
-
-CompOption * wallGetPreviewTimeoutOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionPreviewTimeout];
-}
-
-void wallSetPreviewTimeoutNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionPreviewTimeout] = notify;
-}
-
-Bool wallGetAllowWraparound(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return od->opt[WallDisplayOptionAllowWraparound].value.b;
-}
-
-CompOption * wallGetAllowWraparoundOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionAllowWraparound];
-}
-
-void wallSetAllowWraparoundNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionAllowWraparound] = notify;
-}
-
-CompAction * wallGetLeft(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionLeft].value.action;
-}
-
-void wallSetLeftInitiate(CompDisplay *d, CompActionCallBackProc init)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionLeft].value.action.initiate = init;
-}
-
-void wallSetLeftTerminate(CompDisplay *d, CompActionCallBackProc term)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionLeft].value.action.terminate = term;
-}
-
-CompOption * wallGetLeftOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionLeft];
-}
-
-void wallSetLeftNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionLeft] = notify;
-}
-
-CompAction * wallGetRight(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionRight].value.action;
-}
-
-void wallSetRightInitiate(CompDisplay *d, CompActionCallBackProc init)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionRight].value.action.initiate = init;
-}
-
-void wallSetRightTerminate(CompDisplay *d, CompActionCallBackProc term)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionRight].value.action.terminate = term;
-}
-
-CompOption * wallGetRightOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionRight];
-}
-
-void wallSetRightNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionRight] = notify;
-}
-
-CompAction * wallGetUp(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionUp].value.action;
-}
-
-void wallSetUpInitiate(CompDisplay *d, CompActionCallBackProc init)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionUp].value.action.initiate = init;
-}
-
-void wallSetUpTerminate(CompDisplay *d, CompActionCallBackProc term)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionUp].value.action.terminate = term;
-}
-
-CompOption * wallGetUpOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionUp];
-}
-
-void wallSetUpNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionUp] = notify;
-}
-
-CompAction * wallGetDown(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionDown].value.action;
-}
-
-void wallSetDownInitiate(CompDisplay *d, CompActionCallBackProc init)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionDown].value.action.initiate = init;
-}
-
-void wallSetDownTerminate(CompDisplay *d, CompActionCallBackProc term)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionDown].value.action.terminate = term;
-}
-
-CompOption * wallGetDownOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionDown];
-}
-
-void wallSetDownNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionDown] = notify;
-}
-
-CompAction * wallGetNext(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionNext].value.action;
-}
-
-void wallSetNextInitiate(CompDisplay *d, CompActionCallBackProc init)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionNext].value.action.initiate = init;
-}
-
-void wallSetNextTerminate(CompDisplay *d, CompActionCallBackProc term)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionNext].value.action.terminate = term;
-}
-
-CompOption * wallGetNextOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionNext];
-}
-
-void wallSetNextNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionNext] = notify;
-}
-
-CompAction * wallGetPrev(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionPrev].value.action;
-}
-
-void wallSetPrevInitiate(CompDisplay *d, CompActionCallBackProc init)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionPrev].value.action.initiate = init;
-}
-
-void wallSetPrevTerminate(CompDisplay *d, CompActionCallBackProc term)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionPrev].value.action.terminate = term;
-}
-
-CompOption * wallGetPrevOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionPrev];
-}
-
-void wallSetPrevNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionPrev] = notify;
-}
-
-CompAction * wallGetLeftWindow(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionLeftWindow].value.action;
-}
-
-void wallSetLeftWindowInitiate(CompDisplay *d, CompActionCallBackProc init)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionLeftWindow].value.action.initiate = init;
-}
-
-void wallSetLeftWindowTerminate(CompDisplay *d, CompActionCallBackProc term)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionLeftWindow].value.action.terminate = term;
-}
-
-CompOption * wallGetLeftWindowOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionLeftWindow];
-}
-
-void wallSetLeftWindowNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionLeftWindow] = notify;
-}
-
-CompAction * wallGetRightWindow(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionRightWindow].value.action;
-}
-
-void wallSetRightWindowInitiate(CompDisplay *d, CompActionCallBackProc init)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionRightWindow].value.action.initiate = init;
-}
-
-void wallSetRightWindowTerminate(CompDisplay *d, CompActionCallBackProc term)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionRightWindow].value.action.terminate = term;
-}
-
-CompOption * wallGetRightWindowOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionRightWindow];
-}
-
-void wallSetRightWindowNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionRightWindow] = notify;
-}
-
-CompAction * wallGetUpWindow(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionUpWindow].value.action;
-}
-
-void wallSetUpWindowInitiate(CompDisplay *d, CompActionCallBackProc init)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionUpWindow].value.action.initiate = init;
-}
-
-void wallSetUpWindowTerminate(CompDisplay *d, CompActionCallBackProc term)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionUpWindow].value.action.terminate = term;
-}
-
-CompOption * wallGetUpWindowOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionUpWindow];
-}
-
-void wallSetUpWindowNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionUpWindow] = notify;
-}
-
-CompAction * wallGetDownWindow(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionDownWindow].value.action;
-}
-
-void wallSetDownWindowInitiate(CompDisplay *d, CompActionCallBackProc init)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionDownWindow].value.action.initiate = init;
-}
-
-void wallSetDownWindowTerminate(CompDisplay *d, CompActionCallBackProc term)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionDownWindow].value.action.terminate = term;
-}
-
-CompOption * wallGetDownWindowOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionDownWindow];
-}
-
-void wallSetDownWindowNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionDownWindow] = notify;
-}
-
-CompAction * wallGetUpWheel(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionUpWheel].value.action;
-}
-
-void wallSetUpWheelInitiate(CompDisplay *d, CompActionCallBackProc init)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionUpWheel].value.action.initiate = init;
-}
-
-void wallSetUpWheelTerminate(CompDisplay *d, CompActionCallBackProc term)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionUpWheel].value.action.terminate = term;
-}
-
-CompOption * wallGetUpWheelOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionUpWheel];
-}
-
-void wallSetUpWheelNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionUpWheel] = notify;
-}
-
-CompAction * wallGetDownWheel(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionDownWheel].value.action;
-}
-
-void wallSetDownWheelInitiate(CompDisplay *d, CompActionCallBackProc init)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionDownWheel].value.action.initiate = init;
-}
-
-void wallSetDownWheelTerminate(CompDisplay *d, CompActionCallBackProc term)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionDownWheel].value.action.terminate = term;
-}
-
-CompOption * wallGetDownWheelOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionDownWheel];
-}
-
-void wallSetDownWheelNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionDownWheel] = notify;
-}
-
-CompAction * wallGetFlipLeft(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionFlipLeft].value.action;
-}
-
-void wallSetFlipLeftInitiate(CompDisplay *d, CompActionCallBackProc init)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionFlipLeft].value.action.initiate = init;
-}
-
-void wallSetFlipLeftTerminate(CompDisplay *d, CompActionCallBackProc term)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionFlipLeft].value.action.terminate = term;
-}
-
-CompOption * wallGetFlipLeftOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionFlipLeft];
-}
-
-void wallSetFlipLeftNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionFlipLeft] = notify;
-}
-
-CompAction * wallGetFlipRight(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionFlipRight].value.action;
-}
-
-void wallSetFlipRightInitiate(CompDisplay *d, CompActionCallBackProc init)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionFlipRight].value.action.initiate = init;
-}
-
-void wallSetFlipRightTerminate(CompDisplay *d, CompActionCallBackProc term)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionFlipRight].value.action.terminate = term;
-}
-
-CompOption * wallGetFlipRightOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionFlipRight];
-}
-
-void wallSetFlipRightNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionFlipRight] = notify;
-}
-
-CompAction * wallGetFlipUp(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionFlipUp].value.action;
-}
-
-void wallSetFlipUpInitiate(CompDisplay *d, CompActionCallBackProc init)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionFlipUp].value.action.initiate = init;
-}
-
-void wallSetFlipUpTerminate(CompDisplay *d, CompActionCallBackProc term)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionFlipUp].value.action.terminate = term;
-}
-
-CompOption * wallGetFlipUpOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionFlipUp];
-}
-
-void wallSetFlipUpNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionFlipUp] = notify;
-}
-
-CompAction * wallGetFlipDown(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionFlipDown].value.action;
-}
-
-void wallSetFlipDownInitiate(CompDisplay *d, CompActionCallBackProc init)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionFlipDown].value.action.initiate = init;
-}
-
-void wallSetFlipDownTerminate(CompDisplay *d, CompActionCallBackProc term)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->opt[WallDisplayOptionFlipDown].value.action.terminate = term;
-}
-
-CompOption * wallGetFlipDownOption(CompDisplay *d)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[WallDisplayOptionFlipDown];
-}
-
-void wallSetFlipDownNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	od->notify[WallDisplayOptionFlipDown] = notify;
-}
-
-CompOption * wallGetDisplayOption(CompDisplay *d, WallDisplayOptions num)
-{
-	WALL_OPTIONS_DISPLAY(d);
-	return &od->opt[num];
-}
-
-Bool wallGetEdgeflipPointer(CompScreen *s)
-{
-	WALL_OPTIONS_SCREEN(s);
-	return os->opt[WallScreenOptionEdgeflipPointer].value.b;
-}
-
-CompOption * wallGetEdgeflipPointerOption(CompScreen *s)
-{
-	WALL_OPTIONS_SCREEN(s);
-	return &os->opt[WallScreenOptionEdgeflipPointer];
-}
-
-void wallSetEdgeflipPointerNotify(CompScreen *s, wallScreenOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_SCREEN(s);
-	os->notify[WallScreenOptionEdgeflipPointer] = notify;
-}
-
-Bool wallGetEdgeflipMove(CompScreen *s)
-{
-	WALL_OPTIONS_SCREEN(s);
-	return os->opt[WallScreenOptionEdgeflipMove].value.b;
-}
-
-CompOption * wallGetEdgeflipMoveOption(CompScreen *s)
-{
-	WALL_OPTIONS_SCREEN(s);
-	return &os->opt[WallScreenOptionEdgeflipMove];
-}
-
-void wallSetEdgeflipMoveNotify(CompScreen *s, wallScreenOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_SCREEN(s);
-	os->notify[WallScreenOptionEdgeflipMove] = notify;
-}
-
-Bool wallGetEdgeflipDnd(CompScreen *s)
-{
-	WALL_OPTIONS_SCREEN(s);
-	return os->opt[WallScreenOptionEdgeflipDnd].value.b;
-}
-
-CompOption * wallGetEdgeflipDndOption(CompScreen *s)
-{
-	WALL_OPTIONS_SCREEN(s);
-	return &os->opt[WallScreenOptionEdgeflipDnd];
-}
-
-void wallSetEdgeflipDndNotify(CompScreen *s, wallScreenOptionChangeNotifyProc notify)
-{
-	WALL_OPTIONS_SCREEN(s);
-	os->notify[WallScreenOptionEdgeflipDnd] = notify;
-}
-
-CompOption * wallGetScreenOption(CompScreen *d, WallScreenOptions num)
-{
-	WALL_OPTIONS_SCREEN(d);
-	return &os->opt[num];
-}
-
-static void wallOptionsScreenInitOptions(WallOptionsScreen * os)
-{
-	CompOption *o;
-	int i;
-	i = 0;
-
-	o = &os->opt[WallScreenOptionEdgeflipPointer];
-	o->name = "edgeflip_pointer";
-	o->shortDesc = N_("Edge Flip Pointer");
-	o->longDesc = N_("Flip viewport when moving the pointer to a screen edge");
-	o->type = CompOptionTypeBool;
-	o->value.b = WALL_EDGEFLIP_POINTER_DEFAULT;
-
-	o = &os->opt[WallScreenOptionEdgeflipMove];
-	o->name = "edgeflip_move";
-	o->shortDesc = N_("Edge Flip Move");
-	o->longDesc = N_("Flip viewport when moving a window to a screen edge");
-	o->type = CompOptionTypeBool;
-	o->value.b = WALL_EDGEFLIP_MOVE_DEFAULT;
-
-	o = &os->opt[WallScreenOptionEdgeflipDnd];
-	o->name = "edgeflip_dnd";
-	o->shortDesc = N_("Edge Flip DnD");
-	o->longDesc = N_("Flip viewport when dragging an object to a screen edge");
-	o->type = CompOptionTypeBool;
-	o->value.b = WALL_EDGEFLIP_DND_DEFAULT;
-
-}
-
-static void wallOptionsDisplayInitOptions(WallOptionsDisplay * od, Display *display)
-{
-	CompOption *o;
-	int i;
-	i = 0;
-
-	o = &od->opt[WallDisplayOptionExpo];
-	o->name = "expo";
-	o->shortDesc = N_("Expo");
-	o->longDesc = N_("Engage wall expo mode");
-	o->type = CompOptionTypeAction;
-	o->value.action.initiate = NULL;
-	o->value.action.terminate = NULL;
-	o->value.action.bell = FALSE;
-	o->value.action.edgeMask = (1 << SCREEN_EDGE_TOPLEFT);
-	o->value.action.state = CompActionStateInitKey;
-	o->value.action.state |= CompActionStateInitEdge;
-	o->value.action.type = CompBindingTypeKey;
-	o->value.action.key.modifiers = WALL_EXPO_KEY_MODIFIERS_DEFAULT;
-	o->value.action.key.keycode = 
-		XKeysymToKeycode (display,
-
-
-XStringToKeysym(WALL_EXPO_KEY_DEFAULT));
-
-	o = &od->opt[WallDisplayOptionRotate];
-	o->name = "rotate";
-	o->shortDesc = N_("Rotate Wall");
-	o->longDesc = N_("Rotate wall in expo mode");
-	o->type = CompOptionTypeBool;
-	o->value.b = WALL_ROTATE_DEFAULT;
-
-	o = &od->opt[WallDisplayOptionSlideDuration];
-	o->name = "slide_duration";
-	o->shortDesc = N_("Wall Sliding Duration");
-	o->longDesc = N_("Duration (in s) for wall sliding viewport switching animation");
-	o->type = CompOptionTypeFloat;
-	o->value.f = WALL_SLIDE_DURATION_DEFAULT;
-	o->rest.f.min = WALL_SLIDE_DURATION_MIN;
-	o->rest.f.max = WALL_SLIDE_DURATION_MAX;
-	o->rest.f.precision = WALL_SLIDE_DURATION_PRECISION;
-
-	o = &od->opt[WallDisplayOptionExpoAnimation];
-	o->name = "expo_animation";
-	o->shortDesc = N_("Expo Animation");
-	o->longDesc = N_("Animation used when switching to expo mode");
-	o->type = CompOptionTypeString;
-	o->value.s = strdup(wallExpoAnimation[WALL_EXPO_ANIMATION_DEFAULT]);
-	o->rest.s.string = (char **)wallExpoAnimation;
-	o->rest.s.nString = ExpoAnimationNum;
-
-	o = &od->opt[WallDisplayOptionSticky];
-	o->name = "sticky";
-	o->shortDesc = N_("Sticky");
-	o->longDesc = N_("Engage wall sticky mode");
-	o->type = CompOptionTypeAction;
-	o->value.action.initiate = NULL;
-	o->value.action.terminate = NULL;
-	o->value.action.bell = FALSE;
-	o->value.action.edgeMask = 0;
-	o->value.action.state = CompActionStateInitKey;
-	o->value.action.type = CompBindingTypeKey;
-	o->value.action.key.modifiers = WALL_STICKY_KEY_MODIFIERS_DEFAULT;
-	o->value.action.key.keycode = 
-		XKeysymToKeycode (display,
-
-
-XStringToKeysym(WALL_STICKY_KEY_DEFAULT));
-
-	o = &od->opt[WallDisplayOptionMipmaps];
-	o->name = "mipmaps";
-	o->shortDesc = N_("Mipmaps");
-	o->longDesc = N_("Generate mipmaps in expo mode");
-	o->type = CompOptionTypeBool;
-	o->value.b = WALL_MIPMAPS_DEFAULT;
-
-	o = &od->opt[WallDisplayOptionAspectRatio];
-	o->name = "aspect_ratio";
-	o->shortDesc = N_("Expo Mode Aspect Ratio");
-	o->longDesc = N_("Expo mode wall aspect ratio");
-	o->type = CompOptionTypeFloat;
-	o->value.f = WALL_ASPECT_RATIO_DEFAULT;
-	o->rest.f.min = WALL_ASPECT_RATIO_MIN;
-	o->rest.f.max = WALL_ASPECT_RATIO_MAX;
-	o->rest.f.precision = WALL_ASPECT_RATIO_PRECISION;
-
-	o = &od->opt[WallDisplayOptionExpoImmediateMove];
-	o->name = "expo_immediate_move";
-	o->shortDesc = N_("Immediate moves in expo mode");
-	o->longDesc = N_("Selects if windows movements in expo mode should be immediate - this among other things disables wobbliness");
-	o->type = CompOptionTypeBool;
-	o->value.b = WALL_EXPO_IMMEDIATE_MOVE_DEFAULT;
-
-	o = &od->opt[WallDisplayOptionShowSwitcher];
-	o->name = "show_switcher";
-	o->shortDesc = N_("Show Viewport Switcher Preview");
-	o->longDesc = N_("Show switcher window while switching viewports");
-	o->type = CompOptionTypeBool;
-	o->value.b = WALL_SHOW_SWITCHER_DEFAULT;
-
-	o = &od->opt[WallDisplayOptionMiniscreen];
-	o->name = "miniscreen";
-	o->shortDesc = N_("Show Live Viewport Previews");
-	o->longDesc = N_("Show live viewport previews in switcher window");
-	o->type = CompOptionTypeBool;
-	o->value.b = WALL_MINISCREEN_DEFAULT;
-
-	o = &od->opt[WallDisplayOptionPreviewTimeout];
-	o->name = "preview_timeout";
-	o->shortDesc = N_("Switch Target Preview Visibility Time");
-	o->longDesc = N_("Duration (in s) the switch target preview should remain visible after switching ends.");
-	o->type = CompOptionTypeFloat;
-	o->value.f = WALL_PREVIEW_TIMEOUT_DEFAULT;
-	o->rest.f.min = WALL_PREVIEW_TIMEOUT_MIN;
-	o->rest.f.max = WALL_PREVIEW_TIMEOUT_MAX;
-	o->rest.f.precision = WALL_PREVIEW_TIMEOUT_PRECISION;
-
-	o = &od->opt[WallDisplayOptionAllowWraparound];
-	o->name = "allow_wraparound";
-	o->shortDesc = N_("Allow Wrap-Around");
-	o->longDesc = N_("Allow wrap-around when moving the wall up/down/left/right");
-	o->type = CompOptionTypeBool;
-	o->value.b = WALL_ALLOW_WRAPAROUND_DEFAULT;
-
-	o = &od->opt[WallDisplayOptionLeft];
-	o->name = "left";
-	o->shortDesc = N_("Move Left");
-	o->longDesc = N_("Move along the wall to the left");
-	o->type = CompOptionTypeAction;
-	o->value.action.initiate = NULL;
-	o->value.action.terminate = NULL;
-	o->value.action.bell = FALSE;
-	o->value.action.edgeMask = 0;
-	o->value.action.state = CompActionStateInitKey;
-	o->value.action.type = CompBindingTypeKey;
-	o->value.action.key.modifiers = WALL_LEFT_KEY_MODIFIERS_DEFAULT;
-	o->value.action.key.keycode = 
-		XKeysymToKeycode (display,
-
-
-XStringToKeysym(WALL_LEFT_KEY_DEFAULT));
-
-	o = &od->opt[WallDisplayOptionRight];
-	o->name = "right";
-	o->shortDesc = N_("Move Right");
-	o->longDesc = N_("Move along the wall to the right");
-	o->type = CompOptionTypeAction;
-	o->value.action.initiate = NULL;
-	o->value.action.terminate = NULL;
-	o->value.action.bell = FALSE;
-	o->value.action.edgeMask = 0;
-	o->value.action.state = CompActionStateInitKey;
-	o->value.action.type = CompBindingTypeKey;
-	o->value.action.key.modifiers = WALL_RIGHT_KEY_MODIFIERS_DEFAULT;
-	o->value.action.key.keycode = 
-		XKeysymToKeycode (display,
-
-
-XStringToKeysym(WALL_RIGHT_KEY_DEFAULT));
-
-	o = &od->opt[WallDisplayOptionUp];
-	o->name = "up";
-	o->shortDesc = N_("Move Up");
-	o->longDesc = N_("Move along the wall up");
-	o->type = CompOptionTypeAction;
-	o->value.action.initiate = NULL;
-	o->value.action.terminate = NULL;
-	o->value.action.bell = FALSE;
-	o->value.action.edgeMask = 0;
-	o->value.action.state = CompActionStateInitKey;
-	o->value.action.type = CompBindingTypeKey;
-	o->value.action.key.modifiers = WALL_UP_KEY_MODIFIERS_DEFAULT;
-	o->value.action.key.keycode = 
-		XKeysymToKeycode (display,
-
-
-XStringToKeysym(WALL_UP_KEY_DEFAULT));
-
-	o = &od->opt[WallDisplayOptionDown];
-	o->name = "down";
-	o->shortDesc = N_("Move Down");
-	o->longDesc = N_("Move along the wall down");
-	o->type = CompOptionTypeAction;
-	o->value.action.initiate = NULL;
-	o->value.action.terminate = NULL;
-	o->value.action.bell = FALSE;
-	o->value.action.edgeMask = 0;
-	o->value.action.state = CompActionStateInitKey;
-	o->value.action.type = CompBindingTypeKey;
-	o->value.action.key.modifiers = WALL_DOWN_KEY_MODIFIERS_DEFAULT;
-	o->value.action.key.keycode = 
-		XKeysymToKeycode (display,
-
-
-XStringToKeysym(WALL_DOWN_KEY_DEFAULT));
-
-	o = &od->opt[WallDisplayOptionNext];
-	o->name = "next";
-	o->shortDesc = N_("Move Next");
-	o->longDesc = N_("Move along the wall to the next viewport");
-	o->type = CompOptionTypeAction;
-	o->value.action.initiate = NULL;
-	o->value.action.terminate = NULL;
-	o->value.action.bell = FALSE;
-	o->value.action.edgeMask = 0;
-	o->value.action.state = CompActionStateInitKey;
-	o->value.action.type = CompBindingTypeKey;
-	o->value.action.key.modifiers = WALL_NEXT_KEY_MODIFIERS_DEFAULT;
-	o->value.action.key.keycode = 
-		XKeysymToKeycode (display,
-
-
-XStringToKeysym(WALL_NEXT_KEY_DEFAULT));
-
-	o = &od->opt[WallDisplayOptionPrev];
-	o->name = "prev";
-	o->shortDesc = N_("Move Prev");
-	o->longDesc = N_("Move along the wall to the previous viewport");
-	o->type = CompOptionTypeAction;
-	o->value.action.initiate = NULL;
-	o->value.action.terminate = NULL;
-	o->value.action.bell = FALSE;
-	o->value.action.edgeMask = 0;
-	o->value.action.state = CompActionStateInitKey;
-	o->value.action.type = CompBindingTypeKey;
-	o->value.action.key.modifiers = WALL_PREV_KEY_MODIFIERS_DEFAULT;
-	o->value.action.key.keycode = 0;
-
-	o = &od->opt[WallDisplayOptionLeftWindow];
-	o->name = "left_window";
-	o->shortDesc = N_("Move Left With Window");
-	o->longDesc = N_("Move with window along the wall to the left");
-	o->type = CompOptionTypeAction;
-	o->value.action.initiate = NULL;
-	o->value.action.terminate = NULL;
-	o->value.action.bell = FALSE;
-	o->value.action.edgeMask = 0;
-	o->value.action.state = CompActionStateInitKey;
-	o->value.action.type = CompBindingTypeKey;
-	o->value.action.key.modifiers = WALL_LEFT_WINDOW_KEY_MODIFIERS_DEFAULT;
-	o->value.action.key.keycode = 
-		XKeysymToKeycode (display,
-
-
-XStringToKeysym(WALL_LEFT_WINDOW_KEY_DEFAULT));
-
-	o = &od->opt[WallDisplayOptionRightWindow];
-	o->name = "right_window";
-	o->shortDesc = N_("Move Right With Window");
-	o->longDesc = N_("Move with window along the wall to the right");
-	o->type = CompOptionTypeAction;
-	o->value.action.initiate = NULL;
-	o->value.action.terminate = NULL;
-	o->value.action.bell = FALSE;
-	o->value.action.edgeMask = 0;
-	o->value.action.state = CompActionStateInitKey;
-	o->value.action.type = CompBindingTypeKey;
-	o->value.action.key.modifiers = WALL_RIGHT_WINDOW_KEY_MODIFIERS_DEFAULT;
-	o->value.action.key.keycode = 
-		XKeysymToKeycode (display,
-
-
-XStringToKeysym(WALL_RIGHT_WINDOW_KEY_DEFAULT));
-
-	o = &od->opt[WallDisplayOptionUpWindow];
-	o->name = "up_window";
-	o->shortDesc = N_("Move Up With Window");
-	o->longDesc = N_("Move with window along the wall up");
-	o->type = CompOptionTypeAction;
-	o->value.action.initiate = NULL;
-	o->value.action.terminate = NULL;
-	o->value.action.bell = FALSE;
-	o->value.action.edgeMask = 0;
-	o->value.action.state = CompActionStateInitKey;
-	o->value.action.type = CompBindingTypeKey;
-	o->value.action.key.modifiers = WALL_UP_WINDOW_KEY_MODIFIERS_DEFAULT;
-	o->value.action.key.keycode = 
-		XKeysymToKeycode (display,
-
-
-XStringToKeysym(WALL_UP_WINDOW_KEY_DEFAULT));
-
-	o = &od->opt[WallDisplayOptionDownWindow];
-	o->name = "down_window";
-	o->shortDesc = N_("Move Down With Window");
-	o->longDesc = N_("Move with window along the wall down");
-	o->type = CompOptionTypeAction;
-	o->value.action.initiate = NULL;
-	o->value.action.terminate = NULL;
-	o->value.action.bell = FALSE;
-	o->value.action.edgeMask = 0;
-	o->value.action.state = CompActionStateInitKey;
-	o->value.action.type = CompBindingTypeKey;
-	o->value.action.key.modifiers = WALL_DOWN_WINDOW_KEY_MODIFIERS_DEFAULT;
-	o->value.action.key.keycode = 
-		XKeysymToKeycode (display,
-
-
-XStringToKeysym(WALL_DOWN_WINDOW_KEY_DEFAULT));
-
-	o = &od->opt[WallDisplayOptionUpWheel];
-	o->name = "up_wheel";
-	o->shortDesc = N_("Mousewheel Up");
-	o->longDesc = N_("Mousewheel up");
-	o->type = CompOptionTypeAction;
-	o->value.action.initiate = NULL;
-	o->value.action.terminate = NULL;
-	o->value.action.bell = FALSE;
-	o->value.action.edgeMask = 0;
-	o->value.action.state = 0;
-	o->value.action.type = CompBindingTypeNone;
-
-	o = &od->opt[WallDisplayOptionDownWheel];
-	o->name = "down_wheel";
-	o->shortDesc = N_("Mousewheel Down");
-	o->longDesc = N_("Mousewheel down");
-	o->type = CompOptionTypeAction;
-	o->value.action.initiate = NULL;
-	o->value.action.terminate = NULL;
-	o->value.action.bell = FALSE;
-	o->value.action.edgeMask = 0;
-	o->value.action.state = 0;
-	o->value.action.type = CompBindingTypeNone;
-
-	o = &od->opt[WallDisplayOptionFlipLeft];
-	o->name = "flip_left";
-	o->shortDesc = N_("Flip Left");
-	o->longDesc = N_("Flip left");
-	o->type = CompOptionTypeAction;
-	o->value.action.initiate = NULL;
-	o->value.action.terminate = NULL;
-	o->value.action.bell = FALSE;
-	o->value.action.edgeMask = (1 << SCREEN_EDGE_LEFT);
-	o->value.action.state = CompActionStateInitEdge;
-	o->value.action.type = CompBindingTypeNone;
-
-	o = &od->opt[WallDisplayOptionFlipRight];
-	o->name = "flip_right";
-	o->shortDesc = N_("Flip Right");
-	o->longDesc = N_("Flip right");
-	o->type = CompOptionTypeAction;
-	o->value.action.initiate = NULL;
-	o->value.action.terminate = NULL;
-	o->value.action.bell = FALSE;
-	o->value.action.edgeMask = (1 << SCREEN_EDGE_RIGHT);
-	o->value.action.state = CompActionStateInitEdge;
-	o->value.action.type = CompBindingTypeNone;
-
-	o = &od->opt[WallDisplayOptionFlipUp];
-	o->name = "flip_up";
-	o->shortDesc = N_("Flip Up");
-	o->longDesc = N_("Flip up");
-	o->type = CompOptionTypeAction;
-	o->value.action.initiate = NULL;
-	o->value.action.terminate = NULL;
-	o->value.action.bell = FALSE;
-	o->value.action.edgeMask = (1 << SCREEN_EDGE_TOP);
-	o->value.action.state = CompActionStateInitEdge;
-	o->value.action.type = CompBindingTypeNone;
-
-	o = &od->opt[WallDisplayOptionFlipDown];
-	o->name = "flip_down";
-	o->shortDesc = N_("Flip Down");
-	o->longDesc = N_("Flip down");
-	o->type = CompOptionTypeAction;
-	o->value.action.initiate = NULL;
-	o->value.action.terminate = NULL;
-	o->value.action.bell = FALSE;
-	o->value.action.edgeMask = (1 << SCREEN_EDGE_BOTTOM);
-	o->value.action.state = CompActionStateInitEdge;
-	o->value.action.type = CompBindingTypeNone;
-
-}
-
-static Bool
-wallOptionsSetScreenOption(CompPlugin * plugin, CompScreen * screen, char *name, CompOptionValue * value)
-{
-	CompOption *o;
-	int index;
-
-	WALL_OPTIONS_SCREEN(screen);
-
-	o = compFindOption(os->opt, WallScreenOptionNum, name, &index);
-
-	if (!o)
-	{
-		if (wallPluginVTable && wallPluginVTable->setScreenOption)
-			return (*wallPluginVTable->setScreenOption)(plugin, screen, name, value);
-		return FALSE;
-	}
-
-	switch (index)
-	{
-	case WallScreenOptionEdgeflipPointer:
-		if (compSetBoolOption(o, value))
-		{
-			if (os->notify[WallScreenOptionEdgeflipPointer])
-				(*os->notify[WallScreenOptionEdgeflipPointer])(screen, o, WallScreenOptionEdgeflipPointer);
-			return TRUE;
-		}
-		break;
-	case WallScreenOptionEdgeflipMove:
-		if (compSetBoolOption(o, value))
-		{
-			if (os->notify[WallScreenOptionEdgeflipMove])
-				(*os->notify[WallScreenOptionEdgeflipMove])(screen, o, WallScreenOptionEdgeflipMove);
-			return TRUE;
-		}
-		break;
-	case WallScreenOptionEdgeflipDnd:
-		if (compSetBoolOption(o, value))
-		{
-			if (os->notify[WallScreenOptionEdgeflipDnd])
-				(*os->notify[WallScreenOptionEdgeflipDnd])(screen, o, WallScreenOptionEdgeflipDnd);
-			return TRUE;
-		}
-		break;
-	default:
-		break;
-	}
-	return FALSE;
-}
-
-static CompOption *wallOptionsGetScreenOptions(CompPlugin * p, CompScreen * s, int *count)
-{
-	CompOption *pOpt = NULL;
-	int pOptNum = 0;
-	if (wallPluginVTable && wallPluginVTable->getScreenOptions)
-		pOpt = wallPluginVTable->getScreenOptions(p,s,&pOptNum);
-
-	WallOptionsScreen *os;
-	if (s)
-		os = GET_WALL_OPTIONS_SCREEN(s, GET_WALL_OPTIONS_DISPLAY(s->display));
-	else
-	{
-		os = calloc(1,sizeof(WallOptionsScreen));
-		wallOptionsScreenInitOptions(os);
-	}
-
-	if (!pOptNum)
-	{
-		*count = WallScreenOptionNum;
-		return os->opt;
-	}
-
-	int sOptSize = sizeof(CompOption) * WallScreenOptionNum;
-	int pOptSize = sizeof(CompOption) * pOptNum;
-
-	if (!os->mOpt)
-		os->mOpt = malloc(sOptSize + pOptSize);
-
-	memcpy(os->mOpt,os->opt,sOptSize);
-	memcpy(os->mOpt + WallScreenOptionNum,pOpt,pOptSize);
-
-	*count = WallScreenOptionNum + pOptNum;
-	return os->mOpt;
-}
-
-static Bool
-wallOptionsSetDisplayOption(CompPlugin * plugin, CompDisplay * display, char *name, CompOptionValue * value)
-{
-	CompOption *o;
-	int index;
-
-	WALL_OPTIONS_DISPLAY(display);
-
-	o = compFindOption(od->opt, WallDisplayOptionNum, name, &index);
-
-	if (!o)
-	{
-		if (wallPluginVTable && wallPluginVTable->setDisplayOption)
-			return (*wallPluginVTable->setDisplayOption)(plugin, display, name, value);
-		return FALSE;
-	}
-
-	switch (index)
-	{
-	case WallDisplayOptionExpo:
-		if (setDisplayAction(display, o, value))
-		{
-			if (od->notify[WallDisplayOptionExpo])
-				(*od->notify[WallDisplayOptionExpo])(display, o, WallDisplayOptionExpo);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionRotate:
-		if (compSetBoolOption(o, value))
-		{
-			if (od->notify[WallDisplayOptionRotate])
-				(*od->notify[WallDisplayOptionRotate])(display, o, WallDisplayOptionRotate);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionSlideDuration:
-		if (compSetFloatOption(o, value))
-		{
-			if (od->notify[WallDisplayOptionSlideDuration])
-				(*od->notify[WallDisplayOptionSlideDuration])(display, o, WallDisplayOptionSlideDuration);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionExpoAnimation:
-		if (compSetStringOption(o, value))
-		{
-			int i;
-			for (i = 0; i < ExpoAnimationNum;i++)
-				if (!strcmp(o->value.s, o->rest.s.string[i]))
-					od->expo_animation = i;
-			if (od->notify[WallDisplayOptionExpoAnimation])
-				(*od->notify[WallDisplayOptionExpoAnimation])(display, o, WallDisplayOptionExpoAnimation);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionSticky:
-		if (setDisplayAction(display, o, value))
-		{
-			if (od->notify[WallDisplayOptionSticky])
-				(*od->notify[WallDisplayOptionSticky])(display, o, WallDisplayOptionSticky);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionMipmaps:
-		if (compSetBoolOption(o, value))
-		{
-			if (od->notify[WallDisplayOptionMipmaps])
-				(*od->notify[WallDisplayOptionMipmaps])(display, o, WallDisplayOptionMipmaps);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionAspectRatio:
-		if (compSetFloatOption(o, value))
-		{
-			if (od->notify[WallDisplayOptionAspectRatio])
-				(*od->notify[WallDisplayOptionAspectRatio])(display, o, WallDisplayOptionAspectRatio);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionExpoImmediateMove:
-		if (compSetBoolOption(o, value))
-		{
-			if (od->notify[WallDisplayOptionExpoImmediateMove])
-				(*od->notify[WallDisplayOptionExpoImmediateMove])(display, o, WallDisplayOptionExpoImmediateMove);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionShowSwitcher:
-		if (compSetBoolOption(o, value))
-		{
-			if (od->notify[WallDisplayOptionShowSwitcher])
-				(*od->notify[WallDisplayOptionShowSwitcher])(display, o, WallDisplayOptionShowSwitcher);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionMiniscreen:
-		if (compSetBoolOption(o, value))
-		{
-			if (od->notify[WallDisplayOptionMiniscreen])
-				(*od->notify[WallDisplayOptionMiniscreen])(display, o, WallDisplayOptionMiniscreen);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionPreviewTimeout:
-		if (compSetFloatOption(o, value))
-		{
-			if (od->notify[WallDisplayOptionPreviewTimeout])
-				(*od->notify[WallDisplayOptionPreviewTimeout])(display, o, WallDisplayOptionPreviewTimeout);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionAllowWraparound:
-		if (compSetBoolOption(o, value))
-		{
-			if (od->notify[WallDisplayOptionAllowWraparound])
-				(*od->notify[WallDisplayOptionAllowWraparound])(display, o, WallDisplayOptionAllowWraparound);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionLeft:
-		if (setDisplayAction(display, o, value))
-		{
-			if (od->notify[WallDisplayOptionLeft])
-				(*od->notify[WallDisplayOptionLeft])(display, o, WallDisplayOptionLeft);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionRight:
-		if (setDisplayAction(display, o, value))
-		{
-			if (od->notify[WallDisplayOptionRight])
-				(*od->notify[WallDisplayOptionRight])(display, o, WallDisplayOptionRight);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionUp:
-		if (setDisplayAction(display, o, value))
-		{
-			if (od->notify[WallDisplayOptionUp])
-				(*od->notify[WallDisplayOptionUp])(display, o, WallDisplayOptionUp);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionDown:
-		if (setDisplayAction(display, o, value))
-		{
-			if (od->notify[WallDisplayOptionDown])
-				(*od->notify[WallDisplayOptionDown])(display, o, WallDisplayOptionDown);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionNext:
-		if (setDisplayAction(display, o, value))
-		{
-			if (od->notify[WallDisplayOptionNext])
-				(*od->notify[WallDisplayOptionNext])(display, o, WallDisplayOptionNext);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionPrev:
-		if (setDisplayAction(display, o, value))
-		{
-			if (od->notify[WallDisplayOptionPrev])
-				(*od->notify[WallDisplayOptionPrev])(display, o, WallDisplayOptionPrev);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionLeftWindow:
-		if (setDisplayAction(display, o, value))
-		{
-			if (od->notify[WallDisplayOptionLeftWindow])
-				(*od->notify[WallDisplayOptionLeftWindow])(display, o, WallDisplayOptionLeftWindow);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionRightWindow:
-		if (setDisplayAction(display, o, value))
-		{
-			if (od->notify[WallDisplayOptionRightWindow])
-				(*od->notify[WallDisplayOptionRightWindow])(display, o, WallDisplayOptionRightWindow);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionUpWindow:
-		if (setDisplayAction(display, o, value))
-		{
-			if (od->notify[WallDisplayOptionUpWindow])
-				(*od->notify[WallDisplayOptionUpWindow])(display, o, WallDisplayOptionUpWindow);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionDownWindow:
-		if (setDisplayAction(display, o, value))
-		{
-			if (od->notify[WallDisplayOptionDownWindow])
-				(*od->notify[WallDisplayOptionDownWindow])(display, o, WallDisplayOptionDownWindow);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionUpWheel:
-		if (setDisplayAction(display, o, value))
-		{
-			if (od->notify[WallDisplayOptionUpWheel])
-				(*od->notify[WallDisplayOptionUpWheel])(display, o, WallDisplayOptionUpWheel);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionDownWheel:
-		if (setDisplayAction(display, o, value))
-		{
-			if (od->notify[WallDisplayOptionDownWheel])
-				(*od->notify[WallDisplayOptionDownWheel])(display, o, WallDisplayOptionDownWheel);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionFlipLeft:
-		if (setDisplayAction(display, o, value))
-		{
-			if (od->notify[WallDisplayOptionFlipLeft])
-				(*od->notify[WallDisplayOptionFlipLeft])(display, o, WallDisplayOptionFlipLeft);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionFlipRight:
-		if (setDisplayAction(display, o, value))
-		{
-			if (od->notify[WallDisplayOptionFlipRight])
-				(*od->notify[WallDisplayOptionFlipRight])(display, o, WallDisplayOptionFlipRight);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionFlipUp:
-		if (setDisplayAction(display, o, value))
-		{
-			if (od->notify[WallDisplayOptionFlipUp])
-				(*od->notify[WallDisplayOptionFlipUp])(display, o, WallDisplayOptionFlipUp);
-			return TRUE;
-		}
-		break;
-	case WallDisplayOptionFlipDown:
-		if (setDisplayAction(display, o, value))
-		{
-			if (od->notify[WallDisplayOptionFlipDown])
-				(*od->notify[WallDisplayOptionFlipDown])(display, o, WallDisplayOptionFlipDown);
-			return TRUE;
-		}
-		break;
-	default:
-		break;
-	}
-	return FALSE;
-}
-
-static CompOption *wallOptionsGetDisplayOptions(CompPlugin *p, CompDisplay * d, int *count)
-{
-	CompOption *pOpt = NULL;
-	int pOptNum = 0;
-	if (wallPluginVTable && wallPluginVTable->getDisplayOptions)
-		pOpt = wallPluginVTable->getDisplayOptions(p,d,&pOptNum);
-
-	WallOptionsDisplay *od;
-	od = GET_WALL_OPTIONS_DISPLAY(d);
-	if (!pOptNum)
-	{
-		*count = WallDisplayOptionNum;
-		return od->opt;
-	}
-
-	int sOptSize = sizeof(CompOption) * WallDisplayOptionNum;
-	int pOptSize = sizeof(CompOption) * pOptNum;
-
-	if (!od->mOpt)
-		od->mOpt = malloc(sOptSize + pOptSize);
-
-	memcpy(od->mOpt,od->opt,sOptSize);
-	memcpy(od->mOpt + WallDisplayOptionNum,pOpt,pOptSize);
-
-	*count = WallDisplayOptionNum + pOptNum;
-	return od->mOpt;
-}
-
-static Bool wallOptionsInitScreen(CompPlugin * p, CompScreen * s)
-{
-	WallOptionsScreen *os;
-
-	WALL_OPTIONS_DISPLAY(s->display);
-
-	os = calloc(1,sizeof(WallOptionsScreen));
-	if (!os)
-		return FALSE;
-
-	s->privates[od->screenPrivateIndex].ptr = os;
-
-	addScreenAction(s, &od->opt[WallDisplayOptionExpo].value.action);
-	addScreenAction(s, &od->opt[WallDisplayOptionSticky].value.action);
-	addScreenAction(s, &od->opt[WallDisplayOptionLeft].value.action);
-	addScreenAction(s, &od->opt[WallDisplayOptionRight].value.action);
-	addScreenAction(s, &od->opt[WallDisplayOptionUp].value.action);
-	addScreenAction(s, &od->opt[WallDisplayOptionDown].value.action);
-	addScreenAction(s, &od->opt[WallDisplayOptionNext].value.action);
-	addScreenAction(s, &od->opt[WallDisplayOptionPrev].value.action);
-	addScreenAction(s, &od->opt[WallDisplayOptionLeftWindow].value.action);
-	addScreenAction(s, &od->opt[WallDisplayOptionRightWindow].value.action);
-	addScreenAction(s, &od->opt[WallDisplayOptionUpWindow].value.action);
-	addScreenAction(s, &od->opt[WallDisplayOptionDownWindow].value.action);
-	addScreenAction(s, &od->opt[WallDisplayOptionUpWheel].value.action);
-	addScreenAction(s, &od->opt[WallDisplayOptionDownWheel].value.action);
-	addScreenAction(s, &od->opt[WallDisplayOptionFlipLeft].value.action);
-	addScreenAction(s, &od->opt[WallDisplayOptionFlipRight].value.action);
-	addScreenAction(s, &od->opt[WallDisplayOptionFlipUp].value.action);
-	addScreenAction(s, &od->opt[WallDisplayOptionFlipDown].value.action);
-	wallOptionsScreenInitOptions(os);
-
-
-	if (wallPluginVTable && wallPluginVTable->initScreen)
-		return wallPluginVTable->initScreen(p,s);
-	return TRUE;
-}
-
-static void wallOptionsFiniScreen(CompPlugin * p, CompScreen * s)
-{
-	if (wallPluginVTable && wallPluginVTable->finiScreen)
-		wallPluginVTable->finiScreen(p,s);
-
-	WALL_OPTIONS_SCREEN(s);
-	WALL_OPTIONS_DISPLAY(s->display);
-
-	removeScreenAction(s, &od->opt[WallDisplayOptionExpo].value.action);
-	removeScreenAction(s, &od->opt[WallDisplayOptionSticky].value.action);
-	removeScreenAction(s, &od->opt[WallDisplayOptionLeft].value.action);
-	removeScreenAction(s, &od->opt[WallDisplayOptionRight].value.action);
-	removeScreenAction(s, &od->opt[WallDisplayOptionUp].value.action);
-	removeScreenAction(s, &od->opt[WallDisplayOptionDown].value.action);
-	removeScreenAction(s, &od->opt[WallDisplayOptionNext].value.action);
-	removeScreenAction(s, &od->opt[WallDisplayOptionPrev].value.action);
-	removeScreenAction(s, &od->opt[WallDisplayOptionLeftWindow].value.action);
-	removeScreenAction(s, &od->opt[WallDisplayOptionRightWindow].value.action);
-	removeScreenAction(s, &od->opt[WallDisplayOptionUpWindow].value.action);
-	removeScreenAction(s, &od->opt[WallDisplayOptionDownWindow].value.action);
-	removeScreenAction(s, &od->opt[WallDisplayOptionUpWheel].value.action);
-	removeScreenAction(s, &od->opt[WallDisplayOptionDownWheel].value.action);
-	removeScreenAction(s, &od->opt[WallDisplayOptionFlipLeft].value.action);
-	removeScreenAction(s, &od->opt[WallDisplayOptionFlipRight].value.action);
-	removeScreenAction(s, &od->opt[WallDisplayOptionFlipUp].value.action);
-	removeScreenAction(s, &od->opt[WallDisplayOptionFlipDown].value.action);
-	free(os);
-	od = NULL;
-}
-
-static Bool wallOptionsInitDisplay(CompPlugin * p, CompDisplay * d)
-{
-	WallOptionsDisplay *od;
-
-	od = calloc(1,sizeof(WallOptionsDisplay));
-	if (!od)
-		return FALSE;
-
-	od->screenPrivateIndex = allocateScreenPrivateIndex(d);
-	if (od->screenPrivateIndex < 0)
-	{
-		free(od);
-		return FALSE;
-	}
-
-	d->privates[displayPrivateIndex].ptr = od;
-
-	wallOptionsDisplayInitOptions(od, d->display);
-
-	od->expo_animation = ExpoAnimationZoom;
-
-	if (wallPluginVTable && wallPluginVTable->initDisplay)
-		return wallPluginVTable->initDisplay(p,d);
-	return TRUE;
-}
-
-static void wallOptionsFiniDisplay(CompPlugin * p, CompDisplay * d)
-{
-	if (wallPluginVTable && wallPluginVTable->finiDisplay)
-		wallPluginVTable->finiDisplay(p,d);
-
-	WALL_OPTIONS_DISPLAY(d);
-
-	freeScreenPrivateIndex(d, od->screenPrivateIndex);
-
- 	free(od);
-}
-
-static Bool wallOptionsInit(CompPlugin * p)
-{
-	displayPrivateIndex = allocateDisplayPrivateIndex();
-	if (displayPrivateIndex < 0)
-		return FALSE;
-	if (wallPluginVTable && wallPluginVTable->init)
-		return wallPluginVTable->init(p);
-	return TRUE;
-}
-
-static void wallOptionsFini(CompPlugin * p)
-{
-	if (wallPluginVTable && wallPluginVTable->fini)
-		wallPluginVTable->fini(p);
-	if (displayPrivateIndex >= 0)
-		freeDisplayPrivateIndex(displayPrivateIndex);
-}
-
-CompPluginVTable *getCompPluginInfo(void)
-{
-	if (!wallPluginVTable)
-	{
-		wallPluginVTable = wallOptionsGetCompPluginInfo();
-		memcpy(&wallOptionsVTable,wallPluginVTable,sizeof(CompPluginVTable));
-		wallOptionsVTable.init = wallOptionsInit;
-		wallOptionsVTable.fini = wallOptionsFini;
-		wallOptionsVTable.initDisplay = wallOptionsInitDisplay;
-		wallOptionsVTable.finiDisplay = wallOptionsFiniDisplay;
-		wallOptionsVTable.initScreen = wallOptionsInitScreen;
-		wallOptionsVTable.finiScreen = wallOptionsFiniScreen;
-		wallOptionsVTable.getScreenOptions = wallOptionsGetScreenOptions;
-		wallOptionsVTable.setScreenOption = wallOptionsSetScreenOption;
-		wallOptionsVTable.getDisplayOptions = wallOptionsGetDisplayOptions;
-		wallOptionsVTable.setDisplayOption = wallOptionsSetDisplayOption;
-	}
-	return &wallOptionsVTable;
-}
diff -Nurp extra-plugins.orig/wall/wall_options.h extra-plugins/wall/wall_options.h
--- extra-plugins.orig/wall/wall_options.h	2007-04-03 13:47:32.000000000 +0000
+++ extra-plugins/wall/wall_options.h	1970-01-01 00:00:00.000000000 +0000
@@ -1,240 +0,0 @@
-/*
- *
- * This file is autogenerated from :
- * wall.options with the Beryl/Compiz optionss parser (bcop)
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- */
-
-#ifndef _WALL_OPTIONS_H
-#define _WALL_OPTIONS_H
-
-#ifndef _WALL_OPTIONS_INTERNAL
-#define getCompPluginInfo wallOptionsGetCompPluginInfo
-#endif
-
-CompPluginVTable *wallOptionsGetCompPluginInfo(void);
-
-typedef enum
-{
-	WallDisplayOptionExpo = 0,
-	WallDisplayOptionRotate,
-	WallDisplayOptionSlideDuration,
-	WallDisplayOptionExpoAnimation,
-	WallDisplayOptionSticky,
-	WallDisplayOptionMipmaps,
-	WallDisplayOptionAspectRatio,
-	WallDisplayOptionExpoImmediateMove,
-	WallDisplayOptionShowSwitcher,
-	WallDisplayOptionMiniscreen,
-	WallDisplayOptionPreviewTimeout,
-	WallDisplayOptionAllowWraparound,
-	WallDisplayOptionLeft,
-	WallDisplayOptionRight,
-	WallDisplayOptionUp,
-	WallDisplayOptionDown,
-	WallDisplayOptionNext,
-	WallDisplayOptionPrev,
-	WallDisplayOptionLeftWindow,
-	WallDisplayOptionRightWindow,
-	WallDisplayOptionUpWindow,
-	WallDisplayOptionDownWindow,
-	WallDisplayOptionUpWheel,
-	WallDisplayOptionDownWheel,
-	WallDisplayOptionFlipLeft,
-	WallDisplayOptionFlipRight,
-	WallDisplayOptionFlipUp,
-	WallDisplayOptionFlipDown,
-	WallDisplayOptionNum
-} WallDisplayOptions;
-
-typedef void (*wallDisplayOptionChangeNotifyProc)(CompDisplay *display, CompOption *opt, WallDisplayOptions num);
-
-typedef enum {
-	ExpoAnimationZoom,
-	ExpoAnimationFadezoom,
-	ExpoAnimationVortex,
-	ExpoAnimationNum
-} WallExpoAnimationEnum;
-
-CompOption * wallGetDisplayOption(CompDisplay *d, WallDisplayOptions num);
-
-typedef enum
-{
-	WallScreenOptionEdgeflipPointer = 0,
-	WallScreenOptionEdgeflipMove,
-	WallScreenOptionEdgeflipDnd,
-	WallScreenOptionNum
-} WallScreenOptions;
-
-typedef void (*wallScreenOptionChangeNotifyProc)(CompScreen *screen, CompOption *opt, WallScreenOptions num);
-
-CompOption * wallGetScreenOption(CompScreen *d, WallScreenOptions num);
-
-CompAction *     wallGetExpo(CompDisplay *d);
-void             wallSetExpoInitiate(CompDisplay *d, CompActionCallBackProc init);
-void             wallSetExpoTerminate(CompDisplay *d, CompActionCallBackProc term);
-CompOption *     wallGetExpoOption(CompDisplay *d);
-void             wallSetExpoNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-Bool             wallGetRotate(CompDisplay *d);
-CompOption *     wallGetRotateOption(CompDisplay *d);
-void             wallSetRotateNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-float            wallGetSlideDuration(CompDisplay *d);
-CompOption *     wallGetSlideDurationOption(CompDisplay *d);
-void             wallSetSlideDurationNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-char *           wallGetExpoAnimationAsString(CompDisplay *d);
-WallExpoAnimationEnum wallGetExpoAnimation(CompDisplay *d);
-CompOption *     wallGetExpoAnimationOption(CompDisplay *d);
-void             wallSetExpoAnimationNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-CompAction *     wallGetSticky(CompDisplay *d);
-void             wallSetStickyInitiate(CompDisplay *d, CompActionCallBackProc init);
-void             wallSetStickyTerminate(CompDisplay *d, CompActionCallBackProc term);
-CompOption *     wallGetStickyOption(CompDisplay *d);
-void             wallSetStickyNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-Bool             wallGetMipmaps(CompDisplay *d);
-CompOption *     wallGetMipmapsOption(CompDisplay *d);
-void             wallSetMipmapsNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-float            wallGetAspectRatio(CompDisplay *d);
-CompOption *     wallGetAspectRatioOption(CompDisplay *d);
-void             wallSetAspectRatioNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-Bool             wallGetExpoImmediateMove(CompDisplay *d);
-CompOption *     wallGetExpoImmediateMoveOption(CompDisplay *d);
-void             wallSetExpoImmediateMoveNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-Bool             wallGetShowSwitcher(CompDisplay *d);
-CompOption *     wallGetShowSwitcherOption(CompDisplay *d);
-void             wallSetShowSwitcherNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-Bool             wallGetMiniscreen(CompDisplay *d);
-CompOption *     wallGetMiniscreenOption(CompDisplay *d);
-void             wallSetMiniscreenNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-float            wallGetPreviewTimeout(CompDisplay *d);
-CompOption *     wallGetPreviewTimeoutOption(CompDisplay *d);
-void             wallSetPreviewTimeoutNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-Bool             wallGetAllowWraparound(CompDisplay *d);
-CompOption *     wallGetAllowWraparoundOption(CompDisplay *d);
-void             wallSetAllowWraparoundNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-CompAction *     wallGetLeft(CompDisplay *d);
-void             wallSetLeftInitiate(CompDisplay *d, CompActionCallBackProc init);
-void             wallSetLeftTerminate(CompDisplay *d, CompActionCallBackProc term);
-CompOption *     wallGetLeftOption(CompDisplay *d);
-void             wallSetLeftNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-CompAction *     wallGetRight(CompDisplay *d);
-void             wallSetRightInitiate(CompDisplay *d, CompActionCallBackProc init);
-void             wallSetRightTerminate(CompDisplay *d, CompActionCallBackProc term);
-CompOption *     wallGetRightOption(CompDisplay *d);
-void             wallSetRightNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-CompAction *     wallGetUp(CompDisplay *d);
-void             wallSetUpInitiate(CompDisplay *d, CompActionCallBackProc init);
-void             wallSetUpTerminate(CompDisplay *d, CompActionCallBackProc term);
-CompOption *     wallGetUpOption(CompDisplay *d);
-void             wallSetUpNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-CompAction *     wallGetDown(CompDisplay *d);
-void             wallSetDownInitiate(CompDisplay *d, CompActionCallBackProc init);
-void             wallSetDownTerminate(CompDisplay *d, CompActionCallBackProc term);
-CompOption *     wallGetDownOption(CompDisplay *d);
-void             wallSetDownNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-CompAction *     wallGetNext(CompDisplay *d);
-void             wallSetNextInitiate(CompDisplay *d, CompActionCallBackProc init);
-void             wallSetNextTerminate(CompDisplay *d, CompActionCallBackProc term);
-CompOption *     wallGetNextOption(CompDisplay *d);
-void             wallSetNextNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-CompAction *     wallGetPrev(CompDisplay *d);
-void             wallSetPrevInitiate(CompDisplay *d, CompActionCallBackProc init);
-void             wallSetPrevTerminate(CompDisplay *d, CompActionCallBackProc term);
-CompOption *     wallGetPrevOption(CompDisplay *d);
-void             wallSetPrevNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-CompAction *     wallGetLeftWindow(CompDisplay *d);
-void             wallSetLeftWindowInitiate(CompDisplay *d, CompActionCallBackProc init);
-void             wallSetLeftWindowTerminate(CompDisplay *d, CompActionCallBackProc term);
-CompOption *     wallGetLeftWindowOption(CompDisplay *d);
-void             wallSetLeftWindowNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-CompAction *     wallGetRightWindow(CompDisplay *d);
-void             wallSetRightWindowInitiate(CompDisplay *d, CompActionCallBackProc init);
-void             wallSetRightWindowTerminate(CompDisplay *d, CompActionCallBackProc term);
-CompOption *     wallGetRightWindowOption(CompDisplay *d);
-void             wallSetRightWindowNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-CompAction *     wallGetUpWindow(CompDisplay *d);
-void             wallSetUpWindowInitiate(CompDisplay *d, CompActionCallBackProc init);
-void             wallSetUpWindowTerminate(CompDisplay *d, CompActionCallBackProc term);
-CompOption *     wallGetUpWindowOption(CompDisplay *d);
-void             wallSetUpWindowNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-CompAction *     wallGetDownWindow(CompDisplay *d);
-void             wallSetDownWindowInitiate(CompDisplay *d, CompActionCallBackProc init);
-void             wallSetDownWindowTerminate(CompDisplay *d, CompActionCallBackProc term);
-CompOption *     wallGetDownWindowOption(CompDisplay *d);
-void             wallSetDownWindowNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-CompAction *     wallGetUpWheel(CompDisplay *d);
-void             wallSetUpWheelInitiate(CompDisplay *d, CompActionCallBackProc init);
-void             wallSetUpWheelTerminate(CompDisplay *d, CompActionCallBackProc term);
-CompOption *     wallGetUpWheelOption(CompDisplay *d);
-void             wallSetUpWheelNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-CompAction *     wallGetDownWheel(CompDisplay *d);
-void             wallSetDownWheelInitiate(CompDisplay *d, CompActionCallBackProc init);
-void             wallSetDownWheelTerminate(CompDisplay *d, CompActionCallBackProc term);
-CompOption *     wallGetDownWheelOption(CompDisplay *d);
-void             wallSetDownWheelNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-CompAction *     wallGetFlipLeft(CompDisplay *d);
-void             wallSetFlipLeftInitiate(CompDisplay *d, CompActionCallBackProc init);
-void             wallSetFlipLeftTerminate(CompDisplay *d, CompActionCallBackProc term);
-CompOption *     wallGetFlipLeftOption(CompDisplay *d);
-void             wallSetFlipLeftNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-CompAction *     wallGetFlipRight(CompDisplay *d);
-void             wallSetFlipRightInitiate(CompDisplay *d, CompActionCallBackProc init);
-void             wallSetFlipRightTerminate(CompDisplay *d, CompActionCallBackProc term);
-CompOption *     wallGetFlipRightOption(CompDisplay *d);
-void             wallSetFlipRightNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-CompAction *     wallGetFlipUp(CompDisplay *d);
-void             wallSetFlipUpInitiate(CompDisplay *d, CompActionCallBackProc init);
-void             wallSetFlipUpTerminate(CompDisplay *d, CompActionCallBackProc term);
-CompOption *     wallGetFlipUpOption(CompDisplay *d);
-void             wallSetFlipUpNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-CompAction *     wallGetFlipDown(CompDisplay *d);
-void             wallSetFlipDownInitiate(CompDisplay *d, CompActionCallBackProc init);
-void             wallSetFlipDownTerminate(CompDisplay *d, CompActionCallBackProc term);
-CompOption *     wallGetFlipDownOption(CompDisplay *d);
-void             wallSetFlipDownNotify(CompDisplay *d, wallDisplayOptionChangeNotifyProc notify);
-
-Bool             wallGetEdgeflipPointer(CompScreen *s);
-CompOption *     wallGetEdgeflipPointerOption(CompScreen *s);
-void             wallSetEdgeflipPointerNotify(CompScreen *s, wallScreenOptionChangeNotifyProc notify);
-
-Bool             wallGetEdgeflipMove(CompScreen *s);
-CompOption *     wallGetEdgeflipMoveOption(CompScreen *s);
-void             wallSetEdgeflipMoveNotify(CompScreen *s, wallScreenOptionChangeNotifyProc notify);
-
-Bool             wallGetEdgeflipDnd(CompScreen *s);
-CompOption *     wallGetEdgeflipDndOption(CompScreen *s);
-void             wallSetEdgeflipDndNotify(CompScreen *s, wallScreenOptionChangeNotifyProc notify);
-
-#endif
-
diff -Nurp extra-plugins.orig/wall/wall.schema extra-plugins/wall/wall.schema
--- extra-plugins.orig/wall/wall.schema	2007-04-13 11:25:32.000000000 +0000
+++ extra-plugins/wall/wall.schema	1970-01-01 00:00:00.000000000 +0000
@@ -1,959 +0,0 @@
-<!-- schema file written by bcop -->
-<gconfschemafile>
-    <schemalist>
-        <!-- options for wall -->
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/expo_key</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/expo_key</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>&lt;Super&gt;e</default>
-            <locale name="C">
-                <short>Expo Key</short>
-                <long>Engage wall expo mode (Key Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/expo_button</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/expo_button</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>None</default>
-            <locale name="C">
-                <short>Expo Button</short>
-                <long>Engage wall expo mode (Mouse Button Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/expo_bell</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/expo_bell</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Expo Bell</short>
-                <long>Engage wall expo mode (System Bell Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/expo_edge</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/expo_edge</applyto>
-            <owner>compiz</owner>
-            <type>list</type>
-            <list_type>string</list_type>
-            <default>[TopLeft]</default>
-            <locale name="C">
-                <short>Expo Edge</short>
-                <long>Engage wall expo mode (Screen Edge Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/rotate</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/rotate</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Rotate Wall</short>
-                <long>Rotate wall in expo mode</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/slide_duration</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/slide_duration</applyto>
-            <owner>compiz</owner>
-            <type>float</type>
-            <default>0.300000</default>
-            <locale name="C">
-                <short>Wall Sliding Duration</short>
-                <long>Duration (in s) for wall sliding viewport switching animation (0.100000-5.000000)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/expo_animation</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/expo_animation</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>Zoom</default>
-            <locale name="C">
-                <short>Expo Animation</short>
-                <long>Animation used when switching to expo mode (Zoom, Fade + Zoom, Vortex)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/sticky_key</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/sticky_key</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>&lt;Super&gt;&lt;Alt&gt;s</default>
-            <locale name="C">
-                <short>Sticky Key</short>
-                <long>Engage wall sticky mode (Key Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/sticky_button</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/sticky_button</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>None</default>
-            <locale name="C">
-                <short>Sticky Button</short>
-                <long>Engage wall sticky mode (Mouse Button Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/sticky_bell</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/sticky_bell</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Sticky Bell</short>
-                <long>Engage wall sticky mode (System Bell Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/sticky_edge</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/sticky_edge</applyto>
-            <owner>compiz</owner>
-            <type>list</type>
-            <list_type>string</list_type>
-            <default>[]</default>
-            <locale name="C">
-                <short>Sticky Edge</short>
-                <long>Engage wall sticky mode (Screen Edge Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/mipmaps</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/mipmaps</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Mipmaps</short>
-                <long>Generate mipmaps in expo mode</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/aspect_ratio</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/aspect_ratio</applyto>
-            <owner>compiz</owner>
-            <type>float</type>
-            <default>1.000000</default>
-            <locale name="C">
-                <short>Expo Mode Aspect Ratio</short>
-                <long>Expo mode wall aspect ratio (0.000000-10.000000)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/expo_immediate_move</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/expo_immediate_move</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Immediate moves in expo mode</short>
-                <long>Selects if windows movements in expo mode should be immediate - this among other things disables wobbliness</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/show_switcher</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/show_switcher</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>true</default>
-            <locale name="C">
-                <short>Show Viewport Switcher Preview</short>
-                <long>Show switcher window while switching viewports</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/miniscreen</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/miniscreen</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Show Live Viewport Previews</short>
-                <long>Show live viewport previews in switcher window</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/preview_timeout</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/preview_timeout</applyto>
-            <owner>compiz</owner>
-            <type>float</type>
-            <default>0.400000</default>
-            <locale name="C">
-                <short>Switch Target Preview Visibility Time</short>
-                <long>Duration (in s) the switch target preview should remain visible after switching ends. (0.000000-2.000000)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/allow_wraparound</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/allow_wraparound</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Allow Wrap-Around</short>
-                <long>Allow wrap-around when moving the wall up/down/left/right</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/left_key</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/left_key</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>&lt;Control&gt;&lt;Alt&gt;Left</default>
-            <locale name="C">
-                <short>Move Left Key</short>
-                <long>Move along the wall to the left (Key Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/left_button</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/left_button</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>None</default>
-            <locale name="C">
-                <short>Move Left Button</short>
-                <long>Move along the wall to the left (Mouse Button Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/left_bell</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/left_bell</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Move Left Bell</short>
-                <long>Move along the wall to the left (System Bell Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/left_edge</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/left_edge</applyto>
-            <owner>compiz</owner>
-            <type>list</type>
-            <list_type>string</list_type>
-            <default>[]</default>
-            <locale name="C">
-                <short>Move Left Edge</short>
-                <long>Move along the wall to the left (Screen Edge Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/right_key</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/right_key</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>&lt;Control&gt;&lt;Alt&gt;Right</default>
-            <locale name="C">
-                <short>Move Right Key</short>
-                <long>Move along the wall to the right (Key Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/right_button</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/right_button</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>None</default>
-            <locale name="C">
-                <short>Move Right Button</short>
-                <long>Move along the wall to the right (Mouse Button Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/right_bell</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/right_bell</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Move Right Bell</short>
-                <long>Move along the wall to the right (System Bell Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/right_edge</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/right_edge</applyto>
-            <owner>compiz</owner>
-            <type>list</type>
-            <list_type>string</list_type>
-            <default>[]</default>
-            <locale name="C">
-                <short>Move Right Edge</short>
-                <long>Move along the wall to the right (Screen Edge Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/up_key</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/up_key</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>&lt;Control&gt;&lt;Alt&gt;Up</default>
-            <locale name="C">
-                <short>Move Up Key</short>
-                <long>Move along the wall up (Key Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/up_button</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/up_button</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>None</default>
-            <locale name="C">
-                <short>Move Up Button</short>
-                <long>Move along the wall up (Mouse Button Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/up_bell</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/up_bell</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Move Up Bell</short>
-                <long>Move along the wall up (System Bell Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/up_edge</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/up_edge</applyto>
-            <owner>compiz</owner>
-            <type>list</type>
-            <list_type>string</list_type>
-            <default>[]</default>
-            <locale name="C">
-                <short>Move Up Edge</short>
-                <long>Move along the wall up (Screen Edge Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/down_key</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/down_key</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>&lt;Control&gt;&lt;Alt&gt;Down</default>
-            <locale name="C">
-                <short>Move Down Key</short>
-                <long>Move along the wall down (Key Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/down_button</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/down_button</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>None</default>
-            <locale name="C">
-                <short>Move Down Button</short>
-                <long>Move along the wall down (Mouse Button Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/down_bell</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/down_bell</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Move Down Bell</short>
-                <long>Move along the wall down (System Bell Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/down_edge</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/down_edge</applyto>
-            <owner>compiz</owner>
-            <type>list</type>
-            <list_type>string</list_type>
-            <default>[]</default>
-            <locale name="C">
-                <short>Move Down Edge</short>
-                <long>Move along the wall down (Screen Edge Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/next_key</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/next_key</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>&lt;Control&gt;&lt;Alt&gt;Next</default>
-            <locale name="C">
-                <short>Move Next Key</short>
-                <long>Move along the wall to the next viewport (Key Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/next_button</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/next_button</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>None</default>
-            <locale name="C">
-                <short>Move Next Button</short>
-                <long>Move along the wall to the next viewport (Mouse Button Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/next_bell</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/next_bell</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Move Next Bell</short>
-                <long>Move along the wall to the next viewport (System Bell Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/next_edge</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/next_edge</applyto>
-            <owner>compiz</owner>
-            <type>list</type>
-            <list_type>string</list_type>
-            <default>[]</default>
-            <locale name="C">
-                <short>Move Next Edge</short>
-                <long>Move along the wall to the next viewport (Screen Edge Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/prev_key</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/prev_key</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>&lt;Control&gt;&lt;Alt&gt;Prev</default>
-            <locale name="C">
-                <short>Move Prev Key</short>
-                <long>Move along the wall to the previous viewport (Key Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/prev_button</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/prev_button</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>None</default>
-            <locale name="C">
-                <short>Move Prev Button</short>
-                <long>Move along the wall to the previous viewport (Mouse Button Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/prev_bell</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/prev_bell</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Move Prev Bell</short>
-                <long>Move along the wall to the previous viewport (System Bell Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/prev_edge</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/prev_edge</applyto>
-            <owner>compiz</owner>
-            <type>list</type>
-            <list_type>string</list_type>
-            <default>[]</default>
-            <locale name="C">
-                <short>Move Prev Edge</short>
-                <long>Move along the wall to the previous viewport (Screen Edge Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/left_window_key</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/left_window_key</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>&lt;Control&gt;&lt;Alt&gt;&lt;Shift&gt;Left</default>
-            <locale name="C">
-                <short>Move Left With Window Key</short>
-                <long>Move with window along the wall to the left (Key Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/left_window_button</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/left_window_button</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>None</default>
-            <locale name="C">
-                <short>Move Left With Window Button</short>
-                <long>Move with window along the wall to the left (Mouse Button Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/left_window_bell</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/left_window_bell</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Move Left With Window Bell</short>
-                <long>Move with window along the wall to the left (System Bell Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/left_window_edge</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/left_window_edge</applyto>
-            <owner>compiz</owner>
-            <type>list</type>
-            <list_type>string</list_type>
-            <default>[]</default>
-            <locale name="C">
-                <short>Move Left With Window Edge</short>
-                <long>Move with window along the wall to the left (Screen Edge Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/right_window_key</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/right_window_key</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>&lt;Control&gt;&lt;Alt&gt;&lt;Shift&gt;Right</default>
-            <locale name="C">
-                <short>Move Right With Window Key</short>
-                <long>Move with window along the wall to the right (Key Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/right_window_button</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/right_window_button</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>None</default>
-            <locale name="C">
-                <short>Move Right With Window Button</short>
-                <long>Move with window along the wall to the right (Mouse Button Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/right_window_bell</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/right_window_bell</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Move Right With Window Bell</short>
-                <long>Move with window along the wall to the right (System Bell Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/right_window_edge</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/right_window_edge</applyto>
-            <owner>compiz</owner>
-            <type>list</type>
-            <list_type>string</list_type>
-            <default>[]</default>
-            <locale name="C">
-                <short>Move Right With Window Edge</short>
-                <long>Move with window along the wall to the right (Screen Edge Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/up_window_key</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/up_window_key</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>&lt;Control&gt;&lt;Alt&gt;&lt;Shift&gt;Up</default>
-            <locale name="C">
-                <short>Move Up With Window Key</short>
-                <long>Move with window along the wall up (Key Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/up_window_button</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/up_window_button</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>None</default>
-            <locale name="C">
-                <short>Move Up With Window Button</short>
-                <long>Move with window along the wall up (Mouse Button Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/up_window_bell</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/up_window_bell</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Move Up With Window Bell</short>
-                <long>Move with window along the wall up (System Bell Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/up_window_edge</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/up_window_edge</applyto>
-            <owner>compiz</owner>
-            <type>list</type>
-            <list_type>string</list_type>
-            <default>[]</default>
-            <locale name="C">
-                <short>Move Up With Window Edge</short>
-                <long>Move with window along the wall up (Screen Edge Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/down_window_key</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/down_window_key</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>&lt;Control&gt;&lt;Alt&gt;&lt;Shift&gt;Down</default>
-            <locale name="C">
-                <short>Move Down With Window Key</short>
-                <long>Move with window along the wall down (Key Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/down_window_button</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/down_window_button</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>None</default>
-            <locale name="C">
-                <short>Move Down With Window Button</short>
-                <long>Move with window along the wall down (Mouse Button Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/down_window_bell</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/down_window_bell</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Move Down With Window Bell</short>
-                <long>Move with window along the wall down (System Bell Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/down_window_edge</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/down_window_edge</applyto>
-            <owner>compiz</owner>
-            <type>list</type>
-            <list_type>string</list_type>
-            <default>[]</default>
-            <locale name="C">
-                <short>Move Down With Window Edge</short>
-                <long>Move with window along the wall down (Screen Edge Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/up_wheel_key</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/up_wheel_key</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>None</default>
-            <locale name="C">
-                <short>Mousewheel Up Key</short>
-                <long>Mousewheel up (Key Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/up_wheel_button</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/up_wheel_button</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>None</default>
-            <locale name="C">
-                <short>Mousewheel Up Button</short>
-                <long>Mousewheel up (Mouse Button Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/up_wheel_bell</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/up_wheel_bell</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Mousewheel Up Bell</short>
-                <long>Mousewheel up (System Bell Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/up_wheel_edge</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/up_wheel_edge</applyto>
-            <owner>compiz</owner>
-            <type>list</type>
-            <list_type>string</list_type>
-            <default>[]</default>
-            <locale name="C">
-                <short>Mousewheel Up Edge</short>
-                <long>Mousewheel up (Screen Edge Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/down_wheel_key</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/down_wheel_key</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>None</default>
-            <locale name="C">
-                <short>Mousewheel Down Key</short>
-                <long>Mousewheel down (Key Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/down_wheel_button</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/down_wheel_button</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>None</default>
-            <locale name="C">
-                <short>Mousewheel Down Button</short>
-                <long>Mousewheel down (Mouse Button Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/down_wheel_bell</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/down_wheel_bell</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Mousewheel Down Bell</short>
-                <long>Mousewheel down (System Bell Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/down_wheel_edge</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/down_wheel_edge</applyto>
-            <owner>compiz</owner>
-            <type>list</type>
-            <list_type>string</list_type>
-            <default>[]</default>
-            <locale name="C">
-                <short>Mousewheel Down Edge</short>
-                <long>Mousewheel down (Screen Edge Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/flip_left_key</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/flip_left_key</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>None</default>
-            <locale name="C">
-                <short>Flip Left Key</short>
-                <long>Flip left (Key Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/flip_left_button</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/flip_left_button</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>None</default>
-            <locale name="C">
-                <short>Flip Left Button</short>
-                <long>Flip left (Mouse Button Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/flip_left_bell</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/flip_left_bell</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Flip Left Bell</short>
-                <long>Flip left (System Bell Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/flip_left_edge</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/flip_left_edge</applyto>
-            <owner>compiz</owner>
-            <type>list</type>
-            <list_type>string</list_type>
-            <default>[Left]</default>
-            <locale name="C">
-                <short>Flip Left Edge</short>
-                <long>Flip left (Screen Edge Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/flip_right_key</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/flip_right_key</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>None</default>
-            <locale name="C">
-                <short>Flip Right Key</short>
-                <long>Flip right (Key Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/flip_right_button</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/flip_right_button</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>None</default>
-            <locale name="C">
-                <short>Flip Right Button</short>
-                <long>Flip right (Mouse Button Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/flip_right_bell</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/flip_right_bell</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Flip Right Bell</short>
-                <long>Flip right (System Bell Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/flip_right_edge</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/flip_right_edge</applyto>
-            <owner>compiz</owner>
-            <type>list</type>
-            <list_type>string</list_type>
-            <default>[Right]</default>
-            <locale name="C">
-                <short>Flip Right Edge</short>
-                <long>Flip right (Screen Edge Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/flip_up_key</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/flip_up_key</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>None</default>
-            <locale name="C">
-                <short>Flip Up Key</short>
-                <long>Flip up (Key Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/flip_up_button</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/flip_up_button</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>None</default>
-            <locale name="C">
-                <short>Flip Up Button</short>
-                <long>Flip up (Mouse Button Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/flip_up_bell</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/flip_up_bell</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Flip Up Bell</short>
-                <long>Flip up (System Bell Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/flip_up_edge</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/flip_up_edge</applyto>
-            <owner>compiz</owner>
-            <type>list</type>
-            <list_type>string</list_type>
-            <default>[Top]</default>
-            <locale name="C">
-                <short>Flip Up Edge</short>
-                <long>Flip up (Screen Edge Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/flip_down_key</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/flip_down_key</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>None</default>
-            <locale name="C">
-                <short>Flip Down Key</short>
-                <long>Flip down (Key Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/flip_down_button</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/flip_down_button</applyto>
-            <owner>compiz</owner>
-            <type>string</type>
-            <default>None</default>
-            <locale name="C">
-                <short>Flip Down Button</short>
-                <long>Flip down (Mouse Button Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/flip_down_bell</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/flip_down_bell</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Flip Down Bell</short>
-                <long>Flip down (System Bell Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/allscreens/options/flip_down_edge</key>
-            <applyto>/apps/compiz/plugins/wall/allscreens/options/flip_down_edge</applyto>
-            <owner>compiz</owner>
-            <type>list</type>
-            <list_type>string</list_type>
-            <default>[Bottom]</default>
-            <locale name="C">
-                <short>Flip Down Edge</short>
-                <long>Flip down (Screen Edge Binding)</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/screen0/options/edgeflip_pointer</key>
-            <applyto>/apps/compiz/plugins/wall/screen0/options/edgeflip_pointer</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Edge Flip Pointer</short>
-                <long>Flip viewport when moving the pointer to a screen edge</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/screen0/options/edgeflip_move</key>
-            <applyto>/apps/compiz/plugins/wall/screen0/options/edgeflip_move</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>true</default>
-            <locale name="C">
-                <short>Edge Flip Move</short>
-                <long>Flip viewport when moving a window to a screen edge</long>
-            </locale>
-        </schema>
-        <schema>
-            <key>/schemas/apps/compiz/plugins/wall/screen0/options/edgeflip_dnd</key>
-            <applyto>/apps/compiz/plugins/wall/screen0/options/edgeflip_dnd</applyto>
-            <owner>compiz</owner>
-            <type>bool</type>
-            <default>false</default>
-            <locale name="C">
-                <short>Edge Flip DnD</short>
-                <long>Flip viewport when dragging an object to a screen edge</long>
-            </locale>
-        </schema>
-    </schemalist>
-</gconfschemafile>
diff -Nurp extra-plugins.orig/wallpaper/wallpaper.c extra-plugins/wallpaper/wallpaper.c
--- extra-plugins.orig/wallpaper/wallpaper.c	2007-04-03 02:40:04.000000000 +0000
+++ extra-plugins/wallpaper/wallpaper.c	2007-05-10 13:32:56.000000000 +0000
@@ -134,8 +134,6 @@ wallpaperScreenInitOptions (WallpaperScr
 
 	o = &ws->opt[WALLPAPER_SCREEN_OPTION_IMAGES];
 	o->name			= "images";
-	o->shortDesc		= "Sets individual wallpapers";
-	o->longDesc		= "Sets individual wallpapers for each face of the cube";
 	o->type			= CompOptionTypeList;
 	o->value.list.type	= CompOptionTypeString;
 	o->value.list.nValue	= virtualScreenSize;
diff -Nurp extra-plugins.orig/wallpaper/wallpaper_shader.h extra-plugins/wallpaper/wallpaper_shader.h
--- extra-plugins.orig/wallpaper/wallpaper_shader.h	1970-01-01 00:00:00.000000000 +0000
+++ extra-plugins/wallpaper/wallpaper_shader.h	2007-05-10 13:32:48.000000000 +0000
@@ -0,0 +1,15 @@
+/**
+ *
+ * This file is autogenerated from :
+ *  
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ **/
+#ifndef wallpaper_SHADER_H
+#define wallpaper_SHADER_H
+
+#endif
diff -Nurp extra-plugins.orig/widget/widget.c extra-plugins/widget/widget.c
--- extra-plugins.orig/widget/widget.c	2007-04-13 00:59:08.000000000 +0000
+++ extra-plugins/widget/widget.c	2007-05-10 13:22:03.000000000 +0000
@@ -779,8 +779,6 @@ widgetScreenInitOptions (WidgetScreen *w
 
     o = &ws->opt[WIDGET_SCREEN_OPTION_SPEED];
     o->name             = "speed";
-    o->shortDesc        = "Speed";
-    o->longDesc         = "Widget speed";
     o->type             = CompOptionTypeFloat;
     o->value.f          = WIDGET_SPEED_DEFAULT;
     o->rest.f.min       = WIDGET_SPEED_MIN;
@@ -789,8 +787,6 @@ widgetScreenInitOptions (WidgetScreen *w
 
     o = &ws->opt[WIDGET_SCREEN_OPTION_TIMESTEP];
     o->name             = "timestep";
-    o->shortDesc        = "Timestep";
-    o->longDesc         = "Widget timestep";
     o->type             = CompOptionTypeFloat;
     o->value.f          = WIDGET_TIMESTEP_DEFAULT;
     o->rest.f.min       = WIDGET_TIMESTEP_MIN;
@@ -799,8 +795,6 @@ widgetScreenInitOptions (WidgetScreen *w
 
     o = &ws->opt[WIDGET_SCREEN_OPTION_PAINT_AMOUNT];
     o->name             = "paint_amount";
-    o->shortDesc        = "Final paint value modifier";
-    o->longDesc         = "Final paint value modifier";
     o->type             = CompOptionTypeFloat;
     o->value.f          = 0.5f;
     o->rest.f.min       = 0.1f;
@@ -809,8 +803,6 @@ widgetScreenInitOptions (WidgetScreen *w
 
     o = &ws->opt[WIDGET_SCREEN_OPTION_PAINT_TYPE];
     o->name	         = "paint_type";
-    o->shortDesc         = N_("The paint type when fading");
-    o->longDesc	         = N_("The paint type when fading");
     o->type	         = CompOptionTypeString;
     o->value.s		 = strdup (WIDGET_PAINT_TYPE_DEFAULT);
     o->rest.s.string     = paintTypeString;
@@ -825,8 +817,6 @@ widgetDisplayInitOptions (WidgetDisplay 
 
     o = &wd->opt[WIDGET_DISPLAY_OPTION_TOGGLE_KEY];
     o->name			     = "toggle_widget_display";
-    o->shortDesc		     = N_("Toggle Widget Display");
-    o->longDesc			     = N_("Toggle Widget Display");
     o->type			     = CompOptionTypeAction;
     o->value.action.initiate	     = widgetToggle;
     o->value.action.terminate	     = 0;
@@ -844,8 +834,6 @@ widgetDisplayInitOptions (WidgetDisplay 
 
     o = &wd->opt[WIDGET_DISPLAY_OPTION_FORCE_WIDGET];
     o->name	         = "force_widget";
-    o->shortDesc         = N_("Apps that should be forced to be a widget");
-    o->longDesc	         = N_("Apps that should be forced to be a widget (uses wmName)");
     o->type	         = CompOptionTypeList;
     o->value.list.type   = CompOptionTypeString;
     o->value.list.nValue = N_FORCE_APPS;
diff -Nurp extra-plugins.orig/widget/widget_shader.h extra-plugins/widget/widget_shader.h
--- extra-plugins.orig/widget/widget_shader.h	1970-01-01 00:00:00.000000000 +0000
+++ extra-plugins/widget/widget_shader.h	2007-05-10 13:21:49.000000000 +0000
@@ -0,0 +1,15 @@
+/**
+ *
+ * This file is autogenerated from :
+ *  
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ **/
+#ifndef widget_SHADER_H
+#define widget_SHADER_H
+
+#endif
diff -Nurp extra-plugins.orig/winrules/winrules.c extra-plugins/winrules/winrules.c
--- extra-plugins.orig/winrules/winrules.c	2007-04-04 14:40:35.000000000 +0000
+++ extra-plugins/winrules/winrules.c	2007-05-10 13:32:27.000000000 +0000
@@ -245,104 +245,78 @@ winrulesScreenInitOptions (WinrulesScree
 
     o = &ws->opt[WINRULES_SCREEN_OPTION_SKIPTASKBAR_MATCH];
     o->name	         = "skiptaskbar_match";
-    o->shortDesc         = N_("Skip taskbar");
-    o->longDesc	         = N_("Don't show application in taskbar");
     o->type	         = CompOptionTypeMatch;
     matchInit (&o->value.match);
     matchAddFromString (&o->value.match, "");
 
     o = &ws->opt[WINRULES_SCREEN_OPTION_SKIPPAGER_MATCH];
     o->name	         = "skippager_match";
-    o->shortDesc         = N_("Skip pager");
-    o->longDesc	         = N_("Don't show application in pager");
     o->type	         = CompOptionTypeMatch;
     matchInit (&o->value.match);
     matchAddFromString (&o->value.match, "");
 
     o = &ws->opt[WINRULES_SCREEN_OPTION_ABOVE_MATCH];
     o->name	         = "above_match";
-    o->shortDesc         = N_("Above");
-    o->longDesc	         = N_("Above others windows");
     o->type	         = CompOptionTypeMatch;
     matchInit (&o->value.match);
     matchAddFromString (&o->value.match, "");
 
     o = &ws->opt[WINRULES_SCREEN_OPTION_BELOW_MATCH];
     o->name	         = "below_match";
-    o->shortDesc         = N_("Below");
-    o->longDesc	         = N_("Below others windows");
     o->type	         = CompOptionTypeMatch;
     matchInit (&o->value.match);
     matchAddFromString (&o->value.match, "");
 
     o = &ws->opt[WINRULES_SCREEN_OPTION_STICKY_MATCH];
     o->name	         = "sticky_match";
-    o->shortDesc         = N_("Sticky");
-    o->longDesc	         = N_("Sticky windows");
     o->type	         = CompOptionTypeMatch;
     matchInit (&o->value.match);
     matchAddFromString (&o->value.match, "");
 
     o = &ws->opt[WINRULES_SCREEN_OPTION_FULLSCREEN_MATCH];
     o->name	         = "fullscreen_match";
-    o->shortDesc         = N_("Fullscreen");
-    o->longDesc	         = N_("Fullscreen windows");
     o->type	         = CompOptionTypeMatch;
     matchInit (&o->value.match);
     matchAddFromString (&o->value.match, "");
 
     o = &ws->opt[WINRULES_SCREEN_OPTION_MOVE_MATCH];
     o->name	         = "no_move_match";
-    o->shortDesc         = N_("Non movable windows");
-    o->longDesc	         = N_("Set window as non movable");
     o->type	         = CompOptionTypeMatch;
     matchInit (&o->value.match);
     matchAddFromString (&o->value.match, "");
 
     o = &ws->opt[WINRULES_SCREEN_OPTION_RESIZE_MATCH];
     o->name	         = "no_resize_match";
-    o->shortDesc         = N_("Non resizable windows");
-    o->longDesc	         = N_("Set window as non resizable");
     o->type	         = CompOptionTypeMatch;
     matchInit (&o->value.match);
     matchAddFromString (&o->value.match, "");
 
     o = &ws->opt[WINRULES_SCREEN_OPTION_MINIMIZE_MATCH];
     o->name	         = "no_minimize_match";
-    o->shortDesc         = N_("Non minimizable windows");
-    o->longDesc	         = N_("Set window as non minimizable");
     o->type	         = CompOptionTypeMatch;
     matchInit (&o->value.match);
     matchAddFromString (&o->value.match, "");
 
     o = &ws->opt[WINRULES_SCREEN_OPTION_MAXIMIZE_MATCH];
     o->name	         = "no_maximize_match";
-    o->shortDesc         = N_("Non maximizable windows");
-    o->longDesc	         = N_("Set window as non maximizable");
     o->type	         = CompOptionTypeMatch;
     matchInit (&o->value.match);
     matchAddFromString (&o->value.match, "");
 
     o = &ws->opt[WINRULES_SCREEN_OPTION_CLOSE_MATCH];
     o->name	         = "no_close_match";
-    o->shortDesc         = N_("Non closable windows");
-    o->longDesc	         = N_("Set window as non closable");
     o->type	         = CompOptionTypeMatch;
     matchInit (&o->value.match);
     matchAddFromString (&o->value.match, "");
 
     o = &ws->opt[WINRULES_SCREEN_OPTION_NOFOCUS_MATCH];
     o->name	         = "no_focus_match";
-    o->shortDesc         = N_("No focus");
-    o->longDesc	         = N_("Windows will not have focus");
     o->type	         = CompOptionTypeMatch;
     matchInit (&o->value.match);
     matchAddFromString (&o->value.match, "");
     
     o = &ws->opt[WINRULES_SCREEN_OPTION_WIDGET_MATCH];
     o->name	         = "widget_match";
-    o->shortDesc         = N_("Widget");
-    o->longDesc	         = N_("Set window as widget");
     o->type	         = CompOptionTypeMatch;
     matchInit (&o->value.match);
     matchAddFromString (&o->value.match, "");
diff -Nurp extra-plugins.orig/winrules/winrules_shader.h extra-plugins/winrules/winrules_shader.h
--- extra-plugins.orig/winrules/winrules_shader.h	1970-01-01 00:00:00.000000000 +0000
+++ extra-plugins/winrules/winrules_shader.h	2007-05-10 13:32:00.000000000 +0000
@@ -0,0 +1,15 @@
+/**
+ *
+ * This file is autogenerated from :
+ *  
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ **/
+#ifndef winrules_SHADER_H
+#define winrules_SHADER_H
+
+#endif
